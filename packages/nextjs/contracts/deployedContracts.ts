/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    MockToken1: {
      address: "0xfb2d6b6bee250e6da55138127b135b5645758076",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    MockToken2: {
      address: "0xf295d11b18e2bb5370b11f1a4b65d2607ef25213",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    MockVeBAL: {
      address: "0xe4715d4f6a29ded68b06d0f13d8dcf093350f39f",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    ConstantSumFactory: {
      address: "0x816fee0147872fb55da799afa4456b1a404ed974",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "protocolFeeExempt",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        disable:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
      },
    },
    VeBALFeeDiscountHookExample: {
      address: "0x502b33847aaacfc8ab88269a15a9fd4c35cd30a7",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "allowedFactory",
              type: "address",
              internalType: "address",
            },
            {
              name: "veBAL",
              type: "address",
              internalType: "address",
            },
            {
              name: "trustedRouter",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "hookFlags",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "params",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "staticSwapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "factory",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "VeBALFeeDiscountHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "factory",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
      },
    },
    ConstantProductFactory: {
      address: "0x408d5de7c14bbcded743f1c3600fcc8538840698",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "protocolFeeExempt",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        disable:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
      },
    },
    LotteryHookExample: {
      address: "0xec981bd359e66945cd98d79ba65e8f09ad9b3227",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "LUCKY_NUMBER",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "MAX_NUMBER",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getRandomNumber",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hookSwapFeePercentage",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "params",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "success",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "hookAdjustedAmountCalculatedRaw",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setHookSwapFeePercentage",
          inputs: [
            {
              name: "swapFeePercentage",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "HookSwapFeePercentageChanged",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "hookFeePercentage",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryFeeCollected",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryWinningsPaid",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "winner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "amountWon",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "IndexOutOfBounds",
          inputs: [],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "SafeERC20FailedOperation",
          inputs: [
            {
              name: "token",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    WeightedPoolFactory: {
      address: "0x693dc3d1bf28e47fb4351e5c2e641f67e46bdaf1",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
            {
              name: "factoryVersion",
              type: "string",
              internalType: "string",
            },
            {
              name: "poolVersion",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "normalizedWeights",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "enableDonation",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "disableUnbalancedLiquidity",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPoolVersion",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "version",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        getPoolVersion:
          "lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IPoolVersion.sol",
        disable:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        version:
          "lib/balancer-v3-monorepo/pkg/solidity-utils/contracts/helpers/Version.sol",
      },
    },
    ExitFeeHookExample: {
      address: "0x9b0ea8759a6e624f5657250b22a9b66ad77c3334",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "MAX_EXIT_FEE_PERCENTAGE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "exitFeePercentage",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "kind",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "hookAdjustedAmountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setExitFeePercentage",
          inputs: [
            {
              name: "newExitFeePercentage",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "ExitFeeCharged",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ExitFeeHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ExitFeePercentageChanged",
          inputs: [
            {
              name: "hookContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "exitFeePercentage",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ExitFeeAboveLimit",
          inputs: [
            {
              name: "feePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "PoolDoesNotSupportDonation",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    NFTMetadata: {
      address: "0xe7eb17d25cdd4fa0f3025d32f079284ac88825f4",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setTierColor",
          inputs: [
            {
              name: "tier",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "color",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setTierName",
          inputs: [
            {
              name: "tier",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "tier",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    RewardToken: {
      address: "0x2eea4fa98ec95fc18a89ec518c099733e9fc959a",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_stakingHook",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "stakingHook",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    NFTLiquidityStakingHook: {
      address: "0x32ddff24724d2603a5324fded4a3aa0daa5c83ef",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vaultInstance",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "_factoryAddress",
              type: "address",
              internalType: "address",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "_nftMetadata",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "BRONZE_TIER_AMOUNT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "BRONZE_TIER_THRESHOLD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "COOLDOWN_PERIOD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "GOLD_TIER_AMOUNT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "GOLD_TIER_THRESHOLD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "REWARD_RATE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "SILVER_TIER_AMOUNT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "SILVER_TIER_THRESHOLD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "UPGRADE_COOLDOWN_PERIOD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "calculateRewards",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "claimRewards",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "delegate",
          inputs: [
            {
              name: "delegatee",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "delegateBySig",
          inputs: [
            {
              name: "delegatee",
              type: "address",
              internalType: "address",
            },
            {
              name: "nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "expiry",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "v",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "delegates",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getApproved",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getFeeDiscount",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getFeeDiscounts",
          inputs: [],
          outputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "discounts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "hookFlags",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getPastTotalSupply",
          inputs: [
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPastVotes",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRemainingCooldownTime",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVotes",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVotingPower",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getYieldBoost",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "governor",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract NFTGovernor",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isApprovedForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "lastUnstakeTime",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftMetadata",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract NFTMetadata",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftTierToFeeDiscount",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftTierToVotingPower",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftTierToYieldBoost",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
            {
              name: "amountsInScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "bptAmountOut",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "balancesScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "userData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "success",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
            {
              name: "amountsOutScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "bptAmountIn",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "balancesScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "userData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "success",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "factory",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "ownerOf",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "rewardToken",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract RewardToken",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setApprovalForAll",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setFeeDiscounts",
          inputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "discounts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setGovernor",
          inputs: [
            {
              name: "_governor",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setRewardToken",
          inputs: [
            {
              name: "_rewardToken",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setVotingPowers",
          inputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "votingPowers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setYieldBoosts",
          inputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "boosts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "stakingInfo",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "stakedAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "stakingStartTime",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lastMilestoneTime",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "currentTier",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lastRewardClaim",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenOfOwnerByIndex",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "index",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upgradeNFT",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ApprovalForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DelegateChanged",
          inputs: [
            {
              name: "delegator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "fromDelegate",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "toDelegate",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DelegateVotesChanged",
          inputs: [
            {
              name: "delegate",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "previousVotes",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "newVotes",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LiquidityAdded",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LiquidityRemoved",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTMinted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "tier",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTUpgraded",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "newTier",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RewardsClaimed",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC721IncorrectOwner",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InsufficientApproval",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721NonexistentToken",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
        {
          type: "error",
          name: "VotesExpiredSignature",
          inputs: [
            {
              name: "expiry",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getFeeDiscount:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getRemainingCooldownTime:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getVotingPower:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getYieldBoost:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        stakingInfo:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        balanceOf:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        getApproved:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        isApprovedForAll:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        ownerOf: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        safeTransferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        setApprovalForAll:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        supportsInterface:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        tokenURI:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        delegate:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        delegateBySig:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        delegates:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        getPastTotalSupply:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        getPastVotes:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        getVotes:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
      },
    },
    NFTGovernor: {
      address: "0x1c814db502515ab942b389966418fe7141615f0e",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_token",
              type: "address",
              internalType: "contract IVotes",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "receive",
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "BALLOT_TYPEHASH",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "CLOCK_MODE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "COUNTING_MODE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "EXTENDED_BALLOT_TYPEHASH",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "cancel",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVote",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteBySig",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteWithReason",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "reason",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteWithReasonAndParams",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "reason",
              type: "string",
              internalType: "string",
            },
            {
              name: "params",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteWithReasonAndParamsBySig",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
            {
              name: "reason",
              type: "string",
              internalType: "string",
            },
            {
              name: "params",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "clock",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint48",
              internalType: "uint48",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "eip712Domain",
          inputs: [],
          outputs: [
            {
              name: "fields",
              type: "bytes1",
              internalType: "bytes1",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "version",
              type: "string",
              internalType: "string",
            },
            {
              name: "chainId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "verifyingContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "extensions",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "execute",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "getVotes",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVotesWithParams",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "params",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hasVoted",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hashProposal",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nonces",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onERC1155BatchReceived",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onERC1155Received",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onERC721Received",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "proposalDeadline",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalEta",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalNeedsQueuing",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalProposer",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalSnapshot",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalThreshold",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalVotes",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "againstVotes",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "forVotes",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "abstainVotes",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "propose",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "description",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "queue",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "quorum",
          inputs: [
            {
              name: "blockNumber",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "relay",
          inputs: [
            {
              name: "target",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "state",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "enum IGovernor.ProposalState",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "token",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IERC5805",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "version",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "votingDelay",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "votingPeriod",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "event",
          name: "EIP712DomainChanged",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalCanceled",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalCreated",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "proposer",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "targets",
              type: "address[]",
              indexed: false,
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "signatures",
              type: "string[]",
              indexed: false,
              internalType: "string[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              indexed: false,
              internalType: "bytes[]",
            },
            {
              name: "voteStart",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "voteEnd",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "description",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalExecuted",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalQueued",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "etaSeconds",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "VoteCast",
          inputs: [
            {
              name: "voter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              indexed: false,
              internalType: "uint8",
            },
            {
              name: "weight",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "reason",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "VoteCastWithParams",
          inputs: [
            {
              name: "voter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              indexed: false,
              internalType: "uint8",
            },
            {
              name: "weight",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "reason",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "params",
              type: "bytes",
              indexed: false,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "FailedCall",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorAlreadyCastVote",
          inputs: [
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorAlreadyQueuedProposal",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorDisabledDeposit",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorInsufficientProposerVotes",
          inputs: [
            {
              name: "proposer",
              type: "address",
              internalType: "address",
            },
            {
              name: "votes",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "threshold",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorInvalidProposalLength",
          inputs: [
            {
              name: "targets",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "calldatas",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "values",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorInvalidSignature",
          inputs: [
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorInvalidVoteParams",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorInvalidVoteType",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorInvalidVotingPeriod",
          inputs: [
            {
              name: "votingPeriod",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorNonexistentProposal",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorNotQueuedProposal",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorOnlyExecutor",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorOnlyProposer",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorQueueNotImplemented",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorRestrictedProposer",
          inputs: [
            {
              name: "proposer",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorUnexpectedProposalState",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "current",
              type: "uint8",
              internalType: "enum IGovernor.ProposalState",
            },
            {
              name: "expectedStates",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidAccountNonce",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "currentNonce",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidShortString",
          inputs: [],
        },
        {
          type: "error",
          name: "SafeCastOverflowedUintDowncast",
          inputs: [
            {
              name: "bits",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "StringTooLong",
          inputs: [
            {
              name: "str",
              type: "string",
              internalType: "string",
            },
          ],
        },
      ],
      inheritedFunctions: {
        BALLOT_TYPEHASH:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        CLOCK_MODE:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        COUNTING_MODE:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        EXTENDED_BALLOT_TYPEHASH:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        cancel:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVote:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteBySig:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteWithReason:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteWithReasonAndParams:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteWithReasonAndParamsBySig:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        clock:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        eip712Domain:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        execute:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        getVotes:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        getVotesWithParams:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        hasVoted:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        hashProposal:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        name: "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        nonces:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        onERC1155BatchReceived:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        onERC1155Received:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        onERC721Received:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalDeadline:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalEta:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalNeedsQueuing:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalProposer:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalSnapshot:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalThreshold:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        propose:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        queue:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        quorum:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        relay:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        state:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        supportsInterface:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        version:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        votingDelay:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        votingPeriod:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalVotes:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol",
        token:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
      },
    },
  },
  11155111: {
    MockToken1: {
      address: "0x1d05f8153a0dc80fb76fa728cfa3349624479ecb",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    MockToken2: {
      address: "0x9e37b05d17e4a83855a9d340b608e19f45c58ec9",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    MockVeBAL: {
      address: "0x8c1171e2d678d240af5319c7bbc46f5e6c86ae74",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "initialSupply",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    ConstantSumFactory: {
      address: "0xae10d644c6490a52d1eba7032d61a431970100d7",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "protocolFeeExempt",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        disable:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
      },
    },
    VeBALFeeDiscountHookExample: {
      address: "0xb1e483466f1c5974664d974d7381b99ace18f4ac",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "allowedFactory",
              type: "address",
              internalType: "address",
            },
            {
              name: "veBAL",
              type: "address",
              internalType: "address",
            },
            {
              name: "trustedRouter",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "hookFlags",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "params",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "staticSwapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "factory",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "VeBALFeeDiscountHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "factory",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
      },
    },
    ConstantProductFactory: {
      address: "0xd8ad58b276a17091d95508b5754d97e8a116050b",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "protocolFeeExempt",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        disable:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
      },
    },
    LotteryHookExample: {
      address: "0x9ae4dcb6afa0f4ab64b8d8f1cc468f0bf5631747",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "LUCKY_NUMBER",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "MAX_NUMBER",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getRandomNumber",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hookSwapFeePercentage",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "params",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "success",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "hookAdjustedAmountCalculatedRaw",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setHookSwapFeePercentage",
          inputs: [
            {
              name: "swapFeePercentage",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "HookSwapFeePercentageChanged",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "hookFeePercentage",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryFeeCollected",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LotteryWinningsPaid",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "winner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "amountWon",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "IndexOutOfBounds",
          inputs: [],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "SafeERC20FailedOperation",
          inputs: [
            {
              name: "token",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    WeightedPoolFactory: {
      address: "0x234248869a12a096dd9e56ce23a2543ccfb3057f",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "pauseWindowDuration",
              type: "uint32",
              internalType: "uint32",
            },
            {
              name: "factoryVersion",
              type: "string",
              internalType: "string",
            },
            {
              name: "poolVersion",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "create",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "tokens",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "normalizedWeights",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "roleAccounts",
              type: "tuple",
              internalType: "struct PoolRoleAccounts",
              components: [
                {
                  name: "pauseManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "swapFeeManager",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "poolCreator",
                  type: "address",
                  internalType: "address",
                },
              ],
            },
            {
              name: "swapFeePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "poolHooksContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "enableDonation",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "disableUnbalancedLiquidity",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "disable",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getActionId",
          inputs: [
            {
              name: "selector",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAuthorizer",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IAuthorizer",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getDefaultLiquidityManagement",
          inputs: [],
          outputs: [
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDefaultPoolHooksContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getDeploymentAddress",
          inputs: [
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNewPoolPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOriginalPauseWindowEndTime",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPauseWindowDuration",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPoolVersion",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVault",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isDisabled",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isPoolFromFactory",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "version",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "FactoryDisabled",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "Disabled",
          inputs: [],
        },
        {
          type: "error",
          name: "PoolPauseWindowDurationOverflow",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderNotAllowed",
          inputs: [],
        },
        {
          type: "error",
          name: "StandardPoolWithCreator",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        getPoolVersion:
          "lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IPoolVersion.sol",
        disable:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getActionId:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getAuthorizer:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultLiquidityManagement:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDefaultPoolHooksContract:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getDeploymentAddress:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getNewPoolPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getOriginalPauseWindowEndTime:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getPauseWindowDuration:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        getVault:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isDisabled:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        isPoolFromFactory:
          "lib/balancer-v3-monorepo/pkg/pool-utils/contracts/BasePoolFactory.sol",
        version:
          "lib/balancer-v3-monorepo/pkg/solidity-utils/contracts/helpers/Version.sol",
      },
    },
    ExitFeeHookExample: {
      address: "0x43dcb83127a2b023b5f21856261facf43c22d8ab",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vault",
              type: "address",
              internalType: "contract IVault",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "MAX_EXIT_FEE_PERCENTAGE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "exitFeePercentage",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "kind",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "hookAdjustedAmountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "liquidityManagement",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setExitFeePercentage",
          inputs: [
            {
              name: "newExitFeePercentage",
              type: "uint64",
              internalType: "uint64",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "ExitFeeCharged",
          inputs: [
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "token",
              type: "address",
              indexed: true,
              internalType: "contract IERC20",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ExitFeeHookExampleRegistered",
          inputs: [
            {
              name: "hooksContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ExitFeePercentageChanged",
          inputs: [
            {
              name: "hookContract",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "exitFeePercentage",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ExitFeeAboveLimit",
          inputs: [
            {
              name: "feePercentage",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "PoolDoesNotSupportDonation",
          inputs: [],
        },
        {
          type: "error",
          name: "SenderIsNotVault",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    NFTMetadata: {
      address: "0x6292d508ef769b008c6fb701b8c7dcd7263fe5f4",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setTierColor",
          inputs: [
            {
              name: "tier",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "color",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setTierName",
          inputs: [
            {
              name: "tier",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "tier",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    RewardToken: {
      address: "0x9bfb9b1e8fa4d11366106d2f4b5333cf5f6653fa",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_stakingHook",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allowance",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "decimals",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "mint",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "stakingHook",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "totalSupply",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transfer",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "spender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20InsufficientAllowance",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
            {
              name: "allowance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InsufficientBalance",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "needed",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC20InvalidSpender",
          inputs: [
            {
              name: "spender",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        allowance: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        balanceOf: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        decimals: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        totalSupply:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transfer: "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
      },
    },
    NFTLiquidityStakingHook: {
      address: "0x8a5fcbb6c08309e470bbdb6ee068dc403920aa2c",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "vaultInstance",
              type: "address",
              internalType: "contract IVault",
            },
            {
              name: "_factoryAddress",
              type: "address",
              internalType: "address",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
            {
              name: "_nftMetadata",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "BRONZE_TIER_AMOUNT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "BRONZE_TIER_THRESHOLD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "COOLDOWN_PERIOD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "GOLD_TIER_AMOUNT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "GOLD_TIER_THRESHOLD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "REWARD_RATE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "SILVER_TIER_AMOUNT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "SILVER_TIER_THRESHOLD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "UPGRADE_COOLDOWN_PERIOD",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "calculateRewards",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "claimRewards",
          inputs: [
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "delegate",
          inputs: [
            {
              name: "delegatee",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "delegateBySig",
          inputs: [
            {
              name: "delegatee",
              type: "address",
              internalType: "address",
            },
            {
              name: "nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "expiry",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "v",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "r",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "s",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "delegates",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getApproved",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getFeeDiscount",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getFeeDiscounts",
          inputs: [],
          outputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "discounts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookFlags",
          inputs: [],
          outputs: [
            {
              name: "hookFlags",
              type: "tuple",
              internalType: "struct HookFlags",
              components: [
                {
                  name: "enableHookAdjustedAmounts",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallComputeDynamicSwapFee",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallBeforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "shouldCallAfterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getPastTotalSupply",
          inputs: [
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPastVotes",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRemainingCooldownTime",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVotes",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVotingPower",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getYieldBoost",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "governor",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract NFTGovernor",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isApprovedForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "lastUnstakeTime",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftMetadata",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract NFTMetadata",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftTierToFeeDiscount",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftTierToVotingPower",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nftTierToYieldBoost",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
            {
              name: "amountsInScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "bptAmountOut",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "balancesScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "userData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "success",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsInRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "amountsOutRaw",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterRemoveLiquidity",
          inputs: [
            {
              name: "router",
              type: "address",
              internalType: "address",
            },
            {
              name: "amountsOutScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "bptAmountIn",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "balancesScaled18",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "userData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "success",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onAfterSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct AfterSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "tokenIn",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenOut",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "amountInScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountOutScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenInBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "tokenOutBalanceScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "amountCalculatedRaw",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "pool",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeAddLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum AddLiquidityKind",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeInitialize",
          inputs: [
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeRemoveLiquidity",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint8",
              internalType: "enum RemoveLiquidityKind",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onBeforeSwap",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onComputeDynamicSwapFeePercentage",
          inputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolSwapParams",
              components: [
                {
                  name: "kind",
                  type: "uint8",
                  internalType: "enum SwapKind",
                },
                {
                  name: "amountGivenScaled18",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "balancesScaled18",
                  type: "uint256[]",
                  internalType: "uint256[]",
                },
                {
                  name: "indexIn",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "indexOut",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "router",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "userData",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onRegister",
          inputs: [
            {
              name: "factory",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "tuple[]",
              internalType: "struct TokenConfig[]",
              components: [
                {
                  name: "token",
                  type: "address",
                  internalType: "contract IERC20",
                },
                {
                  name: "tokenType",
                  type: "uint8",
                  internalType: "enum TokenType",
                },
                {
                  name: "rateProvider",
                  type: "address",
                  internalType: "contract IRateProvider",
                },
                {
                  name: "paysYieldFees",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "",
              type: "tuple",
              internalType: "struct LiquidityManagement",
              components: [
                {
                  name: "disableUnbalancedLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableAddLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableRemoveLiquidityCustom",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "enableDonation",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "ownerOf",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "rewardToken",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract RewardToken",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setApprovalForAll",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setFeeDiscounts",
          inputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "discounts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setGovernor",
          inputs: [
            {
              name: "_governor",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setRewardToken",
          inputs: [
            {
              name: "_rewardToken",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setVotingPowers",
          inputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "votingPowers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setYieldBoosts",
          inputs: [
            {
              name: "tiers",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "boosts",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "stakingInfo",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "stakedAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "stakingStartTime",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lastMilestoneTime",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "currentTier",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lastRewardClaim",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenOfOwnerByIndex",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "index",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "upgradeNFT",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ApprovalForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DelegateChanged",
          inputs: [
            {
              name: "delegator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "fromDelegate",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "toDelegate",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "DelegateVotesChanged",
          inputs: [
            {
              name: "delegate",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "previousVotes",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "newVotes",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LiquidityAdded",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "LiquidityRemoved",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTMinted",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "tier",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTUpgraded",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "newTier",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RewardsClaimed",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "pool",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC721IncorrectOwner",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InsufficientApproval",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721NonexistentToken",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
        {
          type: "error",
          name: "VotesExpiredSignature",
          inputs: [
            {
              name: "expiry",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
      ],
      inheritedFunctions: {
        getFeeDiscount:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getRemainingCooldownTime:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getVotingPower:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getYieldBoost:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        stakingInfo:
          "contracts/hooks/NFTLiquidityStaking/Interfaces/INFTLiquidityStakingHook.sol",
        getHookFlags:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onAfterSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeAddLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeInitialize:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeRemoveLiquidity:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onBeforeSwap:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onComputeDynamicSwapFeePercentage:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        onRegister:
          "lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol",
        approve: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        balanceOf:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        getApproved:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        isApprovedForAll:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        name: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        ownerOf: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        safeTransferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        setApprovalForAll:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        supportsInterface:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        symbol: "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        tokenURI:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        transferFrom:
          "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        delegate:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        delegateBySig:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        delegates:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        getPastTotalSupply:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        getPastVotes:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
        getVotes:
          "lib/openzeppelin-contracts/contracts/governance/utils/IVotes.sol",
      },
    },
    NFTGovernor: {
      address: "0xa52286a10e7cb78a222798217b58048ab4b6c765",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_token",
              type: "address",
              internalType: "contract IVotes",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "receive",
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "BALLOT_TYPEHASH",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "CLOCK_MODE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "COUNTING_MODE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "EXTENDED_BALLOT_TYPEHASH",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "cancel",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVote",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteBySig",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteWithReason",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "reason",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteWithReasonAndParams",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "reason",
              type: "string",
              internalType: "string",
            },
            {
              name: "params",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "castVoteWithReasonAndParamsBySig",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
            {
              name: "reason",
              type: "string",
              internalType: "string",
            },
            {
              name: "params",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "clock",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint48",
              internalType: "uint48",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "eip712Domain",
          inputs: [],
          outputs: [
            {
              name: "fields",
              type: "bytes1",
              internalType: "bytes1",
            },
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "version",
              type: "string",
              internalType: "string",
            },
            {
              name: "chainId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "verifyingContract",
              type: "address",
              internalType: "address",
            },
            {
              name: "salt",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "extensions",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "execute",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "getVotes",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getVotesWithParams",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "timepoint",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "params",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hasVoted",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hashProposal",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "nonces",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "onERC1155BatchReceived",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onERC1155Received",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "onERC721Received",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "proposalDeadline",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalEta",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalNeedsQueuing",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalProposer",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalSnapshot",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalThreshold",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "proposalVotes",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "againstVotes",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "forVotes",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "abstainVotes",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "propose",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "description",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "queue",
          inputs: [
            {
              name: "targets",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              internalType: "bytes[]",
            },
            {
              name: "descriptionHash",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "quorum",
          inputs: [
            {
              name: "blockNumber",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "relay",
          inputs: [
            {
              name: "target",
              type: "address",
              internalType: "address",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "state",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint8",
              internalType: "enum IGovernor.ProposalState",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "token",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IERC5805",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "version",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "votingDelay",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "votingPeriod",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "event",
          name: "EIP712DomainChanged",
          inputs: [],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalCanceled",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalCreated",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "proposer",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "targets",
              type: "address[]",
              indexed: false,
              internalType: "address[]",
            },
            {
              name: "values",
              type: "uint256[]",
              indexed: false,
              internalType: "uint256[]",
            },
            {
              name: "signatures",
              type: "string[]",
              indexed: false,
              internalType: "string[]",
            },
            {
              name: "calldatas",
              type: "bytes[]",
              indexed: false,
              internalType: "bytes[]",
            },
            {
              name: "voteStart",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "voteEnd",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "description",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalExecuted",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ProposalQueued",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "etaSeconds",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "VoteCast",
          inputs: [
            {
              name: "voter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              indexed: false,
              internalType: "uint8",
            },
            {
              name: "weight",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "reason",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "VoteCastWithParams",
          inputs: [
            {
              name: "voter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "proposalId",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "support",
              type: "uint8",
              indexed: false,
              internalType: "uint8",
            },
            {
              name: "weight",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "reason",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "params",
              type: "bytes",
              indexed: false,
              internalType: "bytes",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "FailedCall",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorAlreadyCastVote",
          inputs: [
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorAlreadyQueuedProposal",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorDisabledDeposit",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorInsufficientProposerVotes",
          inputs: [
            {
              name: "proposer",
              type: "address",
              internalType: "address",
            },
            {
              name: "votes",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "threshold",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorInvalidProposalLength",
          inputs: [
            {
              name: "targets",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "calldatas",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "values",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorInvalidSignature",
          inputs: [
            {
              name: "voter",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorInvalidVoteParams",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorInvalidVoteType",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorInvalidVotingPeriod",
          inputs: [
            {
              name: "votingPeriod",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorNonexistentProposal",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorNotQueuedProposal",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorOnlyExecutor",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorOnlyProposer",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorQueueNotImplemented",
          inputs: [],
        },
        {
          type: "error",
          name: "GovernorRestrictedProposer",
          inputs: [
            {
              name: "proposer",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "GovernorUnexpectedProposalState",
          inputs: [
            {
              name: "proposalId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "current",
              type: "uint8",
              internalType: "enum IGovernor.ProposalState",
            },
            {
              name: "expectedStates",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidAccountNonce",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
            {
              name: "currentNonce",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidShortString",
          inputs: [],
        },
        {
          type: "error",
          name: "SafeCastOverflowedUintDowncast",
          inputs: [
            {
              name: "bits",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "value",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "StringTooLong",
          inputs: [
            {
              name: "str",
              type: "string",
              internalType: "string",
            },
          ],
        },
      ],
      inheritedFunctions: {
        BALLOT_TYPEHASH:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        CLOCK_MODE:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        COUNTING_MODE:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        EXTENDED_BALLOT_TYPEHASH:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        cancel:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVote:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteBySig:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteWithReason:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteWithReasonAndParams:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        castVoteWithReasonAndParamsBySig:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        clock:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        eip712Domain:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        execute:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        getVotes:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        getVotesWithParams:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        hasVoted:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        hashProposal:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        name: "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        nonces:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        onERC1155BatchReceived:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        onERC1155Received:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        onERC721Received:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalDeadline:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalEta:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalNeedsQueuing:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalProposer:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalSnapshot:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalThreshold:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        propose:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        queue:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        quorum:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        relay:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        state:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        supportsInterface:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        version:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        votingDelay:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        votingPeriod:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
        proposalVotes:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorCountingSimple.sol",
        token:
          "lib/openzeppelin-contracts/contracts/governance/extensions/GovernorVotes.sol",
      },
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
