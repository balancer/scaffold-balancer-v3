{"abi":[{"type":"function","name":"querySwapExactIn","inputs":[{"name":"paths","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathExactAmountIn[]","components":[{"name":"tokenIn","type":"address","internalType":"contract IERC20"},{"name":"steps","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathStep[]","components":[{"name":"pool","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"contract IERC20"},{"name":"isBuffer","type":"bool","internalType":"bool"}]},{"name":"exactAmountIn","type":"uint256","internalType":"uint256"},{"name":"minAmountOut","type":"uint256","internalType":"uint256"}]},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"pathAmountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"tokensOut","type":"address[]","internalType":"address[]"},{"name":"amountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"querySwapExactOut","inputs":[{"name":"paths","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathExactAmountOut[]","components":[{"name":"tokenIn","type":"address","internalType":"contract IERC20"},{"name":"steps","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathStep[]","components":[{"name":"pool","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"contract IERC20"},{"name":"isBuffer","type":"bool","internalType":"bool"}]},{"name":"maxAmountIn","type":"uint256","internalType":"uint256"},{"name":"exactAmountOut","type":"uint256","internalType":"uint256"}]},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"pathAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"tokensIn","type":"address[]","internalType":"address[]"},{"name":"amountsIn","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"swapExactIn","inputs":[{"name":"paths","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathExactAmountIn[]","components":[{"name":"tokenIn","type":"address","internalType":"contract IERC20"},{"name":"steps","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathStep[]","components":[{"name":"pool","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"contract IERC20"},{"name":"isBuffer","type":"bool","internalType":"bool"}]},{"name":"exactAmountIn","type":"uint256","internalType":"uint256"},{"name":"minAmountOut","type":"uint256","internalType":"uint256"}]},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"wethIsEth","type":"bool","internalType":"bool"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"pathAmountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"tokensOut","type":"address[]","internalType":"address[]"},{"name":"amountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"payable"},{"type":"function","name":"swapExactOut","inputs":[{"name":"paths","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathExactAmountOut[]","components":[{"name":"tokenIn","type":"address","internalType":"contract IERC20"},{"name":"steps","type":"tuple[]","internalType":"struct IBatchRouter.SwapPathStep[]","components":[{"name":"pool","type":"address","internalType":"address"},{"name":"tokenOut","type":"address","internalType":"contract IERC20"},{"name":"isBuffer","type":"bool","internalType":"bool"}]},{"name":"maxAmountIn","type":"uint256","internalType":"uint256"},{"name":"exactAmountOut","type":"uint256","internalType":"uint256"}]},{"name":"deadline","type":"uint256","internalType":"uint256"},{"name":"wethIsEth","type":"bool","internalType":"bool"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"pathAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"tokensIn","type":"address[]","internalType":"address[]"},{"name":"amountsIn","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"querySwapExactIn((address,(address,address,bool)[],uint256,uint256)[],bytes)":"fe893e8b","querySwapExactOut((address,(address,address,bool)[],uint256,uint256)[],bytes)":"3910ab2a","swapExactIn((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)":"286f580d","swapExactOut((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)":"8eb1b65e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuffer\",\"type\":\"bool\"}],\"internalType\":\"struct IBatchRouter.SwapPathStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct IBatchRouter.SwapPathExactAmountIn[]\",\"name\":\"paths\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"querySwapExactIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pathAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuffer\",\"type\":\"bool\"}],\"internalType\":\"struct IBatchRouter.SwapPathStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct IBatchRouter.SwapPathExactAmountOut[]\",\"name\":\"paths\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"querySwapExactOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pathAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuffer\",\"type\":\"bool\"}],\"internalType\":\"struct IBatchRouter.SwapPathStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct IBatchRouter.SwapPathExactAmountIn[]\",\"name\":\"paths\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"swapExactIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pathAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBuffer\",\"type\":\"bool\"}],\"internalType\":\"struct IBatchRouter.SwapPathStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exactAmountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct IBatchRouter.SwapPathExactAmountOut[]\",\"name\":\"paths\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"swapExactOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pathAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"querySwapExactIn((address,(address,address,bool)[],uint256,uint256)[],bytes)\":{\"details\":\"Min amounts out specified in the paths are ignored.\",\"params\":{\"paths\":\"Swap paths from token in to token out, specifying exact amounts in\",\"userData\":\"Additional (optional) data required for the query\"},\"returns\":{\"amountsOut\":\"Calculated amounts of output tokens to be received, ordered by output token address\",\"pathAmountsOut\":\"Calculated amounts of output tokens corresponding to the last step of each given path\",\"tokensOut\":\"Output token addresses\"}},\"querySwapExactOut((address,(address,address,bool)[],uint256,uint256)[],bytes)\":{\"details\":\"Max amounts in specified in the paths are ignored.\",\"params\":{\"paths\":\"Swap paths from token in to token out, specifying exact amounts out\",\"userData\":\"Additional (optional) data required for the query\"},\"returns\":{\"amountsIn\":\"Calculated amounts of input tokens to be received, ordered by input token address\",\"pathAmountsIn\":\"Calculated amounts of input tokens corresponding to the last step of each given path\",\"tokensIn\":\"Input token addresses\"}},\"swapExactIn((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)\":{\"params\":{\"deadline\":\"Deadline for the swap, after which it will revert\",\"paths\":\"Swap paths from token in to token out, specifying exact amounts in\",\"userData\":\"Additional (optional) data required for the swap\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountsOut\":\"Calculated amounts of output tokens, ordered by output token address\",\"pathAmountsOut\":\"Calculated amounts of output tokens corresponding to the last step of each given path\",\"tokensOut\":\"Output token addresses\"}},\"swapExactOut((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)\":{\"params\":{\"deadline\":\"Deadline for the swap\",\"paths\":\"Swap paths from token in to token out, specifying exact amounts out\",\"userData\":\"Additional (optional) data required for the swap\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"amountsIn\":\"Calculated amounts of input tokens, ordered by input token address\",\"pathAmountsIn\":\"Calculated amounts of input tokens corresponding to the first step of each given path\",\"tokensIn\":\"Input token addresses\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"querySwapExactIn((address,(address,address,bool)[],uint256,uint256)[],bytes)\":{\"notice\":\"Queries a swap operation involving multiple paths (steps), specifying exact input token amounts.\"},\"querySwapExactOut((address,(address,address,bool)[],uint256,uint256)[],bytes)\":{\"notice\":\"Queries a swap operation involving multiple paths (steps), specifying exact output token amounts.\"},\"swapExactIn((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)\":{\"notice\":\"Executes a swap operation involving multiple paths (steps), specifying exact input token amounts.\"},\"swapExactOut((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)\":{\"notice\":\"Executes a swap operation involving multiple paths (steps), specifying exact output token amounts.\"}},\"notice\":\"Interface for the `BatchRouter`, supporting multi-hop swaps.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IBatchRouter.sol\":\"IBatchRouter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452\",\"dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IBatchRouter.sol\":{\"keccak256\":\"0xfe6e412bac4a3caf93ababddf0d927a73b8e83fa17cb233fc28c1cd495142a8e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7f6c9a4c513ef09ac57500fb2950af1e6977de949a659fd22a6c60855b5f7d1f\",\"dweb:/ipfs/QmV7stUf7aP92NQxaMSqBontGuvwzPGeHmB9hgjfh9L6vT\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3\",\"dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf\",\"dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323\",\"dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct IBatchRouter.SwapPathExactAmountIn[]","name":"paths","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"struct IBatchRouter.SwapPathStep[]","name":"steps","type":"tuple[]","components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"bool","name":"isBuffer","type":"bool"}]},{"internalType":"uint256","name":"exactAmountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}]},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"querySwapExactIn","outputs":[{"internalType":"uint256[]","name":"pathAmountsOut","type":"uint256[]"},{"internalType":"address[]","name":"tokensOut","type":"address[]"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}]},{"inputs":[{"internalType":"struct IBatchRouter.SwapPathExactAmountOut[]","name":"paths","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"struct IBatchRouter.SwapPathStep[]","name":"steps","type":"tuple[]","components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"bool","name":"isBuffer","type":"bool"}]},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"},{"internalType":"uint256","name":"exactAmountOut","type":"uint256"}]},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"querySwapExactOut","outputs":[{"internalType":"uint256[]","name":"pathAmountsIn","type":"uint256[]"},{"internalType":"address[]","name":"tokensIn","type":"address[]"},{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"}]},{"inputs":[{"internalType":"struct IBatchRouter.SwapPathExactAmountIn[]","name":"paths","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"struct IBatchRouter.SwapPathStep[]","name":"steps","type":"tuple[]","components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"bool","name":"isBuffer","type":"bool"}]},{"internalType":"uint256","name":"exactAmountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"}]},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"swapExactIn","outputs":[{"internalType":"uint256[]","name":"pathAmountsOut","type":"uint256[]"},{"internalType":"address[]","name":"tokensOut","type":"address[]"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}]},{"inputs":[{"internalType":"struct IBatchRouter.SwapPathExactAmountOut[]","name":"paths","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"struct IBatchRouter.SwapPathStep[]","name":"steps","type":"tuple[]","components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"bool","name":"isBuffer","type":"bool"}]},{"internalType":"uint256","name":"maxAmountIn","type":"uint256"},{"internalType":"uint256","name":"exactAmountOut","type":"uint256"}]},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"swapExactOut","outputs":[{"internalType":"uint256[]","name":"pathAmountsIn","type":"uint256[]"},{"internalType":"address[]","name":"tokensIn","type":"address[]"},{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"}]}],"devdoc":{"kind":"dev","methods":{"querySwapExactIn((address,(address,address,bool)[],uint256,uint256)[],bytes)":{"details":"Min amounts out specified in the paths are ignored.","params":{"paths":"Swap paths from token in to token out, specifying exact amounts in","userData":"Additional (optional) data required for the query"},"returns":{"amountsOut":"Calculated amounts of output tokens to be received, ordered by output token address","pathAmountsOut":"Calculated amounts of output tokens corresponding to the last step of each given path","tokensOut":"Output token addresses"}},"querySwapExactOut((address,(address,address,bool)[],uint256,uint256)[],bytes)":{"details":"Max amounts in specified in the paths are ignored.","params":{"paths":"Swap paths from token in to token out, specifying exact amounts out","userData":"Additional (optional) data required for the query"},"returns":{"amountsIn":"Calculated amounts of input tokens to be received, ordered by input token address","pathAmountsIn":"Calculated amounts of input tokens corresponding to the last step of each given path","tokensIn":"Input token addresses"}},"swapExactIn((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)":{"params":{"deadline":"Deadline for the swap, after which it will revert","paths":"Swap paths from token in to token out, specifying exact amounts in","userData":"Additional (optional) data required for the swap","wethIsEth":"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH"},"returns":{"amountsOut":"Calculated amounts of output tokens, ordered by output token address","pathAmountsOut":"Calculated amounts of output tokens corresponding to the last step of each given path","tokensOut":"Output token addresses"}},"swapExactOut((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)":{"params":{"deadline":"Deadline for the swap","paths":"Swap paths from token in to token out, specifying exact amounts out","userData":"Additional (optional) data required for the swap","wethIsEth":"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH"},"returns":{"amountsIn":"Calculated amounts of input tokens, ordered by input token address","pathAmountsIn":"Calculated amounts of input tokens corresponding to the first step of each given path","tokensIn":"Input token addresses"}}},"version":1},"userdoc":{"kind":"user","methods":{"querySwapExactIn((address,(address,address,bool)[],uint256,uint256)[],bytes)":{"notice":"Queries a swap operation involving multiple paths (steps), specifying exact input token amounts."},"querySwapExactOut((address,(address,address,bool)[],uint256,uint256)[],bytes)":{"notice":"Queries a swap operation involving multiple paths (steps), specifying exact output token amounts."},"swapExactIn((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)":{"notice":"Executes a swap operation involving multiple paths (steps), specifying exact input token amounts."},"swapExactOut((address,(address,address,bool)[],uint256,uint256)[],uint256,bool,bytes)":{"notice":"Executes a swap operation involving multiple paths (steps), specifying exact output token amounts."}},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IBatchRouter.sol":"IBatchRouter"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"keccak256":"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906","urls":["bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452","dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IBatchRouter.sol":{"keccak256":"0xfe6e412bac4a3caf93ababddf0d927a73b8e83fa17cb233fc28c1cd495142a8e","urls":["bzz-raw://7f6c9a4c513ef09ac57500fb2950af1e6977de949a659fd22a6c60855b5f7d1f","dweb:/ipfs/QmV7stUf7aP92NQxaMSqBontGuvwzPGeHmB9hgjfh9L6vT"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol":{"keccak256":"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3","urls":["bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3","dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf"],"license":"GPL-3.0-or-later"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06","urls":["bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf","dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"],"license":"MIT"}},"version":1},"id":24}