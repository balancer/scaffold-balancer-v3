{"abi":[{"type":"function","name":"addLiquidityProportionalToERC4626Pool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"maxUnderlyingAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"exactBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"wethIsEth","type":"bool","internalType":"bool"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"underlyingAmountsIn","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"payable"},{"type":"function","name":"addLiquidityUnbalancedNestedPool","inputs":[{"name":"parentPool","type":"address","internalType":"address"},{"name":"tokensIn","type":"address[]","internalType":"address[]"},{"name":"exactAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"minBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"bptAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"addLiquidityUnbalancedToERC4626Pool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"exactUnderlyingAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"minBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"wethIsEth","type":"bool","internalType":"bool"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"bptAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"queryAddLiquidityProportionalToERC4626Pool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"exactBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"underlyingAmountsIn","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"queryAddLiquidityUnbalancedNestedPool","inputs":[{"name":"parentPool","type":"address","internalType":"address"},{"name":"tokensIn","type":"address[]","internalType":"address[]"},{"name":"exactAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"bptAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"queryAddLiquidityUnbalancedToERC4626Pool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"exactUnderlyingAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"bptAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"queryRemoveLiquidityProportionalFromERC4626Pool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"exactBptAmountIn","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"underlyingAmountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"queryRemoveLiquidityProportionalNestedPool","inputs":[{"name":"parentPool","type":"address","internalType":"address"},{"name":"exactBptAmountIn","type":"uint256","internalType":"uint256"},{"name":"tokensOut","type":"address[]","internalType":"address[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"removeLiquidityProportionalFromERC4626Pool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"exactBptAmountIn","type":"uint256","internalType":"uint256"},{"name":"minUnderlyingAmountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"wethIsEth","type":"bool","internalType":"bool"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"underlyingAmountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"payable"},{"type":"function","name":"removeLiquidityProportionalNestedPool","inputs":[{"name":"parentPool","type":"address","internalType":"address"},{"name":"exactBptAmountIn","type":"uint256","internalType":"uint256"},{"name":"tokensOut","type":"address[]","internalType":"address[]"},{"name":"minAmountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"amountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"error","name":"WrongTokensOut","inputs":[{"name":"expectedTokensOut","type":"address[]","internalType":"address[]"},{"name":"tokensOut","type":"address[]","internalType":"address[]"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addLiquidityProportionalToERC4626Pool(address,uint256[],uint256,bool,bytes)":"560561d0","addLiquidityUnbalancedNestedPool(address,address[],uint256[],uint256,bytes)":"dd55a294","addLiquidityUnbalancedToERC4626Pool(address,uint256[],uint256,bool,bytes)":"98f3b18c","queryAddLiquidityProportionalToERC4626Pool(address,uint256,bytes)":"ff0353c8","queryAddLiquidityUnbalancedNestedPool(address,address[],uint256[],bytes)":"e1323013","queryAddLiquidityUnbalancedToERC4626Pool(address,uint256[],bytes)":"8c4ec19e","queryRemoveLiquidityProportionalFromERC4626Pool(address,uint256,bytes)":"50965993","queryRemoveLiquidityProportionalNestedPool(address,uint256,address[],bytes)":"5aaeaac5","removeLiquidityProportionalFromERC4626Pool(address,uint256,uint256[],bool,bytes)":"38947f0b","removeLiquidityProportionalNestedPool(address,uint256,address[],uint256[],bytes)":"cb25ee65"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"expectedTokensOut\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensOut\",\"type\":\"address[]\"}],\"name\":\"WrongTokensOut\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxUnderlyingAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"addLiquidityProportionalToERC4626Pool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"addLiquidityUnbalancedNestedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"exactUnderlyingAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"addLiquidityUnbalancedToERC4626Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryAddLiquidityProportionalToERC4626Pool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryAddLiquidityUnbalancedNestedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"exactUnderlyingAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryAddLiquidityUnbalancedToERC4626Pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryRemoveLiquidityProportionalFromERC4626Pool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"queryRemoveLiquidityProportionalNestedPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minUnderlyingAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"wethIsEth\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"removeLiquidityProportionalFromERC4626Pool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"removeLiquidityProportionalNestedPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allow interacting with ERC4626 Pools (which contain wrapped ERC4626 tokens) using only underlying standard tokens. For instance, with `addLiquidityUnbalancedToERC4626Pool` it is possible to add liquidity to an ERC4626 Pool with [waDAI, waUSDC], using only DAI, only USDC, or an arbitrary amount of both. If the ERC4626 buffers in the Vault have liquidity, these will be used to avoid wrapping/unwrapping through the wrapped token interface, saving gas. For instance, adding only DAI to the pool above (and assuming an aDAI buffer with enough liquidity), would pull in the DAI from the user, swap it for waDAI in the internal Vault buffer, and deposit the waDAI into the ERC4626 pool: 1) without having to do any expensive ERC4626 wrapping operations; and 2) without requiring the user to construct a batch operation containing the buffer swap.\",\"kind\":\"dev\",\"methods\":{\"addLiquidityProportionalToERC4626Pool(address,uint256[],uint256,bool,bytes)\":{\"details\":\"An \\\"ERC4626 pool\\\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\",\"params\":{\"exactBptAmountOut\":\"Exact amount of pool tokens to be received\",\"maxUnderlyingAmountsIn\":\"Maximum amounts of underlying tokens in, sorted in token registration order of wrapped tokens in the pool\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data required for adding liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"underlyingAmountsIn\":\"Actual amounts of tokens added, sorted in token registration order of wrapped tokens in the pool\"}},\"addLiquidityUnbalancedNestedPool(address,address[],uint256[],uint256,bytes)\":{\"details\":\"A nested pool is one in which one or more tokens are BPTs from another pool (child pool). Since there are multiple pools involved, the token order is not given, so the user must specify the preferred order to inform the token in amounts.\",\"params\":{\"exactAmountsIn\":\"Amount of each underlying token in, sorted according to tokensIn array\",\"minBptAmountOut\":\"Expected minimum amount of parent pool tokens to receive\",\"parentPool\":\"Address of the highest level pool (which contains BPTs of other pools)\",\"tokensIn\":\"Input token addresses, sorted by user preference. `tokensIn` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool).\",\"userData\":\"Additional (optional) data required for the operation\"},\"returns\":{\"bptAmountOut\":\"Expected amount of parent pool tokens to receive\"}},\"addLiquidityUnbalancedToERC4626Pool(address,uint256[],uint256,bool,bytes)\":{\"details\":\"An \\\"ERC4626 pool\\\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\",\"params\":{\"exactUnderlyingAmountsIn\":\"Exact amounts of underlying tokens in, sorted in token registration order of wrapped tokens in the pool\",\"minBptAmountOut\":\"Minimum amount of pool tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data required for adding liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"bptAmountOut\":\"Actual amount of pool tokens received\"}},\"queryAddLiquidityProportionalToERC4626Pool(address,uint256,bytes)\":{\"details\":\"An \\\"ERC4626 pool\\\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\",\"params\":{\"exactBptAmountOut\":\"Exact amount of pool tokens to be received\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data required for the query\"},\"returns\":{\"underlyingAmountsIn\":\"Expected amounts of tokens to add, sorted in token registration order of wrapped tokens in the pool\"}},\"queryAddLiquidityUnbalancedNestedPool(address,address[],uint256[],bytes)\":{\"params\":{\"exactAmountsIn\":\"Amount of each underlying token in, sorted according to tokensIn array\",\"parentPool\":\"Address of the highest level pool (which contains BPTs of other pools)\",\"tokensIn\":\"Input token addresses, sorted by user preference. `tokensIn` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool).\",\"userData\":\"Additional (optional) data required for the operation\"},\"returns\":{\"bptAmountOut\":\"Expected amount of parent pool tokens to receive\"}},\"queryAddLiquidityUnbalancedToERC4626Pool(address,uint256[],bytes)\":{\"details\":\"An \\\"ERC4626 pool\\\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\",\"params\":{\"exactUnderlyingAmountsIn\":\"Exact amounts of underlying tokens in, sorted in token registration order of wrapped tokens in the pool\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data required for the query\"},\"returns\":{\"bptAmountOut\":\"Expected amount of pool tokens to receive\"}},\"queryRemoveLiquidityProportionalFromERC4626Pool(address,uint256,bytes)\":{\"details\":\"An \\\"ERC4626 pool\\\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\",\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided for the query\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data required for the query\"},\"returns\":{\"underlyingAmountsOut\":\"Expected amounts of tokens to receive, sorted in token registration order of wrapped tokens in the pool\"}},\"queryRemoveLiquidityProportionalNestedPool(address,uint256,address[],bytes)\":{\"params\":{\"exactBptAmountIn\":\"Exact amount of `parentPool` tokens provided\",\"parentPool\":\"Address of the highest level pool (which contains BPTs of other pools)\",\"tokensOut\":\"Output token addresses, sorted by user preference. `tokensOut` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool). If not all tokens are informed, balances are not settled and the operation reverts. Tokens that repeat must be informed only once.\",\"userData\":\"Additional (optional) data required for the operation\"},\"returns\":{\"amountsOut\":\"Actual amounts of tokens received, parallel to `tokensOut`\"}},\"removeLiquidityProportionalFromERC4626Pool(address,uint256,uint256[],bool,bytes)\":{\"details\":\"An \\\"ERC4626 pool\\\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\",\"params\":{\"exactBptAmountIn\":\"Exact amount of pool tokens provided\",\"minUnderlyingAmountsOut\":\"Minimum amounts of underlying tokens out, sorted in token registration order of wrapped tokens in the pool\",\"pool\":\"Address of the liquidity pool\",\"userData\":\"Additional (optional) data required for removing liquidity\",\"wethIsEth\":\"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\"},\"returns\":{\"underlyingAmountsOut\":\"Actual amounts of tokens received, sorted in token registration order of wrapped tokens in the pool\"}},\"removeLiquidityProportionalNestedPool(address,uint256,address[],uint256[],bytes)\":{\"details\":\"A nested pool is one in which one or more tokens are BPTs from another pool (child pool). Since there are multiple pools involved, the token order is not given, so the user must specify the preferred order to inform the token out amounts.\",\"params\":{\"exactBptAmountIn\":\"Exact amount of `parentPool` tokens provided\",\"minAmountsOut\":\"Minimum amounts of each outgoing underlying token, sorted according to tokensIn array\",\"parentPool\":\"Address of the highest level pool (which contains BPTs of other pools)\",\"tokensOut\":\"Output token addresses, sorted by user preference. `tokensOut` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool). If not all tokens are informed, balances are not settled and the operation reverts. Tokens that repeat must be informed only once.\",\"userData\":\"Additional (optional) data required for the operation\"},\"returns\":{\"amountsOut\":\"Actual amounts of tokens received, parallel to `tokensOut`\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"WrongTokensOut(address[],address[])\":[{\"notice\":\"`tokensOut` array does not have all the tokens from `expectedTokensOut`.\"}]},\"kind\":\"user\",\"methods\":{\"addLiquidityProportionalToERC4626Pool(address,uint256[],uint256,bool,bytes)\":{\"notice\":\"Add proportional amounts of underlying tokens to an ERC4626 pool through the buffer.\"},\"addLiquidityUnbalancedNestedPool(address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Adds liquidity unbalanced to a nested pool.\"},\"addLiquidityUnbalancedToERC4626Pool(address,uint256[],uint256,bool,bytes)\":{\"notice\":\"Add arbitrary amounts of underlying tokens to an ERC4626 pool through the buffer.\"},\"queryAddLiquidityProportionalToERC4626Pool(address,uint256,bytes)\":{\"notice\":\"Queries an `addLiquidityProportionalToERC4626Pool` operation without actually executing it.\"},\"queryAddLiquidityUnbalancedNestedPool(address,address[],uint256[],bytes)\":{\"notice\":\"Queries an `addLiquidityUnbalancedNestedPool` operation without actually executing it.\"},\"queryAddLiquidityUnbalancedToERC4626Pool(address,uint256[],bytes)\":{\"notice\":\"Queries an `addLiquidityUnbalancedToERC4626Pool` operation without actually executing it.\"},\"queryRemoveLiquidityProportionalFromERC4626Pool(address,uint256,bytes)\":{\"notice\":\"Queries a `removeLiquidityProportionalFromERC4626Pool` operation without actually executing it.\"},\"queryRemoveLiquidityProportionalNestedPool(address,uint256,address[],bytes)\":{\"notice\":\"Queries an `removeLiquidityProportionalNestedPool` operation without actually executing it.\"},\"removeLiquidityProportionalFromERC4626Pool(address,uint256,uint256[],bool,bytes)\":{\"notice\":\"Remove proportional amounts of underlying from an ERC4626 pool, burning an exact pool token amount.\"},\"removeLiquidityProportionalNestedPool(address,uint256,address[],uint256[],bytes)\":{\"notice\":\"Removes liquidity of a nested pool.\"}},\"notice\":\"The composite liquidity router supports add/remove liquidity operations on ERC4626 and nested pools.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/ICompositeLiquidityRouter.sol\":\"ICompositeLiquidityRouter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452\",\"dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/ICompositeLiquidityRouter.sol\":{\"keccak256\":\"0x2192e042122d2013a4bd53241dff389b53347f5684c1a502ab32a66995ef13ab\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://99914692473ff897dae5a13db4fc14bffc91b949cf655c07b27b2575eea718e1\",\"dweb:/ipfs/QmfVV1dFeey2nmXYjpvqJxaE4sLwmkayC66BGHDq5zsNiu\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3\",\"dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf\",\"dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323\",\"dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address[]","name":"expectedTokensOut","type":"address[]"},{"internalType":"address[]","name":"tokensOut","type":"address[]"}],"type":"error","name":"WrongTokensOut"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"maxUnderlyingAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"exactBptAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"addLiquidityProportionalToERC4626Pool","outputs":[{"internalType":"uint256[]","name":"underlyingAmountsIn","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"parentPool","type":"address"},{"internalType":"address[]","name":"tokensIn","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"addLiquidityUnbalancedNestedPool","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"exactUnderlyingAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"addLiquidityUnbalancedToERC4626Pool","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"queryAddLiquidityProportionalToERC4626Pool","outputs":[{"internalType":"uint256[]","name":"underlyingAmountsIn","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"parentPool","type":"address"},{"internalType":"address[]","name":"tokensIn","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"queryAddLiquidityUnbalancedNestedPool","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256[]","name":"exactUnderlyingAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"queryAddLiquidityUnbalancedToERC4626Pool","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"queryRemoveLiquidityProportionalFromERC4626Pool","outputs":[{"internalType":"uint256[]","name":"underlyingAmountsOut","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"parentPool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"address[]","name":"tokensOut","type":"address[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"queryRemoveLiquidityProportionalNestedPool","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minUnderlyingAmountsOut","type":"uint256[]"},{"internalType":"bool","name":"wethIsEth","type":"bool"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"payable","type":"function","name":"removeLiquidityProportionalFromERC4626Pool","outputs":[{"internalType":"uint256[]","name":"underlyingAmountsOut","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"parentPool","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"},{"internalType":"address[]","name":"tokensOut","type":"address[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"removeLiquidityProportionalNestedPool","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}]}],"devdoc":{"kind":"dev","methods":{"addLiquidityProportionalToERC4626Pool(address,uint256[],uint256,bool,bytes)":{"details":"An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).","params":{"exactBptAmountOut":"Exact amount of pool tokens to be received","maxUnderlyingAmountsIn":"Maximum amounts of underlying tokens in, sorted in token registration order of wrapped tokens in the pool","pool":"Address of the liquidity pool","userData":"Additional (optional) data required for adding liquidity","wethIsEth":"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH"},"returns":{"underlyingAmountsIn":"Actual amounts of tokens added, sorted in token registration order of wrapped tokens in the pool"}},"addLiquidityUnbalancedNestedPool(address,address[],uint256[],uint256,bytes)":{"details":"A nested pool is one in which one or more tokens are BPTs from another pool (child pool). Since there are multiple pools involved, the token order is not given, so the user must specify the preferred order to inform the token in amounts.","params":{"exactAmountsIn":"Amount of each underlying token in, sorted according to tokensIn array","minBptAmountOut":"Expected minimum amount of parent pool tokens to receive","parentPool":"Address of the highest level pool (which contains BPTs of other pools)","tokensIn":"Input token addresses, sorted by user preference. `tokensIn` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool).","userData":"Additional (optional) data required for the operation"},"returns":{"bptAmountOut":"Expected amount of parent pool tokens to receive"}},"addLiquidityUnbalancedToERC4626Pool(address,uint256[],uint256,bool,bytes)":{"details":"An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).","params":{"exactUnderlyingAmountsIn":"Exact amounts of underlying tokens in, sorted in token registration order of wrapped tokens in the pool","minBptAmountOut":"Minimum amount of pool tokens to be received","pool":"Address of the liquidity pool","userData":"Additional (optional) data required for adding liquidity","wethIsEth":"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH"},"returns":{"bptAmountOut":"Actual amount of pool tokens received"}},"queryAddLiquidityProportionalToERC4626Pool(address,uint256,bytes)":{"details":"An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).","params":{"exactBptAmountOut":"Exact amount of pool tokens to be received","pool":"Address of the liquidity pool","userData":"Additional (optional) data required for the query"},"returns":{"underlyingAmountsIn":"Expected amounts of tokens to add, sorted in token registration order of wrapped tokens in the pool"}},"queryAddLiquidityUnbalancedNestedPool(address,address[],uint256[],bytes)":{"params":{"exactAmountsIn":"Amount of each underlying token in, sorted according to tokensIn array","parentPool":"Address of the highest level pool (which contains BPTs of other pools)","tokensIn":"Input token addresses, sorted by user preference. `tokensIn` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool).","userData":"Additional (optional) data required for the operation"},"returns":{"bptAmountOut":"Expected amount of parent pool tokens to receive"}},"queryAddLiquidityUnbalancedToERC4626Pool(address,uint256[],bytes)":{"details":"An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).","params":{"exactUnderlyingAmountsIn":"Exact amounts of underlying tokens in, sorted in token registration order of wrapped tokens in the pool","pool":"Address of the liquidity pool","userData":"Additional (optional) data required for the query"},"returns":{"bptAmountOut":"Expected amount of pool tokens to receive"}},"queryRemoveLiquidityProportionalFromERC4626Pool(address,uint256,bytes)":{"details":"An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).","params":{"exactBptAmountIn":"Exact amount of pool tokens provided for the query","pool":"Address of the liquidity pool","userData":"Additional (optional) data required for the query"},"returns":{"underlyingAmountsOut":"Expected amounts of tokens to receive, sorted in token registration order of wrapped tokens in the pool"}},"queryRemoveLiquidityProportionalNestedPool(address,uint256,address[],bytes)":{"params":{"exactBptAmountIn":"Exact amount of `parentPool` tokens provided","parentPool":"Address of the highest level pool (which contains BPTs of other pools)","tokensOut":"Output token addresses, sorted by user preference. `tokensOut` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool). If not all tokens are informed, balances are not settled and the operation reverts. Tokens that repeat must be informed only once.","userData":"Additional (optional) data required for the operation"},"returns":{"amountsOut":"Actual amounts of tokens received, parallel to `tokensOut`"}},"removeLiquidityProportionalFromERC4626Pool(address,uint256,uint256[],bool,bytes)":{"details":"An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).","params":{"exactBptAmountIn":"Exact amount of pool tokens provided","minUnderlyingAmountsOut":"Minimum amounts of underlying tokens out, sorted in token registration order of wrapped tokens in the pool","pool":"Address of the liquidity pool","userData":"Additional (optional) data required for removing liquidity","wethIsEth":"If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH"},"returns":{"underlyingAmountsOut":"Actual amounts of tokens received, sorted in token registration order of wrapped tokens in the pool"}},"removeLiquidityProportionalNestedPool(address,uint256,address[],uint256[],bytes)":{"details":"A nested pool is one in which one or more tokens are BPTs from another pool (child pool). Since there are multiple pools involved, the token order is not given, so the user must specify the preferred order to inform the token out amounts.","params":{"exactBptAmountIn":"Exact amount of `parentPool` tokens provided","minAmountsOut":"Minimum amounts of each outgoing underlying token, sorted according to tokensIn array","parentPool":"Address of the highest level pool (which contains BPTs of other pools)","tokensOut":"Output token addresses, sorted by user preference. `tokensOut` array must have all tokens from child pools and all tokens that are not BPTs from the nested pool (parent pool). If not all tokens are informed, balances are not settled and the operation reverts. Tokens that repeat must be informed only once.","userData":"Additional (optional) data required for the operation"},"returns":{"amountsOut":"Actual amounts of tokens received, parallel to `tokensOut`"}}},"version":1},"userdoc":{"kind":"user","methods":{"addLiquidityProportionalToERC4626Pool(address,uint256[],uint256,bool,bytes)":{"notice":"Add proportional amounts of underlying tokens to an ERC4626 pool through the buffer."},"addLiquidityUnbalancedNestedPool(address,address[],uint256[],uint256,bytes)":{"notice":"Adds liquidity unbalanced to a nested pool."},"addLiquidityUnbalancedToERC4626Pool(address,uint256[],uint256,bool,bytes)":{"notice":"Add arbitrary amounts of underlying tokens to an ERC4626 pool through the buffer."},"queryAddLiquidityProportionalToERC4626Pool(address,uint256,bytes)":{"notice":"Queries an `addLiquidityProportionalToERC4626Pool` operation without actually executing it."},"queryAddLiquidityUnbalancedNestedPool(address,address[],uint256[],bytes)":{"notice":"Queries an `addLiquidityUnbalancedNestedPool` operation without actually executing it."},"queryAddLiquidityUnbalancedToERC4626Pool(address,uint256[],bytes)":{"notice":"Queries an `addLiquidityUnbalancedToERC4626Pool` operation without actually executing it."},"queryRemoveLiquidityProportionalFromERC4626Pool(address,uint256,bytes)":{"notice":"Queries a `removeLiquidityProportionalFromERC4626Pool` operation without actually executing it."},"queryRemoveLiquidityProportionalNestedPool(address,uint256,address[],bytes)":{"notice":"Queries an `removeLiquidityProportionalNestedPool` operation without actually executing it."},"removeLiquidityProportionalFromERC4626Pool(address,uint256,uint256[],bool,bytes)":{"notice":"Remove proportional amounts of underlying from an ERC4626 pool, burning an exact pool token amount."},"removeLiquidityProportionalNestedPool(address,uint256,address[],uint256[],bytes)":{"notice":"Removes liquidity of a nested pool."}},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/ICompositeLiquidityRouter.sol":"ICompositeLiquidityRouter"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"keccak256":"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906","urls":["bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452","dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/ICompositeLiquidityRouter.sol":{"keccak256":"0x2192e042122d2013a4bd53241dff389b53347f5684c1a502ab32a66995ef13ab","urls":["bzz-raw://99914692473ff897dae5a13db4fc14bffc91b949cf655c07b27b2575eea718e1","dweb:/ipfs/QmfVV1dFeey2nmXYjpvqJxaE4sLwmkayC66BGHDq5zsNiu"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol":{"keccak256":"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3","urls":["bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3","dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf"],"license":"GPL-3.0-or-later"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06","urls":["bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf","dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/ICompositeLiquidityRouter.sol","id":5308,"exportedSymbols":{"AddLiquidityKind":[8556],"ICompositeLiquidityRouter":[5307],"IERC20":[97896],"RemoveLiquidityKind":[8577],"SwapKind":[8484]},"nodeType":"SourceUnit","src":"46:11907:31","nodes":[{"id":5129,"nodeType":"PragmaDirective","src":"46:24:31","nodes":[],"literals":["solidity","^","0.8",".24"]},{"id":5131,"nodeType":"ImportDirective","src":"72:72:31","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":5308,"sourceUnit":97897,"symbolAliases":[{"foreign":{"id":5130,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97896,"src":"81:6:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":5135,"nodeType":"ImportDirective","src":"146:83:31","nodes":[],"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","nameLocation":"-1:-1:-1","scope":5308,"sourceUnit":8621,"symbolAliases":[{"foreign":{"id":5132,"name":"AddLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8556,"src":"155:16:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5133,"name":"RemoveLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8577,"src":"173:19:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":5134,"name":"SwapKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8484,"src":"194:8:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":5307,"nodeType":"ContractDefinition","src":"1241:10711:31","nodes":[{"id":5145,"nodeType":"ErrorDefinition","src":"1372:71:31","nodes":[],"documentation":{"id":5137,"nodeType":"StructuredDocumentation","src":"1283:84:31","text":"@notice `tokensOut` array does not have all the tokens from `expectedTokensOut`."},"errorSelector":"94ae280c","name":"WrongTokensOut","nameLocation":"1378:14:31","parameters":{"id":5144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5140,"mutability":"mutable","name":"expectedTokensOut","nameLocation":"1403:17:31","nodeType":"VariableDeclaration","scope":5145,"src":"1393:27:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5138,"name":"address","nodeType":"ElementaryTypeName","src":"1393:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5139,"nodeType":"ArrayTypeName","src":"1393:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5143,"mutability":"mutable","name":"tokensOut","nameLocation":"1432:9:31","nodeType":"VariableDeclaration","scope":5145,"src":"1422:19:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5141,"name":"address","nodeType":"ElementaryTypeName","src":"1422:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5142,"nodeType":"ArrayTypeName","src":"1422:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1392:50:31"}},{"id":5162,"nodeType":"FunctionDefinition","src":"2391:260:31","nodes":[],"documentation":{"id":5146,"nodeType":"StructuredDocumentation","src":"1661:725:31","text":" @notice Add arbitrary amounts of underlying tokens to an ERC4626 pool through the buffer.\n @dev An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\n @param pool Address of the liquidity pool\n @param exactUnderlyingAmountsIn Exact amounts of underlying tokens in, sorted in token registration order of\n wrapped tokens in the pool\n @param minBptAmountOut Minimum amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data required for adding liquidity\n @return bptAmountOut Actual amount of pool tokens received"},"functionSelector":"98f3b18c","implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityUnbalancedToERC4626Pool","nameLocation":"2400:35:31","parameters":{"id":5158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5148,"mutability":"mutable","name":"pool","nameLocation":"2453:4:31","nodeType":"VariableDeclaration","scope":5162,"src":"2445:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5147,"name":"address","nodeType":"ElementaryTypeName","src":"2445:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5151,"mutability":"mutable","name":"exactUnderlyingAmountsIn","nameLocation":"2484:24:31","nodeType":"VariableDeclaration","scope":5162,"src":"2467:41:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5149,"name":"uint256","nodeType":"ElementaryTypeName","src":"2467:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5150,"nodeType":"ArrayTypeName","src":"2467:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5153,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"2526:15:31","nodeType":"VariableDeclaration","scope":5162,"src":"2518:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5152,"name":"uint256","nodeType":"ElementaryTypeName","src":"2518:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5155,"mutability":"mutable","name":"wethIsEth","nameLocation":"2556:9:31","nodeType":"VariableDeclaration","scope":5162,"src":"2551:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5154,"name":"bool","nodeType":"ElementaryTypeName","src":"2551:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5157,"mutability":"mutable","name":"userData","nameLocation":"2588:8:31","nodeType":"VariableDeclaration","scope":5162,"src":"2575:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5156,"name":"bytes","nodeType":"ElementaryTypeName","src":"2575:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2435:167:31"},"returnParameters":{"id":5161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5160,"mutability":"mutable","name":"bptAmountOut","nameLocation":"2637:12:31","nodeType":"VariableDeclaration","scope":5162,"src":"2629:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5159,"name":"uint256","nodeType":"ElementaryTypeName","src":"2629:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2628:22:31"},"scope":5307,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":5180,"nodeType":"FunctionDefinition","src":"3463:278:31","nodes":[],"documentation":{"id":5163,"nodeType":"StructuredDocumentation","src":"2657:801:31","text":" @notice Add proportional amounts of underlying tokens to an ERC4626 pool through the buffer.\n @dev An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\n @param pool Address of the liquidity pool\n @param maxUnderlyingAmountsIn Maximum amounts of underlying tokens in, sorted in token registration order of\n wrapped tokens in the pool\n @param exactBptAmountOut Exact amount of pool tokens to be received\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data required for adding liquidity\n @return underlyingAmountsIn Actual amounts of tokens added, sorted in token registration order of wrapped tokens\n in the pool"},"functionSelector":"560561d0","implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityProportionalToERC4626Pool","nameLocation":"3472:37:31","parameters":{"id":5175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5165,"mutability":"mutable","name":"pool","nameLocation":"3527:4:31","nodeType":"VariableDeclaration","scope":5180,"src":"3519:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5164,"name":"address","nodeType":"ElementaryTypeName","src":"3519:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5168,"mutability":"mutable","name":"maxUnderlyingAmountsIn","nameLocation":"3558:22:31","nodeType":"VariableDeclaration","scope":5180,"src":"3541:39:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5166,"name":"uint256","nodeType":"ElementaryTypeName","src":"3541:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5167,"nodeType":"ArrayTypeName","src":"3541:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5170,"mutability":"mutable","name":"exactBptAmountOut","nameLocation":"3598:17:31","nodeType":"VariableDeclaration","scope":5180,"src":"3590:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5169,"name":"uint256","nodeType":"ElementaryTypeName","src":"3590:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5172,"mutability":"mutable","name":"wethIsEth","nameLocation":"3630:9:31","nodeType":"VariableDeclaration","scope":5180,"src":"3625:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5171,"name":"bool","nodeType":"ElementaryTypeName","src":"3625:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5174,"mutability":"mutable","name":"userData","nameLocation":"3662:8:31","nodeType":"VariableDeclaration","scope":5180,"src":"3649:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5173,"name":"bytes","nodeType":"ElementaryTypeName","src":"3649:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3509:167:31"},"returnParameters":{"id":5179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5178,"mutability":"mutable","name":"underlyingAmountsIn","nameLocation":"3720:19:31","nodeType":"VariableDeclaration","scope":5180,"src":"3703:36:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5176,"name":"uint256","nodeType":"ElementaryTypeName","src":"3703:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5177,"nodeType":"ArrayTypeName","src":"3703:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3702:38:31"},"scope":5307,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":5198,"nodeType":"FunctionDefinition","src":"4569:284:31","nodes":[],"documentation":{"id":5181,"nodeType":"StructuredDocumentation","src":"3747:817:31","text":" @notice Remove proportional amounts of underlying from an ERC4626 pool, burning an exact pool token amount.\n @dev An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided\n @param minUnderlyingAmountsOut Minimum amounts of underlying tokens out, sorted in token registration order of\n wrapped tokens in the pool\n @param wethIsEth If true, incoming ETH will be wrapped to WETH and outgoing WETH will be unwrapped to ETH\n @param userData Additional (optional) data required for removing liquidity\n @return underlyingAmountsOut Actual amounts of tokens received, sorted in token registration order of wrapped\n tokens in the pool"},"functionSelector":"38947f0b","implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityProportionalFromERC4626Pool","nameLocation":"4578:42:31","parameters":{"id":5193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5183,"mutability":"mutable","name":"pool","nameLocation":"4638:4:31","nodeType":"VariableDeclaration","scope":5198,"src":"4630:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5182,"name":"address","nodeType":"ElementaryTypeName","src":"4630:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5185,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"4660:16:31","nodeType":"VariableDeclaration","scope":5198,"src":"4652:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5184,"name":"uint256","nodeType":"ElementaryTypeName","src":"4652:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5188,"mutability":"mutable","name":"minUnderlyingAmountsOut","nameLocation":"4703:23:31","nodeType":"VariableDeclaration","scope":5198,"src":"4686:40:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5186,"name":"uint256","nodeType":"ElementaryTypeName","src":"4686:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5187,"nodeType":"ArrayTypeName","src":"4686:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5190,"mutability":"mutable","name":"wethIsEth","nameLocation":"4741:9:31","nodeType":"VariableDeclaration","scope":5198,"src":"4736:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5189,"name":"bool","nodeType":"ElementaryTypeName","src":"4736:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5192,"mutability":"mutable","name":"userData","nameLocation":"4773:8:31","nodeType":"VariableDeclaration","scope":5198,"src":"4760:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5191,"name":"bytes","nodeType":"ElementaryTypeName","src":"4760:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4620:167:31"},"returnParameters":{"id":5197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5196,"mutability":"mutable","name":"underlyingAmountsOut","nameLocation":"4831:20:31","nodeType":"VariableDeclaration","scope":5198,"src":"4814:37:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5194,"name":"uint256","nodeType":"ElementaryTypeName","src":"4814:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5195,"nodeType":"ArrayTypeName","src":"4814:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4813:39:31"},"scope":5307,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":5211,"nodeType":"FunctionDefinition","src":"5406:200:31","nodes":[],"documentation":{"id":5199,"nodeType":"StructuredDocumentation","src":"4859:542:31","text":" @notice Queries an `addLiquidityUnbalancedToERC4626Pool` operation without actually executing it.\n @dev An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\n @param pool Address of the liquidity pool\n @param exactUnderlyingAmountsIn Exact amounts of underlying tokens in, sorted in token registration order of\n wrapped tokens in the pool\n @param userData Additional (optional) data required for the query\n @return bptAmountOut Expected amount of pool tokens to receive"},"functionSelector":"8c4ec19e","implemented":false,"kind":"function","modifiers":[],"name":"queryAddLiquidityUnbalancedToERC4626Pool","nameLocation":"5415:40:31","parameters":{"id":5207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5201,"mutability":"mutable","name":"pool","nameLocation":"5473:4:31","nodeType":"VariableDeclaration","scope":5211,"src":"5465:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5200,"name":"address","nodeType":"ElementaryTypeName","src":"5465:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5204,"mutability":"mutable","name":"exactUnderlyingAmountsIn","nameLocation":"5504:24:31","nodeType":"VariableDeclaration","scope":5211,"src":"5487:41:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5202,"name":"uint256","nodeType":"ElementaryTypeName","src":"5487:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5203,"nodeType":"ArrayTypeName","src":"5487:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5206,"mutability":"mutable","name":"userData","nameLocation":"5551:8:31","nodeType":"VariableDeclaration","scope":5211,"src":"5538:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5205,"name":"bytes","nodeType":"ElementaryTypeName","src":"5538:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5455:110:31"},"returnParameters":{"id":5210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5209,"mutability":"mutable","name":"bptAmountOut","nameLocation":"5592:12:31","nodeType":"VariableDeclaration","scope":5211,"src":"5584:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5208,"name":"uint256","nodeType":"ElementaryTypeName","src":"5584:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5583:22:31"},"scope":5307,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":5224,"nodeType":"FunctionDefinition","src":"6158:202:31","nodes":[],"documentation":{"id":5212,"nodeType":"StructuredDocumentation","src":"5612:541:31","text":" @notice Queries an `addLiquidityProportionalToERC4626Pool` operation without actually executing it.\n @dev An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\n @param pool Address of the liquidity pool\n @param exactBptAmountOut Exact amount of pool tokens to be received\n @param userData Additional (optional) data required for the query\n @return underlyingAmountsIn Expected amounts of tokens to add, sorted in token registration order of wrapped\n tokens in the pool"},"functionSelector":"ff0353c8","implemented":false,"kind":"function","modifiers":[],"name":"queryAddLiquidityProportionalToERC4626Pool","nameLocation":"6167:42:31","parameters":{"id":5219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5214,"mutability":"mutable","name":"pool","nameLocation":"6227:4:31","nodeType":"VariableDeclaration","scope":5224,"src":"6219:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5213,"name":"address","nodeType":"ElementaryTypeName","src":"6219:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5216,"mutability":"mutable","name":"exactBptAmountOut","nameLocation":"6249:17:31","nodeType":"VariableDeclaration","scope":5224,"src":"6241:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5215,"name":"uint256","nodeType":"ElementaryTypeName","src":"6241:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5218,"mutability":"mutable","name":"userData","nameLocation":"6289:8:31","nodeType":"VariableDeclaration","scope":5224,"src":"6276:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5217,"name":"bytes","nodeType":"ElementaryTypeName","src":"6276:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6209:94:31"},"returnParameters":{"id":5223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5222,"mutability":"mutable","name":"underlyingAmountsIn","nameLocation":"6339:19:31","nodeType":"VariableDeclaration","scope":5224,"src":"6322:36:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5220,"name":"uint256","nodeType":"ElementaryTypeName","src":"6322:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5221,"nodeType":"ArrayTypeName","src":"6322:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6321:38:31"},"scope":5307,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":5237,"nodeType":"FunctionDefinition","src":"6928:207:31","nodes":[],"documentation":{"id":5225,"nodeType":"StructuredDocumentation","src":"6366:557:31","text":" @notice Queries a `removeLiquidityProportionalFromERC4626Pool` operation without actually executing it.\n @dev An \"ERC4626 pool\" contains IERC4626 yield-bearing tokens (e.g., waDAI).\n @param pool Address of the liquidity pool\n @param exactBptAmountIn Exact amount of pool tokens provided for the query\n @param userData Additional (optional) data required for the query\n @return underlyingAmountsOut Expected amounts of tokens to receive, sorted in token registration order of\n wrapped tokens in the pool"},"functionSelector":"50965993","implemented":false,"kind":"function","modifiers":[],"name":"queryRemoveLiquidityProportionalFromERC4626Pool","nameLocation":"6937:47:31","parameters":{"id":5232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5227,"mutability":"mutable","name":"pool","nameLocation":"7002:4:31","nodeType":"VariableDeclaration","scope":5237,"src":"6994:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5226,"name":"address","nodeType":"ElementaryTypeName","src":"6994:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5229,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"7024:16:31","nodeType":"VariableDeclaration","scope":5237,"src":"7016:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5228,"name":"uint256","nodeType":"ElementaryTypeName","src":"7016:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5231,"mutability":"mutable","name":"userData","nameLocation":"7063:8:31","nodeType":"VariableDeclaration","scope":5237,"src":"7050:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5230,"name":"bytes","nodeType":"ElementaryTypeName","src":"7050:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6984:93:31"},"returnParameters":{"id":5236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5235,"mutability":"mutable","name":"underlyingAmountsOut","nameLocation":"7113:20:31","nodeType":"VariableDeclaration","scope":5237,"src":"7096:37:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5233,"name":"uint256","nodeType":"ElementaryTypeName","src":"7096:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5234,"nodeType":"ArrayTypeName","src":"7096:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7095:39:31"},"scope":5307,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":5255,"nodeType":"FunctionDefinition","src":"8339:256:31","nodes":[],"documentation":{"id":5238,"nodeType":"StructuredDocumentation","src":"7352:982:31","text":" @notice Adds liquidity unbalanced to a nested pool.\n @dev A nested pool is one in which one or more tokens are BPTs from another pool (child pool). Since there are\n multiple pools involved, the token order is not given, so the user must specify the preferred order to inform\n the token in amounts.\n @param parentPool Address of the highest level pool (which contains BPTs of other pools)\n @param tokensIn Input token addresses, sorted by user preference. `tokensIn` array must have all tokens from\n child pools and all tokens that are not BPTs from the nested pool (parent pool).\n @param exactAmountsIn Amount of each underlying token in, sorted according to tokensIn array\n @param minBptAmountOut Expected minimum amount of parent pool tokens to receive\n @param userData Additional (optional) data required for the operation\n @return bptAmountOut Expected amount of parent pool tokens to receive"},"functionSelector":"dd55a294","implemented":false,"kind":"function","modifiers":[],"name":"addLiquidityUnbalancedNestedPool","nameLocation":"8348:32:31","parameters":{"id":5251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5240,"mutability":"mutable","name":"parentPool","nameLocation":"8398:10:31","nodeType":"VariableDeclaration","scope":5255,"src":"8390:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5239,"name":"address","nodeType":"ElementaryTypeName","src":"8390:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5243,"mutability":"mutable","name":"tokensIn","nameLocation":"8435:8:31","nodeType":"VariableDeclaration","scope":5255,"src":"8418:25:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5241,"name":"address","nodeType":"ElementaryTypeName","src":"8418:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5242,"nodeType":"ArrayTypeName","src":"8418:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5246,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"8470:14:31","nodeType":"VariableDeclaration","scope":5255,"src":"8453:31:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5244,"name":"uint256","nodeType":"ElementaryTypeName","src":"8453:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5245,"nodeType":"ArrayTypeName","src":"8453:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5248,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"8502:15:31","nodeType":"VariableDeclaration","scope":5255,"src":"8494:23:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5247,"name":"uint256","nodeType":"ElementaryTypeName","src":"8494:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5250,"mutability":"mutable","name":"userData","nameLocation":"8540:8:31","nodeType":"VariableDeclaration","scope":5255,"src":"8527:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5249,"name":"bytes","nodeType":"ElementaryTypeName","src":"8527:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8380:174:31"},"returnParameters":{"id":5254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5253,"mutability":"mutable","name":"bptAmountOut","nameLocation":"8581:12:31","nodeType":"VariableDeclaration","scope":5255,"src":"8573:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5252,"name":"uint256","nodeType":"ElementaryTypeName","src":"8573:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8572:22:31"},"scope":5307,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":5271,"nodeType":"FunctionDefinition","src":"9273:228:31","nodes":[],"documentation":{"id":5256,"nodeType":"StructuredDocumentation","src":"8601:667:31","text":" @notice Queries an `addLiquidityUnbalancedNestedPool` operation without actually executing it.\n @param parentPool Address of the highest level pool (which contains BPTs of other pools)\n @param tokensIn Input token addresses, sorted by user preference. `tokensIn` array must have all tokens from\n child pools and all tokens that are not BPTs from the nested pool (parent pool).\n @param exactAmountsIn Amount of each underlying token in, sorted according to tokensIn array\n @param userData Additional (optional) data required for the operation\n @return bptAmountOut Expected amount of parent pool tokens to receive"},"functionSelector":"e1323013","implemented":false,"kind":"function","modifiers":[],"name":"queryAddLiquidityUnbalancedNestedPool","nameLocation":"9282:37:31","parameters":{"id":5267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5258,"mutability":"mutable","name":"parentPool","nameLocation":"9337:10:31","nodeType":"VariableDeclaration","scope":5271,"src":"9329:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5257,"name":"address","nodeType":"ElementaryTypeName","src":"9329:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5261,"mutability":"mutable","name":"tokensIn","nameLocation":"9374:8:31","nodeType":"VariableDeclaration","scope":5271,"src":"9357:25:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5259,"name":"address","nodeType":"ElementaryTypeName","src":"9357:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5260,"nodeType":"ArrayTypeName","src":"9357:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5264,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"9409:14:31","nodeType":"VariableDeclaration","scope":5271,"src":"9392:31:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5262,"name":"uint256","nodeType":"ElementaryTypeName","src":"9392:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5263,"nodeType":"ArrayTypeName","src":"9392:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5266,"mutability":"mutable","name":"userData","nameLocation":"9446:8:31","nodeType":"VariableDeclaration","scope":5271,"src":"9433:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5265,"name":"bytes","nodeType":"ElementaryTypeName","src":"9433:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9319:141:31"},"returnParameters":{"id":5270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5269,"mutability":"mutable","name":"bptAmountOut","nameLocation":"9487:12:31","nodeType":"VariableDeclaration","scope":5271,"src":"9479:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5268,"name":"uint256","nodeType":"ElementaryTypeName","src":"9479:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9478:22:31"},"scope":5307,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":5290,"nodeType":"FunctionDefinition","src":"10639:269:31","nodes":[],"documentation":{"id":5272,"nodeType":"StructuredDocumentation","src":"9507:1127:31","text":" @notice Removes liquidity of a nested pool.\n @dev A nested pool is one in which one or more tokens are BPTs from another pool (child pool). Since there are\n multiple pools involved, the token order is not given, so the user must specify the preferred order to inform\n the token out amounts.\n @param parentPool Address of the highest level pool (which contains BPTs of other pools)\n @param exactBptAmountIn Exact amount of `parentPool` tokens provided\n @param tokensOut Output token addresses, sorted by user preference. `tokensOut` array must have all tokens from\n child pools and all tokens that are not BPTs from the nested pool (parent pool). If not all tokens are informed,\n balances are not settled and the operation reverts. Tokens that repeat must be informed only once.\n @param minAmountsOut Minimum amounts of each outgoing underlying token, sorted according to tokensIn array\n @param userData Additional (optional) data required for the operation\n @return amountsOut Actual amounts of tokens received, parallel to `tokensOut`"},"functionSelector":"cb25ee65","implemented":false,"kind":"function","modifiers":[],"name":"removeLiquidityProportionalNestedPool","nameLocation":"10648:37:31","parameters":{"id":5285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5274,"mutability":"mutable","name":"parentPool","nameLocation":"10703:10:31","nodeType":"VariableDeclaration","scope":5290,"src":"10695:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5273,"name":"address","nodeType":"ElementaryTypeName","src":"10695:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5276,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"10731:16:31","nodeType":"VariableDeclaration","scope":5290,"src":"10723:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5275,"name":"uint256","nodeType":"ElementaryTypeName","src":"10723:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5279,"mutability":"mutable","name":"tokensOut","nameLocation":"10774:9:31","nodeType":"VariableDeclaration","scope":5290,"src":"10757:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5277,"name":"address","nodeType":"ElementaryTypeName","src":"10757:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5278,"nodeType":"ArrayTypeName","src":"10757:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5282,"mutability":"mutable","name":"minAmountsOut","nameLocation":"10810:13:31","nodeType":"VariableDeclaration","scope":5290,"src":"10793:30:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5280,"name":"uint256","nodeType":"ElementaryTypeName","src":"10793:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5281,"nodeType":"ArrayTypeName","src":"10793:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5284,"mutability":"mutable","name":"userData","nameLocation":"10846:8:31","nodeType":"VariableDeclaration","scope":5290,"src":"10833:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5283,"name":"bytes","nodeType":"ElementaryTypeName","src":"10833:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10685:175:31"},"returnParameters":{"id":5289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5288,"mutability":"mutable","name":"amountsOut","nameLocation":"10896:10:31","nodeType":"VariableDeclaration","scope":5290,"src":"10879:27:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5286,"name":"uint256","nodeType":"ElementaryTypeName","src":"10879:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5287,"nodeType":"ArrayTypeName","src":"10879:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10878:29:31"},"scope":5307,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":5306,"nodeType":"FunctionDefinition","src":"11716:234:31","nodes":[],"documentation":{"id":5291,"nodeType":"StructuredDocumentation","src":"10914:797:31","text":" @notice Queries an `removeLiquidityProportionalNestedPool` operation without actually executing it.\n @param parentPool Address of the highest level pool (which contains BPTs of other pools)\n @param exactBptAmountIn Exact amount of `parentPool` tokens provided\n @param tokensOut Output token addresses, sorted by user preference. `tokensOut` array must have all tokens from\n child pools and all tokens that are not BPTs from the nested pool (parent pool). If not all tokens are informed,\n balances are not settled and the operation reverts. Tokens that repeat must be informed only once.\n @param userData Additional (optional) data required for the operation\n @return amountsOut Actual amounts of tokens received, parallel to `tokensOut`"},"functionSelector":"5aaeaac5","implemented":false,"kind":"function","modifiers":[],"name":"queryRemoveLiquidityProportionalNestedPool","nameLocation":"11725:42:31","parameters":{"id":5301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5293,"mutability":"mutable","name":"parentPool","nameLocation":"11785:10:31","nodeType":"VariableDeclaration","scope":5306,"src":"11777:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5292,"name":"address","nodeType":"ElementaryTypeName","src":"11777:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5295,"mutability":"mutable","name":"exactBptAmountIn","nameLocation":"11813:16:31","nodeType":"VariableDeclaration","scope":5306,"src":"11805:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5294,"name":"uint256","nodeType":"ElementaryTypeName","src":"11805:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5298,"mutability":"mutable","name":"tokensOut","nameLocation":"11856:9:31","nodeType":"VariableDeclaration","scope":5306,"src":"11839:26:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5296,"name":"address","nodeType":"ElementaryTypeName","src":"11839:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5297,"nodeType":"ArrayTypeName","src":"11839:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5300,"mutability":"mutable","name":"userData","nameLocation":"11888:8:31","nodeType":"VariableDeclaration","scope":5306,"src":"11875:21:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5299,"name":"bytes","nodeType":"ElementaryTypeName","src":"11875:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11767:135:31"},"returnParameters":{"id":5305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5304,"mutability":"mutable","name":"amountsOut","nameLocation":"11938:10:31","nodeType":"VariableDeclaration","scope":5306,"src":"11921:27:31","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5302,"name":"uint256","nodeType":"ElementaryTypeName","src":"11921:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5303,"nodeType":"ArrayTypeName","src":"11921:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"11920:29:31"},"scope":5307,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"ICompositeLiquidityRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":5136,"nodeType":"StructuredDocumentation","src":"231:1009:31","text":" @notice The composite liquidity router supports add/remove liquidity operations on ERC4626 and nested pools.\n @dev This contract allow interacting with ERC4626 Pools (which contain wrapped ERC4626 tokens) using only underlying\n standard tokens. For instance, with `addLiquidityUnbalancedToERC4626Pool` it is possible to add liquidity to an\n ERC4626 Pool with [waDAI, waUSDC], using only DAI, only USDC, or an arbitrary amount of both. If the ERC4626 buffers\n in the Vault have liquidity, these will be used to avoid wrapping/unwrapping through the wrapped token interface,\n saving gas.\n For instance, adding only DAI to the pool above (and assuming an aDAI buffer with enough liquidity), would pull in\n the DAI from the user, swap it for waDAI in the internal Vault buffer, and deposit the waDAI into the ERC4626 pool:\n 1) without having to do any expensive ERC4626 wrapping operations; and\n 2) without requiring the user to construct a batch operation containing the buffer swap."},"fullyImplemented":false,"linearizedBaseContracts":[5307],"name":"ICompositeLiquidityRouter","nameLocation":"1251:25:31","scope":5308,"usedErrors":[5145],"usedEvents":[]}],"license":"GPL-3.0-or-later"},"id":31}