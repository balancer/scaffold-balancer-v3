{"abi":[{"type":"function","name":"computeBalance","inputs":[{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"tokenInIndex","type":"uint256","internalType":"uint256"},{"name":"invariantRatio","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"newBalance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"computeInvariant","inputs":[{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"rounding","type":"uint8","internalType":"enum Rounding"}],"outputs":[{"name":"invariant","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMaximumInvariantRatio","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMaximumSwapFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMinimumInvariantRatio","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMinimumSwapFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getNormalizedWeights","inputs":[],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getWeightedPoolDynamicData","inputs":[],"outputs":[{"name":"data","type":"tuple","internalType":"struct WeightedPoolDynamicData","components":[{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"tokenRates","type":"uint256[]","internalType":"uint256[]"},{"name":"staticSwapFeePercentage","type":"uint256","internalType":"uint256"},{"name":"totalSupply","type":"uint256","internalType":"uint256"},{"name":"isPoolInitialized","type":"bool","internalType":"bool"},{"name":"isPoolPaused","type":"bool","internalType":"bool"},{"name":"isPoolInRecoveryMode","type":"bool","internalType":"bool"}]}],"stateMutability":"view"},{"type":"function","name":"getWeightedPoolImmutableData","inputs":[],"outputs":[{"name":"data","type":"tuple","internalType":"struct WeightedPoolImmutableData","components":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"decimalScalingFactors","type":"uint256[]","internalType":"uint256[]"},{"name":"normalizedWeights","type":"uint256[]","internalType":"uint256[]"}]}],"stateMutability":"view"},{"type":"function","name":"onSwap","inputs":[{"name":"params","type":"tuple","internalType":"struct PoolSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"amountGivenScaled18","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"indexIn","type":"uint256","internalType":"uint256"},{"name":"indexOut","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"amountCalculatedScaled18","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"computeBalance(uint256[],uint256,uint256)":"16a0b3e0","computeInvariant(uint256[],uint8)":"984de9e8","getMaximumInvariantRatio()":"273c1adf","getMaximumSwapFeePercentage()":"654cf15d","getMinimumInvariantRatio()":"b677fa56","getMinimumSwapFeePercentage()":"ce20ece7","getNormalizedWeights()":"f89f27ed","getWeightedPoolDynamicData()":"c0bc6f33","getWeightedPoolImmutableData()":"53b79bd7","onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))":"72c98186"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantRatio\",\"type\":\"uint256\"}],\"name\":\"computeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Rounding\",\"name\":\"rounding\",\"type\":\"uint8\"}],\"name\":\"computeInvariant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumInvariantRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumInvariantRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNormalizedWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeightedPoolDynamicData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct WeightedPoolDynamicData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeightedPoolImmutableData\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"normalizedWeights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct WeightedPoolImmutableData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeBalance(uint256[],uint256,uint256)\":{\"details\":\"Computes the new balance of a token after an operation, given the invariant growth ratio and all other balances. Similar to V2's `_getTokenBalanceGivenInvariantAndAllOtherBalances` in StableMath. The pool must round up for the Vault to round in the protocol's favor when calling this function.\",\"params\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\",\"invariantRatio\":\"The ratio of the new invariant (after an operation) to the old\",\"tokenInIndex\":\"The index of the token we're computing the balance for, sorted in token registration order\"},\"returns\":{\"newBalance\":\"The new balance of the selected token, after the operation\"}},\"computeInvariant(uint256[],uint8)\":{\"details\":\"This function computes the invariant based on current balances (and potentially other pool state). The rounding direction must be respected for the Vault to round in the pool's favor when calling this function. If the invariant computation involves no precision loss (e.g. simple sum of balances), the same result can be returned for both rounding directions.\",\"params\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\",\"rounding\":\"Rounding direction to consider when computing the invariant\"},\"returns\":{\"invariant\":\"The calculated invariant of the pool, represented as a uint256\"}},\"getMaximumInvariantRatio()\":{\"returns\":{\"_0\":\"maximumInvariantRatio The maximum invariant ratio for a pool during unbalanced add liquidity\"}},\"getMaximumSwapFeePercentage()\":{\"returns\":{\"_0\":\"maximumSwapFeePercentage The maximum swap fee percentage for a pool\"}},\"getMinimumInvariantRatio()\":{\"returns\":{\"_0\":\"minimumInvariantRatio The minimum invariant ratio for a pool during unbalanced remove liquidity\"}},\"getMinimumSwapFeePercentage()\":{\"returns\":{\"_0\":\"minimumSwapFeePercentage The minimum swap fee percentage for a pool\"}},\"getNormalizedWeights()\":{\"returns\":{\"_0\":\"The normalized weights, sorted in token registration order\"}},\"getWeightedPoolDynamicData()\":{\"returns\":{\"data\":\"A struct containing all dynamic weighted pool parameters\"}},\"getWeightedPoolImmutableData()\":{\"returns\":{\"data\":\"A struct containing all immutable weighted pool parameters\"}},\"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"params\":{\"params\":\"Swap parameters (see above for struct definition)\"},\"returns\":{\"amountCalculatedScaled18\":\"Calculated amount for the swap operation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeInvariant(uint256[],uint8)\":{\"notice\":\"Computes the pool's invariant.\"},\"getNormalizedWeights()\":{\"notice\":\"Get the normalized weights.\"},\"getWeightedPoolDynamicData()\":{\"notice\":\"Get dynamic pool data relevant to swap/add/remove calculations.\"},\"getWeightedPoolImmutableData()\":{\"notice\":\"Get immutable pool data relevant to swap/add/remove calculations.\"},\"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Execute a swap in the pool.\"}},\"notice\":\"Full Weighted pool interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-weighted/IWeightedPool.sol\":\"IWeightedPool\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-weighted/IWeightedPool.sol\":{\"keccak256\":\"0x2346e8910c430d49d8d5090d41f530203628ef2710f5c50156f31412bbb13a3d\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c1a80344011c191db928a49b90dbef7b6d8998cec2bfdc9b0f5870383427e1bc\",\"dweb:/ipfs/QmV5Pa74gryV8i3Lp3EiwD2JyH4yJv6gYDGcezEw2gAq5k\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452\",\"dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IBasePool.sol\":{\"keccak256\":\"0xef858279c090af39f444432a75cad248c47429a0ac1dc5e93997bd4a628cc1a6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c784f91edf7f34d3d827b4e93d1126546c8d4bee60a14cd80fcd219a2ae30fe5\",\"dweb:/ipfs/QmYYFun8MYfk6HKxsrkg2LYHCPGa7ZcAZPEatmHL7C5rtC\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/ISwapFeePercentageBounds.sol\":{\"keccak256\":\"0x566aae4dcbf852199e165378977e6e49009184790e1c9cfd8cd6ddd7b9cbc3d7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ce904a16c7fa36833b0e055ce8d7d15fba113b8990eab958d7f1f06faf8e7d3c\",\"dweb:/ipfs/QmRKEQaU7sKuw93Dcj4vtxVqexvEU5m5u6aQBZE8eMKQN8\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IUnbalancedLiquidityInvariantRatioBounds.sol\":{\"keccak256\":\"0xc31c0c3cefc3c8bfb7f57a8d53b030bcee5494fe3c8fd6b2749c00e0fb8da592\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9a88b239a1f9af02e0d3aa60eebab8842aced2605a92be6431cdf2ed5a337ba6\",\"dweb:/ipfs/QmdJnjg7KQQ2ieU29fuU5yjdq5BHHz59e9ts4PD2fMfVx1\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3\",\"dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf\",\"dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323\",\"dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256","name":"tokenInIndex","type":"uint256"},{"internalType":"uint256","name":"invariantRatio","type":"uint256"}],"stateMutability":"view","type":"function","name":"computeBalance","outputs":[{"internalType":"uint256","name":"newBalance","type":"uint256"}]},{"inputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"enum Rounding","name":"rounding","type":"uint8"}],"stateMutability":"view","type":"function","name":"computeInvariant","outputs":[{"internalType":"uint256","name":"invariant","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMaximumInvariantRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMaximumSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMinimumInvariantRatio","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMinimumSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNormalizedWeights","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getWeightedPoolDynamicData","outputs":[{"internalType":"struct WeightedPoolDynamicData","name":"data","type":"tuple","components":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"totalSupply","type":"uint256"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getWeightedPoolImmutableData","outputs":[{"internalType":"struct WeightedPoolImmutableData","name":"data","type":"tuple","components":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"normalizedWeights","type":"uint256[]"}]}]},{"inputs":[{"internalType":"struct PoolSwapParams","name":"params","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"onSwap","outputs":[{"internalType":"uint256","name":"amountCalculatedScaled18","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"computeBalance(uint256[],uint256,uint256)":{"details":"Computes the new balance of a token after an operation, given the invariant growth ratio and all other balances. Similar to V2's `_getTokenBalanceGivenInvariantAndAllOtherBalances` in StableMath. The pool must round up for the Vault to round in the protocol's favor when calling this function.","params":{"balancesLiveScaled18":"Token balances after paying yield fees, applying decimal scaling and rates","invariantRatio":"The ratio of the new invariant (after an operation) to the old","tokenInIndex":"The index of the token we're computing the balance for, sorted in token registration order"},"returns":{"newBalance":"The new balance of the selected token, after the operation"}},"computeInvariant(uint256[],uint8)":{"details":"This function computes the invariant based on current balances (and potentially other pool state). The rounding direction must be respected for the Vault to round in the pool's favor when calling this function. If the invariant computation involves no precision loss (e.g. simple sum of balances), the same result can be returned for both rounding directions.","params":{"balancesLiveScaled18":"Token balances after paying yield fees, applying decimal scaling and rates","rounding":"Rounding direction to consider when computing the invariant"},"returns":{"invariant":"The calculated invariant of the pool, represented as a uint256"}},"getMaximumInvariantRatio()":{"returns":{"_0":"maximumInvariantRatio The maximum invariant ratio for a pool during unbalanced add liquidity"}},"getMaximumSwapFeePercentage()":{"returns":{"_0":"maximumSwapFeePercentage The maximum swap fee percentage for a pool"}},"getMinimumInvariantRatio()":{"returns":{"_0":"minimumInvariantRatio The minimum invariant ratio for a pool during unbalanced remove liquidity"}},"getMinimumSwapFeePercentage()":{"returns":{"_0":"minimumSwapFeePercentage The minimum swap fee percentage for a pool"}},"getNormalizedWeights()":{"returns":{"_0":"The normalized weights, sorted in token registration order"}},"getWeightedPoolDynamicData()":{"returns":{"data":"A struct containing all dynamic weighted pool parameters"}},"getWeightedPoolImmutableData()":{"returns":{"data":"A struct containing all immutable weighted pool parameters"}},"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))":{"params":{"params":"Swap parameters (see above for struct definition)"},"returns":{"amountCalculatedScaled18":"Calculated amount for the swap operation"}}},"version":1},"userdoc":{"kind":"user","methods":{"computeInvariant(uint256[],uint8)":{"notice":"Computes the pool's invariant."},"getNormalizedWeights()":{"notice":"Get the normalized weights."},"getWeightedPoolDynamicData()":{"notice":"Get dynamic pool data relevant to swap/add/remove calculations."},"getWeightedPoolImmutableData()":{"notice":"Get immutable pool data relevant to swap/add/remove calculations."},"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))":{"notice":"Execute a swap in the pool."}},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-weighted/IWeightedPool.sol":"IWeightedPool"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-weighted/IWeightedPool.sol":{"keccak256":"0x2346e8910c430d49d8d5090d41f530203628ef2710f5c50156f31412bbb13a3d","urls":["bzz-raw://c1a80344011c191db928a49b90dbef7b6d8998cec2bfdc9b0f5870383427e1bc","dweb:/ipfs/QmV5Pa74gryV8i3Lp3EiwD2JyH4yJv6gYDGcezEw2gAq5k"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"keccak256":"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906","urls":["bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452","dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IBasePool.sol":{"keccak256":"0xef858279c090af39f444432a75cad248c47429a0ac1dc5e93997bd4a628cc1a6","urls":["bzz-raw://c784f91edf7f34d3d827b4e93d1126546c8d4bee60a14cd80fcd219a2ae30fe5","dweb:/ipfs/QmYYFun8MYfk6HKxsrkg2LYHCPGa7ZcAZPEatmHL7C5rtC"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/ISwapFeePercentageBounds.sol":{"keccak256":"0x566aae4dcbf852199e165378977e6e49009184790e1c9cfd8cd6ddd7b9cbc3d7","urls":["bzz-raw://ce904a16c7fa36833b0e055ce8d7d15fba113b8990eab958d7f1f06faf8e7d3c","dweb:/ipfs/QmRKEQaU7sKuw93Dcj4vtxVqexvEU5m5u6aQBZE8eMKQN8"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IUnbalancedLiquidityInvariantRatioBounds.sol":{"keccak256":"0xc31c0c3cefc3c8bfb7f57a8d53b030bcee5494fe3c8fd6b2749c00e0fb8da592","urls":["bzz-raw://9a88b239a1f9af02e0d3aa60eebab8842aced2605a92be6431cdf2ed5a337ba6","dweb:/ipfs/QmdJnjg7KQQ2ieU29fuU5yjdq5BHHz59e9ts4PD2fMfVx1"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol":{"keccak256":"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3","urls":["bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3","dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf"],"license":"GPL-3.0-or-later"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06","urls":["bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf","dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-weighted/IWeightedPool.sol","id":3578,"exportedSymbols":{"IBasePool":[3688],"IERC20":[52306],"IWeightedPool":[3577],"WeightedPoolDynamicData":[3552],"WeightedPoolImmutableData":[3534]},"nodeType":"SourceUnit","src":"46:2803:16","nodes":[{"id":3518,"nodeType":"PragmaDirective","src":"46:24:16","nodes":[],"literals":["solidity","^","0.8",".24"]},{"id":3520,"nodeType":"ImportDirective","src":"72:72:16","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":3578,"sourceUnit":52307,"symbolAliases":[{"foreign":{"id":3519,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52306,"src":"81:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":3522,"nodeType":"ImportDirective","src":"146:51:16","nodes":[],"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IBasePool.sol","file":"../vault/IBasePool.sol","nameLocation":"-1:-1:-1","scope":3578,"sourceUnit":3689,"symbolAliases":[{"foreign":{"id":3521,"name":"IBasePool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3688,"src":"155:9:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":3534,"nodeType":"StructDefinition","src":"502:127:16","nodes":[],"canonicalName":"WeightedPoolImmutableData","documentation":{"id":3523,"nodeType":"StructuredDocumentation","src":"199:302:16","text":" @notice Weighted Pool data that cannot change after deployment.\n @param tokens Pool tokens, sorted in pool registration order\n @param decimalScalingFactors Conversion factor used to adjust for token decimals for uniform precision in\n calculations. FP(1) for 18-decimal tokens\n @param"},"members":[{"constant":false,"id":3527,"mutability":"mutable","name":"tokens","nameLocation":"550:6:16","nodeType":"VariableDeclaration","scope":3534,"src":"541:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$52306_$dyn_storage_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":3525,"nodeType":"UserDefinedTypeName","pathNode":{"id":3524,"name":"IERC20","nameLocations":["541:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":52306,"src":"541:6:16"},"referencedDeclaration":52306,"src":"541:6:16","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$52306","typeString":"contract IERC20"}},"id":3526,"nodeType":"ArrayTypeName","src":"541:8:16","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$52306_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":3530,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"572:21:16","nodeType":"VariableDeclaration","scope":3534,"src":"562:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3528,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3529,"nodeType":"ArrayTypeName","src":"562:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3533,"mutability":"mutable","name":"normalizedWeights","nameLocation":"609:17:16","nodeType":"VariableDeclaration","scope":3534,"src":"599:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"599:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3532,"nodeType":"ArrayTypeName","src":"599:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"WeightedPoolImmutableData","nameLocation":"509:25:16","scope":3578,"visibility":"public"},{"id":3552,"nodeType":"StructDefinition","src":"1753:240:16","nodes":[],"canonicalName":"WeightedPoolDynamicData","documentation":{"id":3535,"nodeType":"StructuredDocumentation","src":"631:1121:16","text":" @notice Snapshot of current Weighted Pool data that can change.\n @dev Note that live balances will not necessarily be accurate if the pool is in Recovery Mode. Withdrawals\n in Recovery Mode do not make external calls (including those necessary for updating live balances), so if\n there are withdrawals, raw and live balances will be out of sync until Recovery Mode is disabled.\n @param balancesLiveScaled18 Token balances after paying yield fees, applying decimal scaling and rates\n @param tokenRates 18-decimal FP values for rate tokens (e.g., yield-bearing), or FP(1) for standard tokens\n @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage\n @param totalSupply The current total supply of the pool tokens (BPT)\n @param isPoolInitialized If false, the pool has not been seeded with initial liquidity, so operations will revert\n @param isPoolPaused If true, the pool is paused, and all non-recovery-mode state-changing operations will revert\n @param isPoolInRecoveryMode If true, Recovery Mode withdrawals are enabled, and live balances may be inaccurate"},"members":[{"constant":false,"id":3538,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"1800:20:16","nodeType":"VariableDeclaration","scope":3552,"src":"1790:30:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3536,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3537,"nodeType":"ArrayTypeName","src":"1790:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3541,"mutability":"mutable","name":"tokenRates","nameLocation":"1836:10:16","nodeType":"VariableDeclaration","scope":3552,"src":"1826:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3539,"name":"uint256","nodeType":"ElementaryTypeName","src":"1826:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3540,"nodeType":"ArrayTypeName","src":"1826:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3543,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"1860:23:16","nodeType":"VariableDeclaration","scope":3552,"src":"1852:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"1852:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"totalSupply","nameLocation":"1897:11:16","nodeType":"VariableDeclaration","scope":3552,"src":"1889:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3544,"name":"uint256","nodeType":"ElementaryTypeName","src":"1889:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"isPoolInitialized","nameLocation":"1919:17:16","nodeType":"VariableDeclaration","scope":3552,"src":"1914:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3546,"name":"bool","nodeType":"ElementaryTypeName","src":"1914:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3549,"mutability":"mutable","name":"isPoolPaused","nameLocation":"1947:12:16","nodeType":"VariableDeclaration","scope":3552,"src":"1942:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3548,"name":"bool","nodeType":"ElementaryTypeName","src":"1942:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3551,"mutability":"mutable","name":"isPoolInRecoveryMode","nameLocation":"1970:20:16","nodeType":"VariableDeclaration","scope":3552,"src":"1965:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3550,"name":"bool","nodeType":"ElementaryTypeName","src":"1965:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"WeightedPoolDynamicData","nameLocation":"1760:23:16","scope":3578,"visibility":"public"},{"id":3577,"nodeType":"ContractDefinition","src":"2037:811:16","nodes":[{"id":3562,"nodeType":"FunctionDefinition","src":"2213:73:16","nodes":[],"documentation":{"id":3556,"nodeType":"StructuredDocumentation","src":"2080:128:16","text":" @notice Get the normalized weights.\n @return The normalized weights, sorted in token registration order"},"functionSelector":"f89f27ed","implemented":false,"kind":"function","modifiers":[],"name":"getNormalizedWeights","nameLocation":"2222:20:16","parameters":{"id":3557,"nodeType":"ParameterList","parameters":[],"src":"2242:2:16"},"returnParameters":{"id":3561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3562,"src":"2268:16:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"2268:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3559,"nodeType":"ArrayTypeName","src":"2268:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2267:18:16"},"scope":3577,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3569,"nodeType":"FunctionDefinition","src":"2464:98:16","nodes":[],"documentation":{"id":3563,"nodeType":"StructuredDocumentation","src":"2292:167:16","text":" @notice Get dynamic pool data relevant to swap/add/remove calculations.\n @return data A struct containing all dynamic weighted pool parameters"},"functionSelector":"c0bc6f33","implemented":false,"kind":"function","modifiers":[],"name":"getWeightedPoolDynamicData","nameLocation":"2473:26:16","parameters":{"id":3564,"nodeType":"ParameterList","parameters":[],"src":"2499:2:16"},"returnParameters":{"id":3568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3567,"mutability":"mutable","name":"data","nameLocation":"2556:4:16","nodeType":"VariableDeclaration","scope":3569,"src":"2525:35:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedPoolDynamicData_$3552_memory_ptr","typeString":"struct WeightedPoolDynamicData"},"typeName":{"id":3566,"nodeType":"UserDefinedTypeName","pathNode":{"id":3565,"name":"WeightedPoolDynamicData","nameLocations":["2525:23:16"],"nodeType":"IdentifierPath","referencedDeclaration":3552,"src":"2525:23:16"},"referencedDeclaration":3552,"src":"2525:23:16","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedPoolDynamicData_$3552_storage_ptr","typeString":"struct WeightedPoolDynamicData"}},"visibility":"internal"}],"src":"2524:37:16"},"scope":3577,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3576,"nodeType":"FunctionDefinition","src":"2744:102:16","nodes":[],"documentation":{"id":3570,"nodeType":"StructuredDocumentation","src":"2568:171:16","text":" @notice Get immutable pool data relevant to swap/add/remove calculations.\n @return data A struct containing all immutable weighted pool parameters"},"functionSelector":"53b79bd7","implemented":false,"kind":"function","modifiers":[],"name":"getWeightedPoolImmutableData","nameLocation":"2753:28:16","parameters":{"id":3571,"nodeType":"ParameterList","parameters":[],"src":"2781:2:16"},"returnParameters":{"id":3575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3574,"mutability":"mutable","name":"data","nameLocation":"2840:4:16","nodeType":"VariableDeclaration","scope":3576,"src":"2807:37:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedPoolImmutableData_$3534_memory_ptr","typeString":"struct WeightedPoolImmutableData"},"typeName":{"id":3573,"nodeType":"UserDefinedTypeName","pathNode":{"id":3572,"name":"WeightedPoolImmutableData","nameLocations":["2807:25:16"],"nodeType":"IdentifierPath","referencedDeclaration":3534,"src":"2807:25:16"},"referencedDeclaration":3534,"src":"2807:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_WeightedPoolImmutableData_$3534_storage_ptr","typeString":"struct WeightedPoolImmutableData"}},"visibility":"internal"}],"src":"2806:39:16"},"scope":3577,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":3554,"name":"IBasePool","nameLocations":["2064:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":3688,"src":"2064:9:16"},"id":3555,"nodeType":"InheritanceSpecifier","src":"2064:9:16"}],"canonicalName":"IWeightedPool","contractDependencies":[],"contractKind":"interface","documentation":{"id":3553,"nodeType":"StructuredDocumentation","src":"1995:42:16","text":"@notice Full Weighted pool interface."},"fullyImplemented":false,"linearizedBaseContracts":[3577,3688,4991,4975],"name":"IWeightedPool","nameLocation":"2047:13:16","scope":3578,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0-or-later"},"id":16}