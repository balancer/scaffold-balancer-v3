{"abi":[{"type":"function","name":"getHookFlags","inputs":[],"outputs":[{"name":"hookFlags","type":"tuple","internalType":"struct HookFlags","components":[{"name":"enableHookAdjustedAmounts","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallComputeDynamicSwapFee","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"}]}],"stateMutability":"view"},{"type":"function","name":"onAfterAddLiquidity","inputs":[{"name":"router","type":"address","internalType":"address"},{"name":"pool","type":"address","internalType":"address"},{"name":"kind","type":"uint8","internalType":"enum AddLiquidityKind"},{"name":"amountsInScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"amountsInRaw","type":"uint256[]","internalType":"uint256[]"},{"name":"bptAmountOut","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"hookAdjustedAmountsInRaw","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"onAfterInitialize","inputs":[{"name":"exactAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"bptAmountOut","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onAfterRemoveLiquidity","inputs":[{"name":"router","type":"address","internalType":"address"},{"name":"pool","type":"address","internalType":"address"},{"name":"kind","type":"uint8","internalType":"enum RemoveLiquidityKind"},{"name":"bptAmountIn","type":"uint256","internalType":"uint256"},{"name":"amountsOutScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"amountsOutRaw","type":"uint256[]","internalType":"uint256[]"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"hookAdjustedAmountsOutRaw","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"onAfterSwap","inputs":[{"name":"params","type":"tuple","internalType":"struct AfterSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"tokenIn","type":"address","internalType":"contract IERC20"},{"name":"tokenOut","type":"address","internalType":"contract IERC20"},{"name":"amountInScaled18","type":"uint256","internalType":"uint256"},{"name":"amountOutScaled18","type":"uint256","internalType":"uint256"},{"name":"tokenInBalanceScaled18","type":"uint256","internalType":"uint256"},{"name":"tokenOutBalanceScaled18","type":"uint256","internalType":"uint256"},{"name":"amountCalculatedScaled18","type":"uint256","internalType":"uint256"},{"name":"amountCalculatedRaw","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"pool","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"hookAdjustedAmountCalculatedRaw","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeAddLiquidity","inputs":[{"name":"router","type":"address","internalType":"address"},{"name":"pool","type":"address","internalType":"address"},{"name":"kind","type":"uint8","internalType":"enum AddLiquidityKind"},{"name":"maxAmountsInScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"minBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeInitialize","inputs":[{"name":"exactAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeRemoveLiquidity","inputs":[{"name":"router","type":"address","internalType":"address"},{"name":"pool","type":"address","internalType":"address"},{"name":"kind","type":"uint8","internalType":"enum RemoveLiquidityKind"},{"name":"maxBptAmountIn","type":"uint256","internalType":"uint256"},{"name":"minAmountsOutScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeSwap","inputs":[{"name":"params","type":"tuple","internalType":"struct PoolSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"amountGivenScaled18","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"indexIn","type":"uint256","internalType":"uint256"},{"name":"indexOut","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onComputeDynamicSwapFeePercentage","inputs":[{"name":"params","type":"tuple","internalType":"struct PoolSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"amountGivenScaled18","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"indexIn","type":"uint256","internalType":"uint256"},{"name":"indexOut","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"pool","type":"address","internalType":"address"},{"name":"staticSwapFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"dynamicSwapFeePercentage","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"onRegister","inputs":[{"name":"factory","type":"address","internalType":"address"},{"name":"pool","type":"address","internalType":"address"},{"name":"tokenConfig","type":"tuple[]","internalType":"struct TokenConfig[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"paysYieldFees","type":"bool","internalType":"bool"}]},{"name":"liquidityManagement","type":"tuple","internalType":"struct LiquidityManagement","components":[{"name":"disableUnbalancedLiquidity","type":"bool","internalType":"bool"},{"name":"enableAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"enableRemoveLiquidityCustom","type":"bool","internalType":"bool"},{"name":"enableDonation","type":"bool","internalType":"bool"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getHookFlags()":"d77153a7","onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":"976907cc","onAfterInitialize(uint256[],uint256,bytes)":"38be241d","onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":"2754888d","onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":"18b6eb55","onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":"45421ec7","onBeforeInitialize(uint256[],bytes)":"1c149e28","onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":"ba5f9f40","onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":"5211fa77","onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":"a0e8f5ac","onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":"0b89f182"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getHookFlags\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct HookFlags\",\"name\":\"hookFlags\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsInRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onAfterRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"hookAdjustedAmountsOutRaw\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AfterSwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onAfterSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hookAdjustedAmountCalculatedRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsInScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOutScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onBeforeRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"onBeforeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"onComputeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dynamicSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"onRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that they are called in the correct order, and with the correct arguments. To maintain this security, these functions should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`, then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)\",\"kind\":\"dev\",\"methods\":{\"getHookFlags()\":{\"details\":\"The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero). `onRegister` is the only \\\"mandatory\\\" hook.\",\"returns\":{\"hookFlags\":\"Flags indicating which hooks the contract supports\"}},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsInRaw\":\"Actual amounts of tokens added, sorted in token registration order\",\"amountsInScaled18\":\"Actual amounts of tokens added, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountOut\":\"Amount of pool tokens minted\",\"kind\":\"The type of add liquidity operation (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsInRaw\":\"New amountsInRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"details\":\"Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"bptAmountOut\":\"Amount of pool tokens minted during initialization\",\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"_0\":\"success True if the pool accepts the initialization results\"}},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsOutRaw\":\"Actual amount of tokens to receive, sorted in token registration order\",\"amountsOutScaled18\":\"Scaled amount of tokens to receive, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountIn\":\"Amount of pool tokens to burn\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"hookAdjustedAmountsOutRaw\":\"New amountsOutRaw, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"details\":\"Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see above for struct definition)\"},\"returns\":{\"hookAdjustedAmountCalculatedRaw\":\"New amount calculated, potentially modified by the hook\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The type of add liquidity operation (e.g., proportional, custom)\",\"maxAmountsInScaled18\":\"Maximum amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeInitialize(uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"_0\":\"success True if the pool wishes to proceed with initialization\"}},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"maxBptAmountIn\":\"Maximum amount of input pool tokens\",\"minAmountsOutScaled18\":\"Minimum output amounts, sorted in token registration order\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"details\":\"Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\"},\"returns\":{\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"details\":\"Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\",\"staticSwapFeePercentage\":\"18-decimal FP value of the static swap fee percentage, for reference\"},\"returns\":{\"dynamicSwapFeePercentage\":\"Value of the swap fee percentage, as an 18-decimal FP value\",\"success\":\"True if the pool wishes to proceed with settlement\"}},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"details\":\"Returns true if registration was successful, and false to revert the pool registration. Make sure this function is properly implemented (e.g. check the factory, and check that the given pool is from the factory). The Vault address will be msg.sender.\",\"params\":{\"factory\":\"Address of the pool factory (contract deploying the pool)\",\"liquidityManagement\":\"Liquidity management flags indicating which functions are enabled\",\"pool\":\"Address of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"},\"returns\":{\"_0\":\"success True if the hook allowed the registration, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHookFlags()\":{\"notice\":\"Return the set of hooks implemented by the contract.\"},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed after adding liquidity.\"},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"notice\":\"Hook to be executed after pool initialization.\"},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed after removing liquidity.\"},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"notice\":\"Called after a swap to perform further actions once the balances have been updated by the swap.\"},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed before adding liquidity.\"},\"onBeforeInitialize(uint256[],bytes)\":{\"notice\":\"Hook executed before pool initialization.\"},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed before removing liquidity.\"},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"notice\":\"Called before a swap to give the Pool an opportunity to perform actions.\"},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"notice\":\"Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\"},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"notice\":\"Hook executed when a pool is registered with a non-zero hooks contract.\"}},\"notice\":\"Interface for pool hooks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol\":\"IHooks\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452\",\"dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x90f77758dbdfdb952754aa3fbfbdf816afb9592b49a12932cf6636bb6dab6638\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bf3a76192ee4290f81c33dcc28889761087b0f3f5324bdf0c5487504a349df5f\",\"dweb:/ipfs/QmX5tH5yox4riErpQ43BEmc7L11C65ob53gRQ5VUBdNM3Y\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3\",\"dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf\",\"dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323\",\"dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"getHookFlags","outputs":[{"internalType":"struct HookFlags","name":"hookFlags","type":"tuple","components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}]}]},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"amountsInScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsInRaw","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onAfterAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsInRaw","type":"uint256[]"}]},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onAfterInitialize","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsOutRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onAfterRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256[]","name":"hookAdjustedAmountsOutRaw","type":"uint256[]"}]},{"inputs":[{"internalType":"struct AfterSwapParams","name":"params","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountInScaled18","type":"uint256"},{"internalType":"uint256","name":"amountOutScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenInBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenOutBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"onAfterSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"hookAdjustedAmountCalculatedRaw","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256[]","name":"maxAmountsInScaled18","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeAddLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeInitialize","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOutScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeRemoveLiquidity","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"struct PoolSwapParams","name":"params","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]},{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeSwap","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"struct PoolSwapParams","name":"params","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]},{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"}],"stateMutability":"view","type":"function","name":"onComputeDynamicSwapFeePercentage","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"uint256","name":"dynamicSwapFeePercentage","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"factory","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}]},{"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple","components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}]}],"stateMutability":"nonpayable","type":"function","name":"onRegister","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"getHookFlags()":{"details":"The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero). `onRegister` is the only \"mandatory\" hook.","returns":{"hookFlags":"Flags indicating which hooks the contract supports"}},"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":{"details":"Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"amountsInRaw":"Actual amounts of tokens added, sorted in token registration order","amountsInScaled18":"Actual amounts of tokens added, sorted in token registration order","balancesScaled18":"Current pool balances, sorted in token registration order","bptAmountOut":"Amount of pool tokens minted","kind":"The type of add liquidity operation (e.g., proportional, custom)","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated an add liquidity operation on the Vault","userData":"Additional (optional) data provided by the user"},"returns":{"hookAdjustedAmountsInRaw":"New amountsInRaw, potentially modified by the hook","success":"True if the pool wishes to proceed with settlement"}},"onAfterInitialize(uint256[],uint256,bytes)":{"details":"Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"bptAmountOut":"Amount of pool tokens minted during initialization","exactAmountsIn":"Exact amounts of input tokens","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"_0":"success True if the pool accepts the initialization results"}},"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":{"details":"Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"amountsOutRaw":"Actual amount of tokens to receive, sorted in token registration order","amountsOutScaled18":"Scaled amount of tokens to receive, sorted in token registration order","balancesScaled18":"Current pool balances, sorted in token registration order","bptAmountIn":"Amount of pool tokens to burn","kind":"The type of remove liquidity operation (e.g., proportional, custom)","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated a remove liquidity operation on the Vault","userData":"Additional (optional) data provided by the user"},"returns":{"hookAdjustedAmountsOutRaw":"New amountsOutRaw, potentially modified by the hook","success":"True if the pool wishes to proceed with settlement"}},"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":{"details":"Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"params":"Swap parameters (see above for struct definition)"},"returns":{"hookAdjustedAmountCalculatedRaw":"New amount calculated, potentially modified by the hook","success":"True if the pool wishes to proceed with settlement"}},"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":{"details":"Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"balancesScaled18":"Current pool balances, sorted in token registration order","kind":"The type of add liquidity operation (e.g., proportional, custom)","maxAmountsInScaled18":"Maximum amounts of input tokens","minBptAmountOut":"Minimum amount of output pool tokens","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated an add liquidity operation on the Vault","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"success":"True if the pool wishes to proceed with settlement"}},"onBeforeInitialize(uint256[],bytes)":{"details":"Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"exactAmountsIn":"Exact amounts of input tokens","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"_0":"success True if the pool wishes to proceed with initialization"}},"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":{"details":"Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"balancesScaled18":"Current pool balances, sorted in token registration order","kind":"The type of remove liquidity operation (e.g., proportional, custom)","maxBptAmountIn":"Maximum amount of input pool tokens","minAmountsOutScaled18":"Minimum output amounts, sorted in token registration order","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated a remove liquidity operation on the Vault","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"success":"True if the pool wishes to proceed with settlement"}},"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":{"details":"Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"params":"Swap parameters (see PoolSwapParams for struct definition)","pool":"Pool address, used to get pool information from the Vault (poolData, token config, etc.)"},"returns":{"success":"True if the pool wishes to proceed with settlement"}},"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":{"details":"Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"params":"Swap parameters (see PoolSwapParams for struct definition)","pool":"Pool address, used to get pool information from the Vault (poolData, token config, etc.)","staticSwapFeePercentage":"18-decimal FP value of the static swap fee percentage, for reference"},"returns":{"dynamicSwapFeePercentage":"Value of the swap fee percentage, as an 18-decimal FP value","success":"True if the pool wishes to proceed with settlement"}},"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":{"details":"Returns true if registration was successful, and false to revert the pool registration. Make sure this function is properly implemented (e.g. check the factory, and check that the given pool is from the factory). The Vault address will be msg.sender.","params":{"factory":"Address of the pool factory (contract deploying the pool)","liquidityManagement":"Liquidity management flags indicating which functions are enabled","pool":"Address of the pool","tokenConfig":"An array of descriptors for the tokens the pool will manage"},"returns":{"_0":"success True if the hook allowed the registration, false otherwise"}}},"version":1},"userdoc":{"kind":"user","methods":{"getHookFlags()":{"notice":"Return the set of hooks implemented by the contract."},"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":{"notice":"Hook to be executed after adding liquidity."},"onAfterInitialize(uint256[],uint256,bytes)":{"notice":"Hook to be executed after pool initialization."},"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":{"notice":"Hook to be executed after removing liquidity."},"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":{"notice":"Called after a swap to perform further actions once the balances have been updated by the swap."},"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":{"notice":"Hook to be executed before adding liquidity."},"onBeforeInitialize(uint256[],bytes)":{"notice":"Hook executed before pool initialization."},"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":{"notice":"Hook to be executed before removing liquidity."},"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":{"notice":"Called before a swap to give the Pool an opportunity to perform actions."},"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":{"notice":"Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees."},"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":{"notice":"Hook executed when a pool is registered with a non-zero hooks contract."}},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol":"IHooks"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"keccak256":"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906","urls":["bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452","dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol":{"keccak256":"0x90f77758dbdfdb952754aa3fbfbdf816afb9592b49a12932cf6636bb6dab6638","urls":["bzz-raw://bf3a76192ee4290f81c33dcc28889761087b0f3f5324bdf0c5487504a349df5f","dweb:/ipfs/QmX5tH5yox4riErpQ43BEmc7L11C65ob53gRQ5VUBdNM3Y"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol":{"keccak256":"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3","urls":["bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3","dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf"],"license":"GPL-3.0-or-later"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06","urls":["bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf","dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol","id":4088,"exportedSymbols":{"AddLiquidityKind":[6632],"AfterSwapParams":[6626],"HookFlags":[6452],"IHooks":[4087],"LiquidityManagement":[6405],"PoolSwapParams":[6597],"RemoveLiquidityKind":[6653],"SwapKind":[6560],"TokenConfig":[6519]},"nodeType":"SourceUnit","src":"46:13205:25","nodes":[{"id":3887,"nodeType":"PragmaDirective","src":"46:24:25","nodes":[],"literals":["solidity","^","0.8",".24"]},{"id":3896,"nodeType":"ImportDirective","src":"289:193:25","nodes":[],"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","nameLocation":"-1:-1:-1","scope":4088,"sourceUnit":6697,"symbolAliases":[{"foreign":{"id":3888,"name":"TokenConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6519,"src":"302:11:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3889,"name":"LiquidityManagement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6405,"src":"319:19:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3890,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6597,"src":"344:14:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3891,"name":"AfterSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6626,"src":"364:15:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3892,"name":"HookFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"385:9:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3893,"name":"AddLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6632,"src":"400:16:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3894,"name":"RemoveLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6653,"src":"422:19:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":3895,"name":"SwapKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6560,"src":"447:8:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":4087,"nodeType":"ContractDefinition","src":"975:12275:25","nodes":[{"id":3914,"nodeType":"FunctionDefinition","src":"1979:197:25","nodes":[],"documentation":{"id":3898,"nodeType":"StructuredDocumentation","src":"1205:769:25","text":" @notice Hook executed when a pool is registered with a non-zero hooks contract.\n @dev Returns true if registration was successful, and false to revert the pool registration.\n Make sure this function is properly implemented (e.g. check the factory, and check that the\n given pool is from the factory). The Vault address will be msg.sender.\n @param factory Address of the pool factory (contract deploying the pool)\n @param pool Address of the pool\n @param tokenConfig An array of descriptors for the tokens the pool will manage\n @param liquidityManagement Liquidity management flags indicating which functions are enabled\n @return success True if the hook allowed the registration, false otherwise"},"functionSelector":"0b89f182","implemented":false,"kind":"function","modifiers":[],"name":"onRegister","nameLocation":"1988:10:25","parameters":{"id":3910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3900,"mutability":"mutable","name":"factory","nameLocation":"2016:7:25","nodeType":"VariableDeclaration","scope":3914,"src":"2008:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3899,"name":"address","nodeType":"ElementaryTypeName","src":"2008:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3902,"mutability":"mutable","name":"pool","nameLocation":"2041:4:25","nodeType":"VariableDeclaration","scope":3914,"src":"2033:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3901,"name":"address","nodeType":"ElementaryTypeName","src":"2033:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3906,"mutability":"mutable","name":"tokenConfig","nameLocation":"2076:11:25","nodeType":"VariableDeclaration","scope":3914,"src":"2055:32:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$6519_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":3904,"nodeType":"UserDefinedTypeName","pathNode":{"id":3903,"name":"TokenConfig","nameLocations":["2055:11:25"],"nodeType":"IdentifierPath","referencedDeclaration":6519,"src":"2055:11:25"},"referencedDeclaration":6519,"src":"2055:11:25","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$6519_storage_ptr","typeString":"struct TokenConfig"}},"id":3905,"nodeType":"ArrayTypeName","src":"2055:13:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$6519_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":3909,"mutability":"mutable","name":"liquidityManagement","nameLocation":"2126:19:25","nodeType":"VariableDeclaration","scope":3914,"src":"2097:48:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$6405_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":3908,"nodeType":"UserDefinedTypeName","pathNode":{"id":3907,"name":"LiquidityManagement","nameLocations":["2097:19:25"],"nodeType":"IdentifierPath","referencedDeclaration":6405,"src":"2097:19:25"},"referencedDeclaration":6405,"src":"2097:19:25","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$6405_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"1998:153:25"},"returnParameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3914,"src":"2170:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3911,"name":"bool","nodeType":"ElementaryTypeName","src":"2170:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2169:6:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3921,"nodeType":"FunctionDefinition","src":"2599:75:25","nodes":[],"documentation":{"id":3915,"nodeType":"StructuredDocumentation","src":"2182:412:25","text":" @notice Return the set of hooks implemented by the contract.\n @dev The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined\n (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero).\n `onRegister` is the only \"mandatory\" hook.\n @return hookFlags Flags indicating which hooks the contract supports"},"functionSelector":"d77153a7","implemented":false,"kind":"function","modifiers":[],"name":"getHookFlags","nameLocation":"2608:12:25","parameters":{"id":3916,"nodeType":"ParameterList","parameters":[],"src":"2620:2:25"},"returnParameters":{"id":3920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3919,"mutability":"mutable","name":"hookFlags","nameLocation":"2663:9:25","nodeType":"VariableDeclaration","scope":3921,"src":"2646:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$6452_memory_ptr","typeString":"struct HookFlags"},"typeName":{"id":3918,"nodeType":"UserDefinedTypeName","pathNode":{"id":3917,"name":"HookFlags","nameLocations":["2646:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":6452,"src":"2646:9:25"},"referencedDeclaration":6452,"src":"2646:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$6452_storage_ptr","typeString":"struct HookFlags"}},"visibility":"internal"}],"src":"2645:28:25"},"scope":4087,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":3932,"nodeType":"FunctionDefinition","src":"3378:108:25","nodes":[],"documentation":{"id":3922,"nodeType":"StructuredDocumentation","src":"2889:484:25","text":" @notice Hook executed before pool initialization.\n @dev Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with initialization"},"functionSelector":"1c149e28","implemented":false,"kind":"function","modifiers":[],"name":"onBeforeInitialize","nameLocation":"3387:18:25","parameters":{"id":3928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3925,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"3423:14:25","nodeType":"VariableDeclaration","scope":3932,"src":"3406:31:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3923,"name":"uint256","nodeType":"ElementaryTypeName","src":"3406:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3924,"nodeType":"ArrayTypeName","src":"3406:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3927,"mutability":"mutable","name":"userData","nameLocation":"3452:8:25","nodeType":"VariableDeclaration","scope":3932,"src":"3439:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3926,"name":"bytes","nodeType":"ElementaryTypeName","src":"3439:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3405:56:25"},"returnParameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3932,"src":"3480:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3929,"name":"bool","nodeType":"ElementaryTypeName","src":"3480:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3479:6:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3945,"nodeType":"FunctionDefinition","src":"4060:159:25","nodes":[],"documentation":{"id":3933,"nodeType":"StructuredDocumentation","src":"3492:563:25","text":" @notice Hook to be executed after pool initialization.\n @dev Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param exactAmountsIn Exact amounts of input tokens\n @param bptAmountOut Amount of pool tokens minted during initialization\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool accepts the initialization results"},"functionSelector":"38be241d","implemented":false,"kind":"function","modifiers":[],"name":"onAfterInitialize","nameLocation":"4069:17:25","parameters":{"id":3941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"mutability":"mutable","name":"exactAmountsIn","nameLocation":"4113:14:25","nodeType":"VariableDeclaration","scope":3945,"src":"4096:31:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3934,"name":"uint256","nodeType":"ElementaryTypeName","src":"4096:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3935,"nodeType":"ArrayTypeName","src":"4096:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3938,"mutability":"mutable","name":"bptAmountOut","nameLocation":"4145:12:25","nodeType":"VariableDeclaration","scope":3945,"src":"4137:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"4137:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3940,"mutability":"mutable","name":"userData","nameLocation":"4180:8:25","nodeType":"VariableDeclaration","scope":3945,"src":"4167:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3939,"name":"bytes","nodeType":"ElementaryTypeName","src":"4167:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4086:108:25"},"returnParameters":{"id":3944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3945,"src":"4213:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3942,"name":"bool","nodeType":"ElementaryTypeName","src":"4213:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4212:6:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3968,"nodeType":"FunctionDefinition","src":"5398:299:25","nodes":[],"documentation":{"id":3946,"nodeType":"StructuredDocumentation","src":"4437:956:25","text":" @notice Hook to be executed before adding liquidity.\n @dev Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of add liquidity operation (e.g., proportional, custom)\n @param maxAmountsInScaled18 Maximum amounts of input tokens\n @param minBptAmountOut Minimum amount of output pool tokens\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"45421ec7","implemented":false,"kind":"function","modifiers":[],"name":"onBeforeAddLiquidity","nameLocation":"5407:20:25","parameters":{"id":3964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3948,"mutability":"mutable","name":"router","nameLocation":"5445:6:25","nodeType":"VariableDeclaration","scope":3968,"src":"5437:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3947,"name":"address","nodeType":"ElementaryTypeName","src":"5437:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"pool","nameLocation":"5469:4:25","nodeType":"VariableDeclaration","scope":3968,"src":"5461:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3949,"name":"address","nodeType":"ElementaryTypeName","src":"5461:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3953,"mutability":"mutable","name":"kind","nameLocation":"5500:4:25","nodeType":"VariableDeclaration","scope":3968,"src":"5483:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"},"typeName":{"id":3952,"nodeType":"UserDefinedTypeName","pathNode":{"id":3951,"name":"AddLiquidityKind","nameLocations":["5483:16:25"],"nodeType":"IdentifierPath","referencedDeclaration":6632,"src":"5483:16:25"},"referencedDeclaration":6632,"src":"5483:16:25","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":3956,"mutability":"mutable","name":"maxAmountsInScaled18","nameLocation":"5531:20:25","nodeType":"VariableDeclaration","scope":3968,"src":"5514:37:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3954,"name":"uint256","nodeType":"ElementaryTypeName","src":"5514:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3955,"nodeType":"ArrayTypeName","src":"5514:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3958,"mutability":"mutable","name":"minBptAmountOut","nameLocation":"5569:15:25","nodeType":"VariableDeclaration","scope":3968,"src":"5561:23:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3957,"name":"uint256","nodeType":"ElementaryTypeName","src":"5561:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3961,"mutability":"mutable","name":"balancesScaled18","nameLocation":"5611:16:25","nodeType":"VariableDeclaration","scope":3968,"src":"5594:33:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3959,"name":"uint256","nodeType":"ElementaryTypeName","src":"5594:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3960,"nodeType":"ArrayTypeName","src":"5594:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3963,"mutability":"mutable","name":"userData","nameLocation":"5650:8:25","nodeType":"VariableDeclaration","scope":3968,"src":"5637:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3962,"name":"bytes","nodeType":"ElementaryTypeName","src":"5637:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5427:237:25"},"returnParameters":{"id":3967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3966,"mutability":"mutable","name":"success","nameLocation":"5688:7:25","nodeType":"VariableDeclaration","scope":3968,"src":"5683:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3965,"name":"bool","nodeType":"ElementaryTypeName","src":"5683:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5682:14:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":3997,"nodeType":"FunctionDefinition","src":"6961:374:25","nodes":[],"documentation":{"id":3969,"nodeType":"StructuredDocumentation","src":"5703:1253:25","text":" @notice Hook to be executed after adding liquidity.\n @dev Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated an add liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of add liquidity operation (e.g., proportional, custom)\n @param amountsInScaled18 Actual amounts of tokens added, sorted in token registration order\n @param amountsInRaw Actual amounts of tokens added, sorted in token registration order\n @param bptAmountOut Amount of pool tokens minted\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsInRaw New amountsInRaw, potentially modified by the hook"},"functionSelector":"976907cc","implemented":false,"kind":"function","modifiers":[],"name":"onAfterAddLiquidity","nameLocation":"6970:19:25","parameters":{"id":3990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3971,"mutability":"mutable","name":"router","nameLocation":"7007:6:25","nodeType":"VariableDeclaration","scope":3997,"src":"6999:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3970,"name":"address","nodeType":"ElementaryTypeName","src":"6999:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3973,"mutability":"mutable","name":"pool","nameLocation":"7031:4:25","nodeType":"VariableDeclaration","scope":3997,"src":"7023:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3972,"name":"address","nodeType":"ElementaryTypeName","src":"7023:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3976,"mutability":"mutable","name":"kind","nameLocation":"7062:4:25","nodeType":"VariableDeclaration","scope":3997,"src":"7045:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"},"typeName":{"id":3975,"nodeType":"UserDefinedTypeName","pathNode":{"id":3974,"name":"AddLiquidityKind","nameLocations":["7045:16:25"],"nodeType":"IdentifierPath","referencedDeclaration":6632,"src":"7045:16:25"},"referencedDeclaration":6632,"src":"7045:16:25","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":3979,"mutability":"mutable","name":"amountsInScaled18","nameLocation":"7093:17:25","nodeType":"VariableDeclaration","scope":3997,"src":"7076:34:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3977,"name":"uint256","nodeType":"ElementaryTypeName","src":"7076:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3978,"nodeType":"ArrayTypeName","src":"7076:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"amountsInRaw","nameLocation":"7137:12:25","nodeType":"VariableDeclaration","scope":3997,"src":"7120:29:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3980,"name":"uint256","nodeType":"ElementaryTypeName","src":"7120:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3981,"nodeType":"ArrayTypeName","src":"7120:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3984,"mutability":"mutable","name":"bptAmountOut","nameLocation":"7167:12:25","nodeType":"VariableDeclaration","scope":3997,"src":"7159:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3983,"name":"uint256","nodeType":"ElementaryTypeName","src":"7159:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3987,"mutability":"mutable","name":"balancesScaled18","nameLocation":"7206:16:25","nodeType":"VariableDeclaration","scope":3997,"src":"7189:33:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3985,"name":"uint256","nodeType":"ElementaryTypeName","src":"7189:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3986,"nodeType":"ArrayTypeName","src":"7189:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":3989,"mutability":"mutable","name":"userData","nameLocation":"7245:8:25","nodeType":"VariableDeclaration","scope":3997,"src":"7232:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3988,"name":"bytes","nodeType":"ElementaryTypeName","src":"7232:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6989:270:25"},"returnParameters":{"id":3996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"success","nameLocation":"7283:7:25","nodeType":"VariableDeclaration","scope":3997,"src":"7278:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3991,"name":"bool","nodeType":"ElementaryTypeName","src":"7278:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3995,"mutability":"mutable","name":"hookAdjustedAmountsInRaw","nameLocation":"7309:24:25","nodeType":"VariableDeclaration","scope":3997,"src":"7292:41:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3993,"name":"uint256","nodeType":"ElementaryTypeName","src":"7292:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3994,"nodeType":"ArrayTypeName","src":"7292:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7277:57:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":4020,"nodeType":"FunctionDefinition","src":"8551:305:25","nodes":[],"documentation":{"id":3998,"nodeType":"StructuredDocumentation","src":"7554:992:25","text":" @notice Hook to be executed before removing liquidity.\n @dev Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param maxBptAmountIn Maximum amount of input pool tokens\n @param minAmountsOutScaled18 Minimum output amounts, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Optional, arbitrary data sent with the encoded request\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"ba5f9f40","implemented":false,"kind":"function","modifiers":[],"name":"onBeforeRemoveLiquidity","nameLocation":"8560:23:25","parameters":{"id":4016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4000,"mutability":"mutable","name":"router","nameLocation":"8601:6:25","nodeType":"VariableDeclaration","scope":4020,"src":"8593:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3999,"name":"address","nodeType":"ElementaryTypeName","src":"8593:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4002,"mutability":"mutable","name":"pool","nameLocation":"8625:4:25","nodeType":"VariableDeclaration","scope":4020,"src":"8617:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4001,"name":"address","nodeType":"ElementaryTypeName","src":"8617:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4005,"mutability":"mutable","name":"kind","nameLocation":"8659:4:25","nodeType":"VariableDeclaration","scope":4020,"src":"8639:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":4004,"nodeType":"UserDefinedTypeName","pathNode":{"id":4003,"name":"RemoveLiquidityKind","nameLocations":["8639:19:25"],"nodeType":"IdentifierPath","referencedDeclaration":6653,"src":"8639:19:25"},"referencedDeclaration":6653,"src":"8639:19:25","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":4007,"mutability":"mutable","name":"maxBptAmountIn","nameLocation":"8681:14:25","nodeType":"VariableDeclaration","scope":4020,"src":"8673:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4006,"name":"uint256","nodeType":"ElementaryTypeName","src":"8673:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4010,"mutability":"mutable","name":"minAmountsOutScaled18","nameLocation":"8722:21:25","nodeType":"VariableDeclaration","scope":4020,"src":"8705:38:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4008,"name":"uint256","nodeType":"ElementaryTypeName","src":"8705:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4009,"nodeType":"ArrayTypeName","src":"8705:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4013,"mutability":"mutable","name":"balancesScaled18","nameLocation":"8770:16:25","nodeType":"VariableDeclaration","scope":4020,"src":"8753:33:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"8753:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4012,"nodeType":"ArrayTypeName","src":"8753:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4015,"mutability":"mutable","name":"userData","nameLocation":"8809:8:25","nodeType":"VariableDeclaration","scope":4020,"src":"8796:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4014,"name":"bytes","nodeType":"ElementaryTypeName","src":"8796:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8583:240:25"},"returnParameters":{"id":4019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4018,"mutability":"mutable","name":"success","nameLocation":"8847:7:25","nodeType":"VariableDeclaration","scope":4020,"src":"8842:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4017,"name":"bool","nodeType":"ElementaryTypeName","src":"8842:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8841:14:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":4049,"nodeType":"FunctionDefinition","src":"10143:382:25","nodes":[],"documentation":{"id":4021,"nodeType":"StructuredDocumentation","src":"8862:1276:25","text":" @notice Hook to be executed after removing liquidity.\n @dev Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param router The address (usually a router contract) that initiated a remove liquidity operation on the Vault\n @param pool Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\n @param kind The type of remove liquidity operation (e.g., proportional, custom)\n @param bptAmountIn Amount of pool tokens to burn\n @param amountsOutScaled18 Scaled amount of tokens to receive, sorted in token registration order\n @param amountsOutRaw Actual amount of tokens to receive, sorted in token registration order\n @param balancesScaled18 Current pool balances, sorted in token registration order\n @param userData Additional (optional) data provided by the user\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountsOutRaw New amountsOutRaw, potentially modified by the hook"},"functionSelector":"2754888d","implemented":false,"kind":"function","modifiers":[],"name":"onAfterRemoveLiquidity","nameLocation":"10152:22:25","parameters":{"id":4042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4023,"mutability":"mutable","name":"router","nameLocation":"10192:6:25","nodeType":"VariableDeclaration","scope":4049,"src":"10184:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4022,"name":"address","nodeType":"ElementaryTypeName","src":"10184:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4025,"mutability":"mutable","name":"pool","nameLocation":"10216:4:25","nodeType":"VariableDeclaration","scope":4049,"src":"10208:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4024,"name":"address","nodeType":"ElementaryTypeName","src":"10208:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4028,"mutability":"mutable","name":"kind","nameLocation":"10250:4:25","nodeType":"VariableDeclaration","scope":4049,"src":"10230:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":4027,"nodeType":"UserDefinedTypeName","pathNode":{"id":4026,"name":"RemoveLiquidityKind","nameLocations":["10230:19:25"],"nodeType":"IdentifierPath","referencedDeclaration":6653,"src":"10230:19:25"},"referencedDeclaration":6653,"src":"10230:19:25","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":4030,"mutability":"mutable","name":"bptAmountIn","nameLocation":"10272:11:25","nodeType":"VariableDeclaration","scope":4049,"src":"10264:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4029,"name":"uint256","nodeType":"ElementaryTypeName","src":"10264:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4033,"mutability":"mutable","name":"amountsOutScaled18","nameLocation":"10310:18:25","nodeType":"VariableDeclaration","scope":4049,"src":"10293:35:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4031,"name":"uint256","nodeType":"ElementaryTypeName","src":"10293:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4032,"nodeType":"ArrayTypeName","src":"10293:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4036,"mutability":"mutable","name":"amountsOutRaw","nameLocation":"10355:13:25","nodeType":"VariableDeclaration","scope":4049,"src":"10338:30:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4034,"name":"uint256","nodeType":"ElementaryTypeName","src":"10338:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4035,"nodeType":"ArrayTypeName","src":"10338:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4039,"mutability":"mutable","name":"balancesScaled18","nameLocation":"10395:16:25","nodeType":"VariableDeclaration","scope":4049,"src":"10378:33:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"10378:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4038,"nodeType":"ArrayTypeName","src":"10378:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4041,"mutability":"mutable","name":"userData","nameLocation":"10434:8:25","nodeType":"VariableDeclaration","scope":4049,"src":"10421:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4040,"name":"bytes","nodeType":"ElementaryTypeName","src":"10421:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10174:274:25"},"returnParameters":{"id":4048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4044,"mutability":"mutable","name":"success","nameLocation":"10472:7:25","nodeType":"VariableDeclaration","scope":4049,"src":"10467:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4043,"name":"bool","nodeType":"ElementaryTypeName","src":"10467:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4047,"mutability":"mutable","name":"hookAdjustedAmountsOutRaw","nameLocation":"10498:25:25","nodeType":"VariableDeclaration","scope":4049,"src":"10481:42:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4045,"name":"uint256","nodeType":"ElementaryTypeName","src":"10481:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4046,"nodeType":"ArrayTypeName","src":"10481:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10466:58:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":4060,"nodeType":"FunctionDefinition","src":"11296:100:25","nodes":[],"documentation":{"id":4050,"nodeType":"StructuredDocumentation","src":"10735:556:25","text":" @notice Called before a swap to give the Pool an opportunity to perform actions.\n @dev Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the\n `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @return success True if the pool wishes to proceed with settlement"},"functionSelector":"5211fa77","implemented":false,"kind":"function","modifiers":[],"name":"onBeforeSwap","nameLocation":"11305:12:25","parameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"params","nameLocation":"11342:6:25","nodeType":"VariableDeclaration","scope":4060,"src":"11318:30:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":4052,"nodeType":"UserDefinedTypeName","pathNode":{"id":4051,"name":"PoolSwapParams","nameLocations":["11318:14:25"],"nodeType":"IdentifierPath","referencedDeclaration":6597,"src":"11318:14:25"},"referencedDeclaration":6597,"src":"11318:14:25","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":4055,"mutability":"mutable","name":"pool","nameLocation":"11358:4:25","nodeType":"VariableDeclaration","scope":4060,"src":"11350:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4054,"name":"address","nodeType":"ElementaryTypeName","src":"11350:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11317:46:25"},"returnParameters":{"id":4059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4058,"mutability":"mutable","name":"success","nameLocation":"11387:7:25","nodeType":"VariableDeclaration","scope":4060,"src":"11382:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4057,"name":"bool","nodeType":"ElementaryTypeName","src":"11382:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11381:14:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":4071,"nodeType":"FunctionDefinition","src":"12078:141:25","nodes":[],"documentation":{"id":4061,"nodeType":"StructuredDocumentation","src":"11402:671:25","text":" @notice Called after a swap to perform further actions once the balances have been updated by the swap.\n @dev Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore\n `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should\n use the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see above for struct definition)\n @return success True if the pool wishes to proceed with settlement\n @return hookAdjustedAmountCalculatedRaw New amount calculated, potentially modified by the hook"},"functionSelector":"18b6eb55","implemented":false,"kind":"function","modifiers":[],"name":"onAfterSwap","nameLocation":"12087:11:25","parameters":{"id":4065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4064,"mutability":"mutable","name":"params","nameLocation":"12133:6:25","nodeType":"VariableDeclaration","scope":4071,"src":"12108:31:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$6626_calldata_ptr","typeString":"struct AfterSwapParams"},"typeName":{"id":4063,"nodeType":"UserDefinedTypeName","pathNode":{"id":4062,"name":"AfterSwapParams","nameLocations":["12108:15:25"],"nodeType":"IdentifierPath","referencedDeclaration":6626,"src":"12108:15:25"},"referencedDeclaration":6626,"src":"12108:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$6626_storage_ptr","typeString":"struct AfterSwapParams"}},"visibility":"internal"}],"src":"12098:47:25"},"returnParameters":{"id":4070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4067,"mutability":"mutable","name":"success","nameLocation":"12169:7:25","nodeType":"VariableDeclaration","scope":4071,"src":"12164:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4066,"name":"bool","nodeType":"ElementaryTypeName","src":"12164:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4069,"mutability":"mutable","name":"hookAdjustedAmountCalculatedRaw","nameLocation":"12186:31:25","nodeType":"VariableDeclaration","scope":4071,"src":"12178:39:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4068,"name":"uint256","nodeType":"ElementaryTypeName","src":"12178:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12163:55:25"},"scope":4087,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":4086,"nodeType":"FunctionDefinition","src":"13025:223:25","nodes":[],"documentation":{"id":4072,"nodeType":"StructuredDocumentation","src":"12225:795:25","text":" @notice Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\n @dev Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use\n the `onlyVault` modifier to guarantee this is only called by the Vault.\n @param params Swap parameters (see PoolSwapParams for struct definition)\n @param pool Pool address, used to get pool information from the Vault (poolData, token config, etc.)\n @param staticSwapFeePercentage 18-decimal FP value of the static swap fee percentage, for reference\n @return success True if the pool wishes to proceed with settlement\n @return dynamicSwapFeePercentage Value of the swap fee percentage, as an 18-decimal FP value"},"functionSelector":"a0e8f5ac","implemented":false,"kind":"function","modifiers":[],"name":"onComputeDynamicSwapFeePercentage","nameLocation":"13034:33:25","parameters":{"id":4080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4075,"mutability":"mutable","name":"params","nameLocation":"13101:6:25","nodeType":"VariableDeclaration","scope":4086,"src":"13077:30:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":4074,"nodeType":"UserDefinedTypeName","pathNode":{"id":4073,"name":"PoolSwapParams","nameLocations":["13077:14:25"],"nodeType":"IdentifierPath","referencedDeclaration":6597,"src":"13077:14:25"},"referencedDeclaration":6597,"src":"13077:14:25","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":4077,"mutability":"mutable","name":"pool","nameLocation":"13125:4:25","nodeType":"VariableDeclaration","scope":4086,"src":"13117:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4076,"name":"address","nodeType":"ElementaryTypeName","src":"13117:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4079,"mutability":"mutable","name":"staticSwapFeePercentage","nameLocation":"13147:23:25","nodeType":"VariableDeclaration","scope":4086,"src":"13139:31:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4078,"name":"uint256","nodeType":"ElementaryTypeName","src":"13139:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13067:109:25"},"returnParameters":{"id":4085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4082,"mutability":"mutable","name":"success","nameLocation":"13205:7:25","nodeType":"VariableDeclaration","scope":4086,"src":"13200:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4081,"name":"bool","nodeType":"ElementaryTypeName","src":"13200:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4084,"mutability":"mutable","name":"dynamicSwapFeePercentage","nameLocation":"13222:24:25","nodeType":"VariableDeclaration","scope":4086,"src":"13214:32:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4083,"name":"uint256","nodeType":"ElementaryTypeName","src":"13214:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13199:48:25"},"scope":4087,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IHooks","contractDependencies":[],"contractKind":"interface","documentation":{"id":3897,"nodeType":"StructuredDocumentation","src":"484:490:25","text":" @notice Interface for pool hooks.\n @dev Hooks are functions invoked by the Vault at specific points in the flow of each operation. This guarantees that\n they are called in the correct order, and with the correct arguments. To maintain this security, these functions\n should only be called by the Vault. The recommended way to do this is to derive the hook contract from `BaseHooks`,\n then use the `onlyVault` modifier from `VaultGuard`. (See the examples in /pool-hooks.)"},"fullyImplemented":false,"linearizedBaseContracts":[4087],"name":"IHooks","nameLocation":"985:6:25","scope":4088,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0-or-later"},"id":25}