{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"areBuffersPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"balanceOf","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"collectAggregateFees","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"computeDynamicSwapFeePercentage","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"swapParams","type":"tuple","internalType":"struct PoolSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"amountGivenScaled18","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"indexIn","type":"uint256","internalType":"uint256"},{"name":"indexOut","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAggregateFeePercentages","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"aggregateSwapFeePercentage","type":"uint256","internalType":"uint256"},{"name":"aggregateYieldFeePercentage","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAggregateSwapFeeAmount","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAggregateYieldFeeAmount","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAuthorizer","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getBptRate","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"rate","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBufferAsset","inputs":[{"name":"wrappedToken","type":"address","internalType":"contract IERC4626"}],"outputs":[{"name":"underlyingToken","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getBufferBalance","inputs":[{"name":"wrappedToken","type":"address","internalType":"contract IERC4626"}],"outputs":[{"name":"underlyingBalanceRaw","type":"uint256","internalType":"uint256"},{"name":"wrappedBalanceRaw","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBufferMinimumTotalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBufferOwnerShares","inputs":[{"name":"wrappedToken","type":"address","internalType":"contract IERC4626"},{"name":"liquidityOwner","type":"address","internalType":"address"}],"outputs":[{"name":"ownerShares","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBufferPeriodDuration","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"getBufferPeriodEndTime","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"getBufferTotalShares","inputs":[{"name":"wrappedToken","type":"address","internalType":"contract IERC4626"}],"outputs":[{"name":"bufferShares","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCurrentLiveBalances","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getHooksConfig","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct HooksConfig","components":[{"name":"enableHookAdjustedAmounts","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallComputeDynamicSwapFee","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"hooksContract","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"getMaximumPoolTokens","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMinimumPoolTokens","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMinimumTradeAmount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMinimumWrapAmount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getNonzeroDeltaCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPauseWindowEndTime","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"getPoolConfig","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct PoolConfig","components":[{"name":"liquidityManagement","type":"tuple","internalType":"struct LiquidityManagement","components":[{"name":"disableUnbalancedLiquidity","type":"bool","internalType":"bool"},{"name":"enableAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"enableRemoveLiquidityCustom","type":"bool","internalType":"bool"},{"name":"enableDonation","type":"bool","internalType":"bool"}]},{"name":"staticSwapFeePercentage","type":"uint256","internalType":"uint256"},{"name":"aggregateSwapFeePercentage","type":"uint256","internalType":"uint256"},{"name":"aggregateYieldFeePercentage","type":"uint256","internalType":"uint256"},{"name":"tokenDecimalDiffs","type":"uint40","internalType":"uint40"},{"name":"pauseWindowEndTime","type":"uint32","internalType":"uint32"},{"name":"isPoolRegistered","type":"bool","internalType":"bool"},{"name":"isPoolInitialized","type":"bool","internalType":"bool"},{"name":"isPoolPaused","type":"bool","internalType":"bool"},{"name":"isPoolInRecoveryMode","type":"bool","internalType":"bool"}]}],"stateMutability":"view"},{"type":"function","name":"getPoolData","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct PoolData","components":[{"name":"poolConfigBits","type":"bytes32","internalType":"PoolConfigBits"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"tokenInfo","type":"tuple[]","internalType":"struct TokenInfo[]","components":[{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"paysYieldFees","type":"bool","internalType":"bool"}]},{"name":"balancesRaw","type":"uint256[]","internalType":"uint256[]"},{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"tokenRates","type":"uint256[]","internalType":"uint256[]"},{"name":"decimalScalingFactors","type":"uint256[]","internalType":"uint256[]"}]}],"stateMutability":"view"},{"type":"function","name":"getPoolMinimumTotalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolPausedState","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint32","internalType":"uint32"},{"name":"","type":"uint32","internalType":"uint32"},{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getPoolRoleAccounts","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct PoolRoleAccounts","components":[{"name":"pauseManager","type":"address","internalType":"address"},{"name":"swapFeeManager","type":"address","internalType":"address"},{"name":"poolCreator","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenCountAndIndexOfToken","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenInfo","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"tokenInfo","type":"tuple[]","internalType":"struct TokenInfo[]","components":[{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"paysYieldFees","type":"bool","internalType":"bool"}]},{"name":"balancesRaw","type":"uint256[]","internalType":"uint256[]"},{"name":"lastLiveBalances","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenRates","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"decimalScalingFactors","type":"uint256[]","internalType":"uint256[]"},{"name":"tokenRates","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokens","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"contract IERC20[]"}],"stateMutability":"view"},{"type":"function","name":"getProtocolFeeController","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getReservesOf","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getStaticSwapFeePercentage","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTokenDelta","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"int256","internalType":"int256"}],"stateMutability":"view"},{"type":"function","name":"getVault","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getVaultAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getVaultExtension","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getVaultPausedState","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint32","internalType":"uint32"},{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"isPoolInRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolInitialized","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolPaused","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolRegistered","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isQueryDisabled","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isUnlocked","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isVaultPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address,address)":"927da105","areBuffersPaused()":"55cba7fe","balanceOf(address,address)":"f7888aec","collectAggregateFees(address)":"8f4ab9ca","computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":"4d472bdd","getAggregateFeePercentages(address)":"295f0540","getAggregateSwapFeeAmount(address,address)":"85e0b999","getAggregateYieldFeeAmount(address,address)":"00fdfa13","getAuthorizer()":"aaabadc5","getBptRate(address)":"4f037ee7","getBufferAsset(address)":"0387587d","getBufferBalance(address)":"4021fe0f","getBufferMinimumTotalSupply()":"26a8a991","getBufferOwnerShares(address,address)":"9385e39a","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getBufferTotalShares(address)":"f2784e07","getCurrentLiveBalances(address)":"535cfd8a","getHooksConfig(address)":"ce8630d4","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getMinimumTradeAmount()":"e2cb0ba0","getMinimumWrapAmount()":"53956aa2","getNonzeroDeltaCount()":"db817187","getPauseWindowEndTime()":"8a8d123a","getPoolConfig(address)":"f29486a1","getPoolData(address)":"13d21cdf","getPoolMinimumTotalSupply()":"d0965a6b","getPoolPausedState(address)":"15e32046","getPoolRoleAccounts(address)":"e9ddeb26","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFeeController()":"85f2dbd4","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address)":"9e825ff5","getVault()":"8d928af8","getVaultAdmin()":"1ba0ae45","getVaultExtension()":"b9a8effa","getVaultPausedState()":"85c8c015","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isUnlocked()":"8380edb7","isVaultPaused()":"098401f5","totalSupply(address)":"e4dc2aa4"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areBuffersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"collectAggregateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"swapParams\",\"type\":\"tuple\"}],\"name\":\"computeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getAggregateFeePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateSwapFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getAggregateYieldFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBptRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingBalanceRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBalanceRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityOwner\",\"type\":\"address\"}],\"name\":\"getBufferOwnerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ownerShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"wrappedToken\",\"type\":\"address\"}],\"name\":\"getBufferTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bufferShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getHooksConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"hooksContract\",\"type\":\"address\"}],\"internalType\":\"struct HooksConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumWrapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"PoolConfigBits\",\"name\":\"poolConfigBits\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"}],\"internalType\":\"struct PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolMinimumTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolRoleAccounts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"}],\"internalType\":\"struct PoolRoleAccounts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastLiveBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"decimalScalingFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Since the Vault is split across three contracts using the Proxy pattern, there is not much on the Vault contract itself that can be called directly, especially since it is designed to primarily use a single entrypoint for liquidity operations, invoked through a Router. This is unhelpful for off-chain processes (e.g., Etherscan). The proxy contracts (`VaultExtension` and `VaultAdmin`) can only be delegate-called through the main Vault, so although the functions are visible off-chain, they cannot be called from Etherscan. The `VaultExplorer` performs the delegate calls, in order to expose the entire Vault interface in a user-friendly manner. It exposes all the \\\"getters,\\\" plus permissionless write operations (e.g., fee collection).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Address of the owner\",\"spender\":\"Address of the spender\",\"token\":\"Address of the token\"},\"returns\":{\"_0\":\"allowance Amount of tokens the spender is allowed to spend\"}},\"areBuffersPaused()\":{\"details\":\"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. This operation is reversible.\",\"returns\":{\"_0\":\"buffersPaused True if the Vault buffers are paused\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Address of the account\",\"token\":\"Address of the token\"},\"returns\":{\"_0\":\"balance Balance of the account for the token\"}},\"collectAggregateFees(address)\":{\"details\":\"Fees are sent to the ProtocolFeeController address.\",\"params\":{\"pool\":\"The pool on which all aggregate fees should be collected\"}},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"details\":\"Reverts if the hook doesn't return the success flag set to `true`.\",\"params\":{\"pool\":\"The pool\",\"swapParams\":\"The swap parameters used to compute the fee\"},\"returns\":{\"_0\":\"dynamicSwapFeePercentage The dynamic swap fee percentage\"}},\"getAggregateFeePercentages(address)\":{\"details\":\"These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`. These data are accessible as part of the `PoolConfig` (accessible through `getPoolConfig`), and also through the `IPoolInfo` on the pool itself. Standard Balancer pools implement this interface, but custom pools are not required to. We add this as a convenience function with the same interface, but it will fetch from the Vault directly to ensure it is always supported.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"aggregateSwapFeePercentage\":\"The aggregate percentage fee applied to swaps\",\"aggregateYieldFeePercentage\":\"The aggregate percentage fee applied to yield\"}},\"getAggregateSwapFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"_0\":\"swapFeeAmount The total amount of fees accumulated in the specified token\"}},\"getAggregateYieldFeeAmount(address,address)\":{\"params\":{\"pool\":\"The address of the pool for which aggregate fees have been collected\",\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"_0\":\"yieldFeeAmount The total amount of fees accumulated in the specified token\"}},\"getAuthorizer()\":{\"details\":\"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call. Being in the main Vault contract saves gas on every permissioned call.\",\"returns\":{\"_0\":\"authorizer Address of the authorizer contract\"}},\"getBptRate(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"rate\":\"BPT rate\"}},\"getBufferAsset(address)\":{\"details\":\"The asset can never change after buffer initialization.\",\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingToken\":\"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized.\"}},\"getBufferBalance(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"underlyingBalanceRaw\":\"Amount of underlying tokens deposited into the buffer, in native token decimals\",\"wrappedBalanceRaw\":\"Amount of wrapped tokens deposited into the buffer, in native token decimals\"}},\"getBufferMinimumTotalSupply()\":{\"details\":\"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.\",\"returns\":{\"_0\":\"minimumTotalSupply The minimum total supply a buffer can have after initialization\"}},\"getBufferOwnerShares(address,address)\":{\"params\":{\"liquidityOwner\":\"Address of the user that owns liquidity in the wrapped token's buffer\",\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"ownerShares\":\"Amount of shares allocated to the liquidity owner, in native underlying token decimals\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused.\",\"returns\":{\"_0\":\"bufferPeriodDuration The length of the buffer period in seconds\"}},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable. If already paused, the Vault can be unpaused until this timestamp.\",\"returns\":{\"_0\":\"bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused\"}},\"getBufferTotalShares(address)\":{\"params\":{\"wrappedToken\":\"Address of the wrapped token that implements IERC4626\"},\"returns\":{\"bufferShares\":\"Amount of supply shares of the buffer, in native underlying token decimals\"}},\"getCurrentLiveBalances(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesLiveScaled18\":\" Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getHooksConfig(address)\":{\"details\":\"The `HooksConfig` contains flags indicating which pool hooks are implemented.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"hooksConfig The hooks configuration as a `HooksConfig` struct\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"_0\":\"maxTokens The maximum token count of a pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"_0\":\"minTokens The minimum token count of a pool\"}},\"getMinimumTradeAmount()\":{\"details\":\"This limit is applied to the 18-decimal \\\"upscaled\\\" amount in any operation (swap, add/remove liquidity).\",\"returns\":{\"_0\":\"minimumTradeAmount The minimum trade amount as an 18-decimal floating point number\"}},\"getMinimumWrapAmount()\":{\"details\":\"This limit is applied to native decimal values, and guards against rounding errors.\",\"returns\":{\"_0\":\"minimumWrapAmount The minimum wrap amount\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"_0\":\"nonzeroDeltaCount The current value of `_nonzeroDeltaCount`\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance.\",\"returns\":{\"_0\":\"pauseWindowEndTime The timestamp when the Vault's pause window ends\"}},\"getPoolConfig(address)\":{\"details\":\"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"poolConfig The pool configuration as a `PoolConfig` struct\"}},\"getPoolData(address)\":{\"details\":\"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\",\"params\":{\"pool\":\"The address of the pool\"},\"returns\":{\"_0\":\"poolData The `PoolData` result\"}},\"getPoolMinimumTotalSupply()\":{\"details\":\"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\",\"returns\":{\"_0\":\"minimumTotalSupply The minimum total supply a pool can have after initialization\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"_0\":\"paused True if the Pool is paused\",\"_1\":\"poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\",\"_2\":\"poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\",\"_3\":\"pauseManager The pause manager, or the zero address\"}},\"getPoolRoleAccounts(address)\":{\"params\":{\"pool\":\"The address of the pool whose roles are being queried\"},\"returns\":{\"_0\":\"roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool. Function is in the main Vault contract.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"_0\":\"tokenCount Number of tokens in the pool\",\"_1\":\"index Index corresponding to the given token in the pool's token list\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"balancesRaw\":\"Raw balances, sorted in token registration order\",\"lastLiveBalances\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info, sorted in token registration order\",\"tokens\":\"The pool tokens, sorted in registration order\"}},\"getPoolTokenRates(address)\":{\"details\":\"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.\",\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"decimalScalingFactors\":\"Token decimal scaling factors\",\"tokenRates\":\"Token rates for yield-bearing tokens, or FP(1) for standard tokens\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"tokens List of tokens in the pool\"}},\"getProtocolFeeController()\":{\"returns\":{\"_0\":\"protocolFeeController Address of the ProtocolFeeController\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"_0\":\"reserveAmount The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"_0\":\"swapFeePercentage The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\"},\"returns\":{\"_0\":\"tokenDelta The delta of the specified token\"}},\"getVault()\":{\"details\":\"The main Vault contains the entrypoint and main liquidity operation implementations.\",\"returns\":{\"_0\":\"vault The address of the main Vault contract\"}},\"getVaultAdmin()\":{\"details\":\"The VaultAdmin contract mostly implements permissioned functions.\",\"returns\":{\"_0\":\"vaultAdmin The address of the Vault admin\"}},\"getVaultExtension()\":{\"details\":\"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity operations.\",\"returns\":{\"_0\":\"vaultExtension Address of the VaultExtension\"}},\"getVaultPausedState()\":{\"returns\":{\"_0\":\"paused True if the Vault is paused\",\"_1\":\"vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\",\"_2\":\"vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\"}},\"isPoolInRecoveryMode(address)\":{\"details\":\"Recovery Mode enables a safe proportional withdrawal path, with no external calls.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"recoveryMode True if the pool is in Recovery Mode, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"initialized True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"details\":\"If a pool is paused, all non-Recovery Mode state-changing operations will revert.\",\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"_0\":\"paused True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"registered True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"details\":\"This is a one-way switch. Once queries are disabled, they can never be re-enabled. The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\",\"returns\":{\"_0\":\"queryDisabled If true, then queries are disabled\"}},\"isUnlocked()\":{\"details\":\"The Vault must be unlocked to perform state-changing liquidity operations.\",\"returns\":{\"_0\":\"unlocked True if the Vault is unlocked, false otherwise\"}},\"isVaultPaused()\":{\"details\":\"If the Vault is paused, all non-Recovery Mode state-changing operations will revert.\",\"returns\":{\"_0\":\"paused True if the Vault is paused\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"The token address\"},\"returns\":{\"_0\":\"totalSupply Total supply of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Gets the allowance of a spender for a given ERC20 token and owner.\"},\"areBuffersPaused()\":{\"notice\":\"Indicates whether the Vault buffers are paused.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets the balance of an account for a given ERC20 token.\"},\"collectAggregateFees(address)\":{\"notice\":\"Collects accumulated aggregate swap and yield fees for the specified pool.\"},\"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Query the current dynamic swap fee of a pool, given a set of swap parameters.\"},\"getAggregateFeePercentages(address)\":{\"notice\":\"Gets the aggregate swap and yield fee percentages for a pool.\"},\"getAggregateSwapFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\"},\"getAggregateYieldFeeAmount(address,address)\":{\"notice\":\"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Authorizer address.\"},\"getBptRate(address)\":{\"notice\":\"Gets the current bpt rate of a pool, by dividing the current invariant by the total supply of BPT.\"},\"getBufferAsset(address)\":{\"notice\":\"Returns the asset registered for a given wrapped token.\"},\"getBufferBalance(address)\":{\"notice\":\"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\"},\"getBufferMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\"},\"getBufferOwnerShares(address,address)\":{\"notice\":\"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns the Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns the Vault's buffer period end time.\"},\"getBufferTotalShares(address)\":{\"notice\":\"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\"},\"getCurrentLiveBalances(address)\":{\"notice\":\"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order.\"},\"getHooksConfig(address)\":{\"notice\":\"Gets the hooks configuration parameters of a pool.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getMinimumTradeAmount()\":{\"notice\":\"Get the minimum trade amount in a pool operation.\"},\"getMinimumWrapAmount()\":{\"notice\":\"Get the minimum amount that can be wrapped by an ERC4626 token buffer by the Vault.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns the Vault's pause window end time.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolData(address)\":{\"notice\":\"Returns comprehensive pool data for the given pool.\"},\"getPoolMinimumTotalSupply()\":{\"notice\":\"Get the minimum total supply of pool tokens (BPT) for an initialized pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolRoleAccounts(address)\":{\"notice\":\"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Gets pool token rates.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFeeController()\":{\"notice\":\"Returns the Protocol Fee Controller address.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address)\":{\"notice\":\"Retrieves the token delta for a specific token.\"},\"getVault()\":{\"notice\":\"Returns the main Vault address.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the VaultAdmin contract address.\"},\"getVaultExtension()\":{\"notice\":\"Returns the VaultExtension contract address.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in Recovery Mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Checks if the queries enabled on the Vault.\"},\"isUnlocked()\":{\"notice\":\"Returns whether the Vault is unlocked (i.e., executing an operation).\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"totalSupply(address)\":{\"notice\":\"Gets the total supply of a given ERC20 token.\"}},\"notice\":\"Helper contract that exposes the full permissionless Vault interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IVaultExplorer.sol\":\"IVaultExplorer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452\",\"dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IVaultExplorer.sol\":{\"keccak256\":\"0xc92f7efdbe8f0135da7d89c14900916922c6372b7ae468a052279bcfa82b1ee1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3d9617c093b77278ad1aa8fc70811c6db6f2188f5259175bfb9747c35c5cf4b3\",\"dweb:/ipfs/QmXekUbSw6zyfYf9131Wcz4gd8wfkXUiPBKMB5aQv6nsUV\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3\",\"dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf\",\"dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323\",\"dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"areBuffersPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"collectAggregateFees"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"struct PoolSwapParams","name":"swapParams","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"view","type":"function","name":"computeDynamicSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getAggregateFeePercentages","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getAggregateSwapFeeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getAggregateYieldFeeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getAuthorizer","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getBptRate","outputs":[{"internalType":"uint256","name":"rate","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"stateMutability":"view","type":"function","name":"getBufferAsset","outputs":[{"internalType":"address","name":"underlyingToken","type":"address"}]},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"stateMutability":"view","type":"function","name":"getBufferBalance","outputs":[{"internalType":"uint256","name":"underlyingBalanceRaw","type":"uint256"},{"internalType":"uint256","name":"wrappedBalanceRaw","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBufferMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"},{"internalType":"address","name":"liquidityOwner","type":"address"}],"stateMutability":"view","type":"function","name":"getBufferOwnerShares","outputs":[{"internalType":"uint256","name":"ownerShares","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBufferPeriodDuration","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"contract IERC4626","name":"wrappedToken","type":"address"}],"stateMutability":"view","type":"function","name":"getBufferTotalShares","outputs":[{"internalType":"uint256","name":"bufferShares","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getHooksConfig","outputs":[{"internalType":"struct HooksConfig","name":"","type":"tuple","components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"},{"internalType":"address","name":"hooksContract","type":"address"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMinimumTradeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMinimumWrapAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPauseWindowEndTime","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolConfig","outputs":[{"internalType":"struct PoolConfig","name":"","type":"tuple","components":[{"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple","components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}]},{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"},{"internalType":"uint40","name":"tokenDecimalDiffs","type":"uint40"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"}]}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolData","outputs":[{"internalType":"struct PoolData","name":"","type":"tuple","components":[{"internalType":"PoolConfigBits","name":"poolConfigBits","type":"bytes32"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]","components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}]},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"},{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPoolMinimumTotalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolRoleAccounts","outputs":[{"internalType":"struct PoolRoleAccounts","name":"","type":"tuple","components":[{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"address","name":"swapFeeManager","type":"address"},{"internalType":"address","name":"poolCreator","type":"address"}]}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]","components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}]},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastLiveBalances","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"decimalScalingFactors","type":"uint256[]"},{"internalType":"uint256[]","name":"tokenRates","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"","type":"address[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getProtocolFeeController","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getReservesOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getTokenDelta","outputs":[{"internalType":"int256","name":"","type":"int256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVault","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultAdmin","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultExtension","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isUnlocked","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isVaultPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"allowance(address,address,address)":{"params":{"owner":"Address of the owner","spender":"Address of the spender","token":"Address of the token"},"returns":{"_0":"allowance Amount of tokens the spender is allowed to spend"}},"areBuffersPaused()":{"details":"When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true) will revert. This operation is reversible.","returns":{"_0":"buffersPaused True if the Vault buffers are paused"}},"balanceOf(address,address)":{"params":{"account":"Address of the account","token":"Address of the token"},"returns":{"_0":"balance Balance of the account for the token"}},"collectAggregateFees(address)":{"details":"Fees are sent to the ProtocolFeeController address.","params":{"pool":"The pool on which all aggregate fees should be collected"}},"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":{"details":"Reverts if the hook doesn't return the success flag set to `true`.","params":{"pool":"The pool","swapParams":"The swap parameters used to compute the fee"},"returns":{"_0":"dynamicSwapFeePercentage The dynamic swap fee percentage"}},"getAggregateFeePercentages(address)":{"details":"These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`. These data are accessible as part of the `PoolConfig` (accessible through `getPoolConfig`), and also through the `IPoolInfo` on the pool itself. Standard Balancer pools implement this interface, but custom pools are not required to. We add this as a convenience function with the same interface, but it will fetch from the Vault directly to ensure it is always supported.","params":{"pool":"Address of the pool"},"returns":{"aggregateSwapFeePercentage":"The aggregate percentage fee applied to swaps","aggregateYieldFeePercentage":"The aggregate percentage fee applied to yield"}},"getAggregateSwapFeeAmount(address,address)":{"params":{"pool":"The address of the pool for which aggregate fees have been collected","token":"The address of the token in which fees have been accumulated"},"returns":{"_0":"swapFeeAmount The total amount of fees accumulated in the specified token"}},"getAggregateYieldFeeAmount(address,address)":{"params":{"pool":"The address of the pool for which aggregate fees have been collected","token":"The address of the token in which fees have been accumulated"},"returns":{"_0":"yieldFeeAmount The total amount of fees accumulated in the specified token"}},"getAuthorizer()":{"details":"The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can be changed through a permissioned call. Being in the main Vault contract saves gas on every permissioned call.","returns":{"_0":"authorizer Address of the authorizer contract"}},"getBptRate(address)":{"params":{"pool":"Address of the pool"},"returns":{"rate":"BPT rate"}},"getBufferAsset(address)":{"details":"The asset can never change after buffer initialization.","params":{"wrappedToken":"Address of the wrapped token that implements IERC4626"},"returns":{"underlyingToken":"Address of the underlying token registered for the wrapper; `address(0)` if the buffer has not been initialized."}},"getBufferBalance(address)":{"params":{"wrappedToken":"Address of the wrapped token that implements IERC4626"},"returns":{"underlyingBalanceRaw":"Amount of underlying tokens deposited into the buffer, in native token decimals","wrappedBalanceRaw":"Amount of wrapped tokens deposited into the buffer, in native token decimals"}},"getBufferMinimumTotalSupply()":{"details":"This prevents buffers from being completely drained. When the buffer is initialized, this minimum number of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal to the Vault, as buffers are not tokenized.","returns":{"_0":"minimumTotalSupply The minimum total supply a buffer can have after initialization"}},"getBufferOwnerShares(address,address)":{"params":{"liquidityOwner":"Address of the user that owns liquidity in the wrapped token's buffer","wrappedToken":"Address of the wrapped token that implements IERC4626"},"returns":{"ownerShares":"Amount of shares allocated to the liquidity owner, in native underlying token decimals"}},"getBufferPeriodDuration()":{"details":"This value is immutable. It represents the period during which, if paused, the Vault will remain paused. This ensures there is time available to address whatever issue caused the Vault to be paused.","returns":{"_0":"bufferPeriodDuration The length of the buffer period in seconds"}},"getBufferPeriodEndTime()":{"details":"This value is immutable. If already paused, the Vault can be unpaused until this timestamp.","returns":{"_0":"bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused"}},"getBufferTotalShares(address)":{"params":{"wrappedToken":"Address of the wrapped token that implements IERC4626"},"returns":{"bufferShares":"Amount of supply shares of the buffer, in native underlying token decimals"}},"getCurrentLiveBalances(address)":{"params":{"pool":"Address of the pool"},"returns":{"balancesLiveScaled18":" Token balances after paying yield fees, applying decimal scaling and rates"}},"getHooksConfig(address)":{"details":"The `HooksConfig` contains flags indicating which pool hooks are implemented.","params":{"pool":"Address of the pool"},"returns":{"_0":"hooksConfig The hooks configuration as a `HooksConfig` struct"}},"getMaximumPoolTokens()":{"returns":{"_0":"maxTokens The maximum token count of a pool"}},"getMinimumPoolTokens()":{"details":"We expect the vast majority of pools to be 2-token.","returns":{"_0":"minTokens The minimum token count of a pool"}},"getMinimumTradeAmount()":{"details":"This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).","returns":{"_0":"minimumTradeAmount The minimum trade amount as an 18-decimal floating point number"}},"getMinimumWrapAmount()":{"details":"This limit is applied to native decimal values, and guards against rounding errors.","returns":{"_0":"minimumWrapAmount The minimum wrap amount"}},"getNonzeroDeltaCount()":{"returns":{"_0":"nonzeroDeltaCount The current value of `_nonzeroDeltaCount`"}},"getPauseWindowEndTime()":{"details":"This value is immutable, and represents the timestamp after which the Vault can no longer be paused by governance.","returns":{"_0":"pauseWindowEndTime The timestamp when the Vault's pause window ends"}},"getPoolConfig(address)":{"details":"The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.","params":{"pool":"Address of the pool"},"returns":{"_0":"poolConfig The pool configuration as a `PoolConfig` struct"}},"getPoolData(address)":{"details":"This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.","params":{"pool":"The address of the pool"},"returns":{"_0":"poolData The `PoolData` result"}},"getPoolMinimumTotalSupply()":{"details":"This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.","returns":{"_0":"minimumTotalSupply The minimum total supply a pool can have after initialization"}},"getPoolPausedState(address)":{"details":"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period.","params":{"pool":"The pool whose data is requested"},"returns":{"_0":"paused True if the Pool is paused","_1":"poolPauseWindowEndTime The timestamp of the end of the Pool's pause window","_2":"poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)","_3":"pauseManager The pause manager, or the zero address"}},"getPoolRoleAccounts(address)":{"params":{"pool":"The address of the pool whose roles are being queried"},"returns":{"_0":"roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)"}},"getPoolTokenCountAndIndexOfToken(address,address)":{"details":"Reverts if the pool is not registered, or if the token does not belong to the pool. Function is in the main Vault contract.","params":{"pool":"Address of the pool","token":"Address of the token"},"returns":{"_0":"tokenCount Number of tokens in the pool","_1":"index Index corresponding to the given token in the pool's token list"}},"getPoolTokenInfo(address)":{"params":{"pool":"Address of the pool"},"returns":{"balancesRaw":"Raw balances, sorted in token registration order","lastLiveBalances":"Last saved live balances, sorted in token registration order","tokenInfo":"Token info, sorted in token registration order","tokens":"The pool tokens, sorted in registration order"}},"getPoolTokenRates(address)":{"details":"This function performs external calls if tokens are yield-bearing. All returned arrays are in token registration order.","params":{"pool":"Address of the pool"},"returns":{"decimalScalingFactors":"Token decimal scaling factors","tokenRates":"Token rates for yield-bearing tokens, or FP(1) for standard tokens"}},"getPoolTokens(address)":{"params":{"pool":"Address of the pool"},"returns":{"_0":"tokens List of tokens in the pool"}},"getProtocolFeeController()":{"returns":{"_0":"protocolFeeController Address of the ProtocolFeeController"}},"getReservesOf(address)":{"params":{"token":"The token for which to retrieve the reserve"},"returns":{"_0":"reserveAmount The amount of reserves for the given token"}},"getStaticSwapFeePercentage(address)":{"params":{"pool":"The address of the pool whose static swap fee percentage is being queried"},"returns":{"_0":"swapFeePercentage The current static swap fee percentage for the specified pool"}},"getTokenDelta(address)":{"details":"This function allows reading the value from the `_tokenDeltas` mapping.","params":{"token":"The token for which the delta is being fetched"},"returns":{"_0":"tokenDelta The delta of the specified token"}},"getVault()":{"details":"The main Vault contains the entrypoint and main liquidity operation implementations.","returns":{"_0":"vault The address of the main Vault contract"}},"getVaultAdmin()":{"details":"The VaultAdmin contract mostly implements permissioned functions.","returns":{"_0":"vaultAdmin The address of the Vault admin"}},"getVaultExtension()":{"details":"Function is in the main Vault contract. The VaultExtension handles less critical or frequently used functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault contains the core code for swaps and liquidity operations.","returns":{"_0":"vaultExtension Address of the VaultExtension"}},"getVaultPausedState()":{"returns":{"_0":"paused True if the Vault is paused","_1":"vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window","_2":"vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"}},"isPoolInRecoveryMode(address)":{"details":"Recovery Mode enables a safe proportional withdrawal path, with no external calls.","params":{"pool":"Address of the pool to check"},"returns":{"_0":"recoveryMode True if the pool is in Recovery Mode, false otherwise"}},"isPoolInitialized(address)":{"details":"An initialized pool can be considered registered as well.","params":{"pool":"Address of the pool to check"},"returns":{"_0":"initialized True if the pool is initialized, false otherwise"}},"isPoolPaused(address)":{"details":"If a pool is paused, all non-Recovery Mode state-changing operations will revert.","params":{"pool":"The pool to be checked"},"returns":{"_0":"paused True if the pool is paused"}},"isPoolRegistered(address)":{"params":{"pool":"Address of the pool to check"},"returns":{"_0":"registered True if the pool is registered, false otherwise"}},"isQueryDisabled()":{"details":"This is a one-way switch. Once queries are disabled, they can never be re-enabled. The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).","returns":{"_0":"queryDisabled If true, then queries are disabled"}},"isUnlocked()":{"details":"The Vault must be unlocked to perform state-changing liquidity operations.","returns":{"_0":"unlocked True if the Vault is unlocked, false otherwise"}},"isVaultPaused()":{"details":"If the Vault is paused, all non-Recovery Mode state-changing operations will revert.","returns":{"_0":"paused True if the Vault is paused"}},"totalSupply(address)":{"params":{"token":"The token address"},"returns":{"_0":"totalSupply Total supply of the token"}}},"version":1},"userdoc":{"kind":"user","methods":{"allowance(address,address,address)":{"notice":"Gets the allowance of a spender for a given ERC20 token and owner."},"areBuffersPaused()":{"notice":"Indicates whether the Vault buffers are paused."},"balanceOf(address,address)":{"notice":"Gets the balance of an account for a given ERC20 token."},"collectAggregateFees(address)":{"notice":"Collects accumulated aggregate swap and yield fees for the specified pool."},"computeDynamicSwapFeePercentage(address,(uint8,uint256,uint256[],uint256,uint256,address,bytes))":{"notice":"Query the current dynamic swap fee of a pool, given a set of swap parameters."},"getAggregateFeePercentages(address)":{"notice":"Gets the aggregate swap and yield fee percentages for a pool."},"getAggregateSwapFeeAmount(address,address)":{"notice":"Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool."},"getAggregateYieldFeeAmount(address,address)":{"notice":"Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool."},"getAuthorizer()":{"notice":"Returns the Authorizer address."},"getBptRate(address)":{"notice":"Gets the current bpt rate of a pool, by dividing the current invariant by the total supply of BPT."},"getBufferAsset(address)":{"notice":"Returns the asset registered for a given wrapped token."},"getBufferBalance(address)":{"notice":"Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault."},"getBufferMinimumTotalSupply()":{"notice":"Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault."},"getBufferOwnerShares(address,address)":{"notice":"Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets in the buffer."},"getBufferPeriodDuration()":{"notice":"Returns the Vault's buffer period duration."},"getBufferPeriodEndTime()":{"notice":"Returns the Vault's buffer period end time."},"getBufferTotalShares(address)":{"notice":"Returns the supply shares (internal buffer BPT) of the ERC4626 buffer."},"getCurrentLiveBalances(address)":{"notice":"Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in registration order."},"getHooksConfig(address)":{"notice":"Gets the hooks configuration parameters of a pool."},"getMaximumPoolTokens()":{"notice":"Get the maximum number of tokens in a pool."},"getMinimumPoolTokens()":{"notice":"Get the minimum number of tokens in a pool."},"getMinimumTradeAmount()":{"notice":"Get the minimum trade amount in a pool operation."},"getMinimumWrapAmount()":{"notice":"Get the minimum amount that can be wrapped by an ERC4626 token buffer by the Vault."},"getNonzeroDeltaCount()":{"notice":"Returns the count of non-zero deltas."},"getPauseWindowEndTime()":{"notice":"Returns the Vault's pause window end time."},"getPoolConfig(address)":{"notice":"Gets the configuration parameters of a pool."},"getPoolData(address)":{"notice":"Returns comprehensive pool data for the given pool."},"getPoolMinimumTotalSupply()":{"notice":"Get the minimum total supply of pool tokens (BPT) for an initialized pool."},"getPoolPausedState(address)":{"notice":"Returns the paused status, and end times of the Pool's pause window and buffer period."},"getPoolRoleAccounts(address)":{"notice":"Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)"},"getPoolTokenCountAndIndexOfToken(address,address)":{"notice":"Gets the index of a token in a given pool."},"getPoolTokenInfo(address)":{"notice":"Gets the raw data for a pool: tokens, raw balances, scaling factors."},"getPoolTokenRates(address)":{"notice":"Gets pool token rates."},"getPoolTokens(address)":{"notice":"Gets the tokens registered to a pool."},"getProtocolFeeController()":{"notice":"Returns the Protocol Fee Controller address."},"getReservesOf(address)":{"notice":"Retrieves the reserve (i.e., total Vault balance) of a given token."},"getStaticSwapFeePercentage(address)":{"notice":"Fetches the static swap fee percentage for a given pool."},"getTokenDelta(address)":{"notice":"Retrieves the token delta for a specific token."},"getVault()":{"notice":"Returns the main Vault address."},"getVaultAdmin()":{"notice":"Returns the VaultAdmin contract address."},"getVaultExtension()":{"notice":"Returns the VaultExtension contract address."},"getVaultPausedState()":{"notice":"Returns the paused status, and end times of the Vault's pause window and buffer period."},"isPoolInRecoveryMode(address)":{"notice":"Checks whether a pool is in Recovery Mode."},"isPoolInitialized(address)":{"notice":"Checks whether a pool is initialized."},"isPoolPaused(address)":{"notice":"Indicates whether a pool is paused."},"isPoolRegistered(address)":{"notice":"Checks whether a pool is registered."},"isQueryDisabled()":{"notice":"Checks if the queries enabled on the Vault."},"isUnlocked()":{"notice":"Returns whether the Vault is unlocked (i.e., executing an operation)."},"isVaultPaused()":{"notice":"Indicates whether the Vault is paused."},"totalSupply(address)":{"notice":"Gets the total supply of a given ERC20 token."}},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IVaultExplorer.sol":"IVaultExplorer"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"keccak256":"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906","urls":["bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452","dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IVaultExplorer.sol":{"keccak256":"0xc92f7efdbe8f0135da7d89c14900916922c6372b7ae468a052279bcfa82b1ee1","urls":["bzz-raw://3d9617c093b77278ad1aa8fc70811c6db6f2188f5259175bfb9747c35c5cf4b3","dweb:/ipfs/QmXekUbSw6zyfYf9131Wcz4gd8wfkXUiPBKMB5aQv6nsUV"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol":{"keccak256":"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3","urls":["bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3","dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf"],"license":"GPL-3.0-or-later"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06","urls":["bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf","dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IVaultExplorer.sol","id":7783,"exportedSymbols":{"HooksConfig":[8400],"IERC20":[97896],"IERC4626":[97037],"IVaultExplorer":[7782],"PoolConfig":[8354],"PoolData":[8478],"PoolRoleAccounts":[8426],"PoolSwapParams":[8521],"TokenInfo":[8453]},"nodeType":"SourceUnit","src":"46:24589:44","nodes":[{"id":7346,"nodeType":"PragmaDirective","src":"46:24:44","nodes":[],"literals":["solidity","^","0.8",".24"]},{"id":7348,"nodeType":"ImportDirective","src":"72:75:44","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol","file":"@openzeppelin/contracts/interfaces/IERC4626.sol","nameLocation":"-1:-1:-1","scope":7783,"sourceUnit":97038,"symbolAliases":[{"foreign":{"id":7347,"name":"IERC4626","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97037,"src":"81:8:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7350,"nodeType":"ImportDirective","src":"148:72:44","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","nameLocation":"-1:-1:-1","scope":7783,"sourceUnit":97897,"symbolAliases":[{"foreign":{"id":7349,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97896,"src":"157:6:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7357,"nodeType":"ImportDirective","src":"222:114:44","nodes":[],"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol","file":"./VaultTypes.sol","nameLocation":"-1:-1:-1","scope":7783,"sourceUnit":8621,"symbolAliases":[{"foreign":{"id":7351,"name":"TokenInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8453,"src":"231:9:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":7352,"name":"PoolRoleAccounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8426,"src":"242:16:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":7353,"name":"PoolData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8478,"src":"260:8:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":7354,"name":"PoolConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8354,"src":"270:10:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":7355,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8521,"src":"282:14:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":7356,"name":"HooksConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8400,"src":"298:11:44","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":7782,"nodeType":"ContractDefinition","src":"1195:23439:44","nodes":[{"id":7364,"nodeType":"FunctionDefinition","src":"1659:52:44","nodes":[],"documentation":{"id":7359,"nodeType":"StructuredDocumentation","src":"1439:215:44","text":" @notice Returns the main Vault address.\n @dev The main Vault contains the entrypoint and main liquidity operation implementations.\n @return vault The address of the main Vault contract"},"functionSelector":"8d928af8","implemented":false,"kind":"function","modifiers":[],"name":"getVault","nameLocation":"1668:8:44","parameters":{"id":7360,"nodeType":"ParameterList","parameters":[],"src":"1676:2:44"},"returnParameters":{"id":7363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7364,"src":"1702:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7361,"name":"address","nodeType":"ElementaryTypeName","src":"1702:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1701:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7370,"nodeType":"FunctionDefinition","src":"2148:61:44","nodes":[],"documentation":{"id":7365,"nodeType":"StructuredDocumentation","src":"1717:426:44","text":" @notice Returns the VaultExtension contract address.\n @dev Function is in the main Vault contract. The VaultExtension handles less critical or frequently used\n functions, since delegate calls through the Vault are more expensive than direct calls. The main Vault\n contains the core code for swaps and liquidity operations.\n @return vaultExtension Address of the VaultExtension"},"functionSelector":"b9a8effa","implemented":false,"kind":"function","modifiers":[],"name":"getVaultExtension","nameLocation":"2157:17:44","parameters":{"id":7366,"nodeType":"ParameterList","parameters":[],"src":"2174:2:44"},"returnParameters":{"id":7369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7370,"src":"2200:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7367,"name":"address","nodeType":"ElementaryTypeName","src":"2200:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2199:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7376,"nodeType":"FunctionDefinition","src":"2422:57:44","nodes":[],"documentation":{"id":7371,"nodeType":"StructuredDocumentation","src":"2215:202:44","text":" @notice Returns the VaultAdmin contract address.\n @dev The VaultAdmin contract mostly implements permissioned functions.\n @return vaultAdmin The address of the Vault admin"},"functionSelector":"1ba0ae45","implemented":false,"kind":"function","modifiers":[],"name":"getVaultAdmin","nameLocation":"2431:13:44","parameters":{"id":7372,"nodeType":"ParameterList","parameters":[],"src":"2444:2:44"},"returnParameters":{"id":7375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7376,"src":"2470:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7373,"name":"address","nodeType":"ElementaryTypeName","src":"2470:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2469:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7382,"nodeType":"FunctionDefinition","src":"2845:57:44","nodes":[],"documentation":{"id":7377,"nodeType":"StructuredDocumentation","src":"2485:355:44","text":" @notice Returns the Authorizer address.\n @dev The authorizer holds the permissions granted by governance. It is set on Vault deployment, and can\n be changed through a permissioned call. Being in the main Vault contract saves gas on every permissioned call.\n @return authorizer Address of the authorizer contract"},"functionSelector":"aaabadc5","implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","nameLocation":"2854:13:44","parameters":{"id":7378,"nodeType":"ParameterList","parameters":[],"src":"2867:2:44"},"returnParameters":{"id":7381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7382,"src":"2893:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7379,"name":"address","nodeType":"ElementaryTypeName","src":"2893:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2892:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7388,"nodeType":"FunctionDefinition","src":"3058:68:44","nodes":[],"documentation":{"id":7383,"nodeType":"StructuredDocumentation","src":"2908:145:44","text":" @notice Returns the Protocol Fee Controller address.\n @return protocolFeeController Address of the ProtocolFeeController"},"functionSelector":"85f2dbd4","implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeeController","nameLocation":"3067:24:44","parameters":{"id":7384,"nodeType":"ParameterList","parameters":[],"src":"3091:2:44"},"returnParameters":{"id":7387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7388,"src":"3117:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7385,"name":"address","nodeType":"ElementaryTypeName","src":"3117:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3116:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7394,"nodeType":"FunctionDefinition","src":"3613:51:44","nodes":[],"documentation":{"id":7389,"nodeType":"StructuredDocumentation","src":"3354:254:44","text":" @notice Returns whether the Vault is unlocked (i.e., executing an operation).\n @dev The Vault must be unlocked to perform state-changing liquidity operations.\n @return unlocked True if the Vault is unlocked, false otherwise"},"functionSelector":"8380edb7","implemented":false,"kind":"function","modifiers":[],"name":"isUnlocked","nameLocation":"3622:10:44","parameters":{"id":7390,"nodeType":"ParameterList","parameters":[],"src":"3632:2:44"},"returnParameters":{"id":7393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7394,"src":"3658:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7391,"name":"bool","nodeType":"ElementaryTypeName","src":"3658:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3657:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7400,"nodeType":"FunctionDefinition","src":"3816:64:44","nodes":[],"documentation":{"id":7395,"nodeType":"StructuredDocumentation","src":"3670:141:44","text":"  @notice Returns the count of non-zero deltas.\n  @return nonzeroDeltaCount The current value of `_nonzeroDeltaCount`"},"functionSelector":"db817187","implemented":false,"kind":"function","modifiers":[],"name":"getNonzeroDeltaCount","nameLocation":"3825:20:44","parameters":{"id":7396,"nodeType":"ParameterList","parameters":[],"src":"3845:2:44"},"returnParameters":{"id":7399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7398,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7400,"src":"3871:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7397,"name":"uint256","nodeType":"ElementaryTypeName","src":"3871:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3870:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7409,"nodeType":"FunctionDefinition","src":"4175:68:44","nodes":[],"documentation":{"id":7401,"nodeType":"StructuredDocumentation","src":"3886:284:44","text":" @notice Retrieves the token delta for a specific token.\n @dev This function allows reading the value from the `_tokenDeltas` mapping.\n @param token The token for which the delta is being fetched\n @return tokenDelta The delta of the specified token"},"functionSelector":"9e825ff5","implemented":false,"kind":"function","modifiers":[],"name":"getTokenDelta","nameLocation":"4184:13:44","parameters":{"id":7405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7404,"mutability":"mutable","name":"token","nameLocation":"4205:5:44","nodeType":"VariableDeclaration","scope":7409,"src":"4198:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"},"typeName":{"id":7403,"nodeType":"UserDefinedTypeName","pathNode":{"id":7402,"name":"IERC20","nameLocations":["4198:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":97896,"src":"4198:6:44"},"referencedDeclaration":97896,"src":"4198:6:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"4197:14:44"},"returnParameters":{"id":7408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7409,"src":"4235:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":7406,"name":"int256","nodeType":"ElementaryTypeName","src":"4235:6:44","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4234:8:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7418,"nodeType":"FunctionDefinition","src":"4484:69:44","nodes":[],"documentation":{"id":7410,"nodeType":"StructuredDocumentation","src":"4249:230:44","text":" @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\n @param token The token for which to retrieve the reserve\n @return reserveAmount The amount of reserves for the given token"},"functionSelector":"96787092","implemented":false,"kind":"function","modifiers":[],"name":"getReservesOf","nameLocation":"4493:13:44","parameters":{"id":7414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7413,"mutability":"mutable","name":"token","nameLocation":"4514:5:44","nodeType":"VariableDeclaration","scope":7418,"src":"4507:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"},"typeName":{"id":7412,"nodeType":"UserDefinedTypeName","pathNode":{"id":7411,"name":"IERC20","nameLocations":["4507:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":97896,"src":"4507:6:44"},"referencedDeclaration":97896,"src":"4507:6:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"4506:14:44"},"returnParameters":{"id":7417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7418,"src":"4544:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7415,"name":"uint256","nodeType":"ElementaryTypeName","src":"4544:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4543:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7426,"nodeType":"FunctionDefinition","src":"4974:69:44","nodes":[],"documentation":{"id":7419,"nodeType":"StructuredDocumentation","src":"4784:185:44","text":" @notice Checks whether a pool is registered.\n @param pool Address of the pool to check\n @return registered True if the pool is registered, false otherwise"},"functionSelector":"c673bdaf","implemented":false,"kind":"function","modifiers":[],"name":"isPoolRegistered","nameLocation":"4983:16:44","parameters":{"id":7422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7421,"mutability":"mutable","name":"pool","nameLocation":"5008:4:44","nodeType":"VariableDeclaration","scope":7426,"src":"5000:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7420,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4999:14:44"},"returnParameters":{"id":7425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7426,"src":"5037:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7423,"name":"bool","nodeType":"ElementaryTypeName","src":"5037:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5036:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7434,"nodeType":"FunctionDefinition","src":"5536:70:44","nodes":[],"documentation":{"id":7427,"nodeType":"StructuredDocumentation","src":"5273:258:44","text":" @notice Checks whether a pool is initialized.\n @dev An initialized pool can be considered registered as well.\n @param pool Address of the pool to check\n @return initialized True if the pool is initialized, false otherwise"},"functionSelector":"532cec7c","implemented":false,"kind":"function","modifiers":[],"name":"isPoolInitialized","nameLocation":"5545:17:44","parameters":{"id":7430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7429,"mutability":"mutable","name":"pool","nameLocation":"5571:4:44","nodeType":"VariableDeclaration","scope":7434,"src":"5563:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7428,"name":"address","nodeType":"ElementaryTypeName","src":"5563:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5562:14:44"},"returnParameters":{"id":7433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7432,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7434,"src":"5600:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7431,"name":"bool","nodeType":"ElementaryTypeName","src":"5600:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5599:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7444,"nodeType":"FunctionDefinition","src":"5769:77:44","nodes":[],"documentation":{"id":7435,"nodeType":"StructuredDocumentation","src":"5612:152:44","text":" @notice Gets the tokens registered to a pool.\n @param pool Address of the pool\n @return tokens List of tokens in the pool"},"functionSelector":"ca4f2803","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","nameLocation":"5778:13:44","parameters":{"id":7438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7437,"mutability":"mutable","name":"pool","nameLocation":"5800:4:44","nodeType":"VariableDeclaration","scope":7444,"src":"5792:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7436,"name":"address","nodeType":"ElementaryTypeName","src":"5792:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5791:14:44"},"returnParameters":{"id":7443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7444,"src":"5829:15:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$97896_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":7440,"nodeType":"UserDefinedTypeName","pathNode":{"id":7439,"name":"IERC20","nameLocations":["5829:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":97896,"src":"5829:6:44"},"referencedDeclaration":97896,"src":"5829:6:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"}},"id":7441,"nodeType":"ArrayTypeName","src":"5829:8:44","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$97896_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"5828:17:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7457,"nodeType":"FunctionDefinition","src":"6296:111:44","nodes":[],"documentation":{"id":7445,"nodeType":"StructuredDocumentation","src":"5852:439:44","text":" @notice Gets the index of a token in a given pool.\n @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\n Function is in the main Vault contract.\n @param pool Address of the pool\n @param token Address of the token\n @return tokenCount Number of tokens in the pool\n @return index Index corresponding to the given token in the pool's token list"},"functionSelector":"c9c1661b","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenCountAndIndexOfToken","nameLocation":"6305:32:44","parameters":{"id":7451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7447,"mutability":"mutable","name":"pool","nameLocation":"6346:4:44","nodeType":"VariableDeclaration","scope":7457,"src":"6338:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7446,"name":"address","nodeType":"ElementaryTypeName","src":"6338:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7450,"mutability":"mutable","name":"token","nameLocation":"6359:5:44","nodeType":"VariableDeclaration","scope":7457,"src":"6352:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"},"typeName":{"id":7449,"nodeType":"UserDefinedTypeName","pathNode":{"id":7448,"name":"IERC20","nameLocations":["6352:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":97896,"src":"6352:6:44"},"referencedDeclaration":97896,"src":"6352:6:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"6337:28:44"},"returnParameters":{"id":7456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7457,"src":"6389:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7452,"name":"uint256","nodeType":"ElementaryTypeName","src":"6389:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7457,"src":"6398:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7454,"name":"uint256","nodeType":"ElementaryTypeName","src":"6398:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6388:18:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7469,"nodeType":"FunctionDefinition","src":"6812:147:44","nodes":[],"documentation":{"id":7458,"nodeType":"StructuredDocumentation","src":"6413:394:44","text":" @notice Gets pool token rates.\n @dev This function performs external calls if tokens are yield-bearing. All returned arrays are in token\n registration order.\n @param pool Address of the pool\n @return decimalScalingFactors Token decimal scaling factors\n @return tokenRates Token rates for yield-bearing tokens, or FP(1) for standard tokens"},"functionSelector":"7e361bde","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenRates","nameLocation":"6821:17:44","parameters":{"id":7461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7460,"mutability":"mutable","name":"pool","nameLocation":"6856:4:44","nodeType":"VariableDeclaration","scope":7469,"src":"6848:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7459,"name":"address","nodeType":"ElementaryTypeName","src":"6848:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6838:28:44"},"returnParameters":{"id":7468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7464,"mutability":"mutable","name":"decimalScalingFactors","nameLocation":"6907:21:44","nodeType":"VariableDeclaration","scope":7469,"src":"6890:38:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7462,"name":"uint256","nodeType":"ElementaryTypeName","src":"6890:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7463,"nodeType":"ArrayTypeName","src":"6890:9:44","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":7467,"mutability":"mutable","name":"tokenRates","nameLocation":"6947:10:44","nodeType":"VariableDeclaration","scope":7469,"src":"6930:27:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7465,"name":"uint256","nodeType":"ElementaryTypeName","src":"6930:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7466,"nodeType":"ArrayTypeName","src":"6930:9:44","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6889:69:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7478,"nodeType":"FunctionDefinition","src":"7257:75:44","nodes":[],"documentation":{"id":7470,"nodeType":"StructuredDocumentation","src":"6965:287:44","text":" @notice Returns comprehensive pool data for the given pool.\n @dev This contains the pool configuration (flags), tokens and token types, rates, scaling factors, and balances.\n @param pool The address of the pool\n @return poolData The `PoolData` result"},"functionSelector":"13d21cdf","implemented":false,"kind":"function","modifiers":[],"name":"getPoolData","nameLocation":"7266:11:44","parameters":{"id":7473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7472,"mutability":"mutable","name":"pool","nameLocation":"7286:4:44","nodeType":"VariableDeclaration","scope":7478,"src":"7278:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7471,"name":"address","nodeType":"ElementaryTypeName","src":"7278:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7277:14:44"},"returnParameters":{"id":7477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7478,"src":"7315:15:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$8478_memory_ptr","typeString":"struct PoolData"},"typeName":{"id":7475,"nodeType":"UserDefinedTypeName","pathNode":{"id":7474,"name":"PoolData","nameLocations":["7315:8:44"],"nodeType":"IdentifierPath","referencedDeclaration":8478,"src":"7315:8:44"},"referencedDeclaration":8478,"src":"7315:8:44","typeDescriptions":{"typeIdentifier":"t_struct$_PoolData_$8478_storage_ptr","typeString":"struct PoolData"}},"visibility":"internal"}],"src":"7314:17:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7498,"nodeType":"FunctionDefinition","src":"7786:278:44","nodes":[],"documentation":{"id":7479,"nodeType":"StructuredDocumentation","src":"7338:443:44","text":" @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\n @param pool Address of the pool\n @return tokens The pool tokens, sorted in registration order\n @return tokenInfo Token info, sorted in token registration order\n @return balancesRaw Raw balances, sorted in token registration order\n @return lastLiveBalances Last saved live balances, sorted in token registration order"},"functionSelector":"67e0e076","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","nameLocation":"7795:16:44","parameters":{"id":7482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7481,"mutability":"mutable","name":"pool","nameLocation":"7829:4:44","nodeType":"VariableDeclaration","scope":7498,"src":"7821:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7480,"name":"address","nodeType":"ElementaryTypeName","src":"7821:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7811:28:44"},"returnParameters":{"id":7497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7486,"mutability":"mutable","name":"tokens","nameLocation":"7916:6:44","nodeType":"VariableDeclaration","scope":7498,"src":"7900:22:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$97896_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":7484,"nodeType":"UserDefinedTypeName","pathNode":{"id":7483,"name":"IERC20","nameLocations":["7900:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":97896,"src":"7900:6:44"},"referencedDeclaration":97896,"src":"7900:6:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"}},"id":7485,"nodeType":"ArrayTypeName","src":"7900:8:44","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$97896_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":7490,"mutability":"mutable","name":"tokenInfo","nameLocation":"7955:9:44","nodeType":"VariableDeclaration","scope":7498,"src":"7936:28:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$8453_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenInfo[]"},"typeName":{"baseType":{"id":7488,"nodeType":"UserDefinedTypeName","pathNode":{"id":7487,"name":"TokenInfo","nameLocations":["7936:9:44"],"nodeType":"IdentifierPath","referencedDeclaration":8453,"src":"7936:9:44"},"referencedDeclaration":8453,"src":"7936:9:44","typeDescriptions":{"typeIdentifier":"t_struct$_TokenInfo_$8453_storage_ptr","typeString":"struct TokenInfo"}},"id":7489,"nodeType":"ArrayTypeName","src":"7936:11:44","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenInfo_$8453_storage_$dyn_storage_ptr","typeString":"struct TokenInfo[]"}},"visibility":"internal"},{"constant":false,"id":7493,"mutability":"mutable","name":"balancesRaw","nameLocation":"7995:11:44","nodeType":"VariableDeclaration","scope":7498,"src":"7978:28:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7491,"name":"uint256","nodeType":"ElementaryTypeName","src":"7978:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7492,"nodeType":"ArrayTypeName","src":"7978:9:44","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":7496,"mutability":"mutable","name":"lastLiveBalances","nameLocation":"8037:16:44","nodeType":"VariableDeclaration","scope":7498,"src":"8020:33:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7494,"name":"uint256","nodeType":"ElementaryTypeName","src":"8020:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7495,"nodeType":"ArrayTypeName","src":"8020:9:44","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7886:177:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7507,"nodeType":"FunctionDefinition","src":"8388:108:44","nodes":[],"documentation":{"id":7499,"nodeType":"StructuredDocumentation","src":"8070:313:44","text":" @notice Gets current live balances of a given pool (fixed-point, 18 decimals), corresponding to its tokens in\n registration order.\n @param pool Address of the pool\n @return balancesLiveScaled18  Token balances after paying yield fees, applying decimal scaling and rates"},"functionSelector":"535cfd8a","implemented":false,"kind":"function","modifiers":[],"name":"getCurrentLiveBalances","nameLocation":"8397:22:44","parameters":{"id":7502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7501,"mutability":"mutable","name":"pool","nameLocation":"8428:4:44","nodeType":"VariableDeclaration","scope":7507,"src":"8420:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7500,"name":"address","nodeType":"ElementaryTypeName","src":"8420:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8419:14:44"},"returnParameters":{"id":7506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7505,"mutability":"mutable","name":"balancesLiveScaled18","nameLocation":"8474:20:44","nodeType":"VariableDeclaration","scope":7507,"src":"8457:37:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7503,"name":"uint256","nodeType":"ElementaryTypeName","src":"8457:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7504,"nodeType":"ArrayTypeName","src":"8457:9:44","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8456:39:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7516,"nodeType":"FunctionDefinition","src":"8808:79:44","nodes":[],"documentation":{"id":7508,"nodeType":"StructuredDocumentation","src":"8502:301:44","text":" @notice Gets the configuration parameters of a pool.\n @dev The `PoolConfig` contains liquidity management and other state flags, fee percentages, the pause window.\n @param pool Address of the pool\n @return poolConfig The pool configuration as a `PoolConfig` struct"},"functionSelector":"f29486a1","implemented":false,"kind":"function","modifiers":[],"name":"getPoolConfig","nameLocation":"8817:13:44","parameters":{"id":7511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7510,"mutability":"mutable","name":"pool","nameLocation":"8839:4:44","nodeType":"VariableDeclaration","scope":7516,"src":"8831:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7509,"name":"address","nodeType":"ElementaryTypeName","src":"8831:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8830:14:44"},"returnParameters":{"id":7515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7514,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7516,"src":"8868:17:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$8354_memory_ptr","typeString":"struct PoolConfig"},"typeName":{"id":7513,"nodeType":"UserDefinedTypeName","pathNode":{"id":7512,"name":"PoolConfig","nameLocations":["8868:10:44"],"nodeType":"IdentifierPath","referencedDeclaration":8354,"src":"8868:10:44"},"referencedDeclaration":8354,"src":"8868:10:44","typeDescriptions":{"typeIdentifier":"t_struct$_PoolConfig_$8354_storage_ptr","typeString":"struct PoolConfig"}},"visibility":"internal"}],"src":"8867:19:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7525,"nodeType":"FunctionDefinition","src":"9181:81:44","nodes":[],"documentation":{"id":7517,"nodeType":"StructuredDocumentation","src":"8893:283:44","text":" @notice Gets the hooks configuration parameters of a pool.\n @dev The `HooksConfig` contains flags indicating which pool hooks are implemented.\n @param pool Address of the pool\n @return hooksConfig The hooks configuration as a `HooksConfig` struct"},"functionSelector":"ce8630d4","implemented":false,"kind":"function","modifiers":[],"name":"getHooksConfig","nameLocation":"9190:14:44","parameters":{"id":7520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7519,"mutability":"mutable","name":"pool","nameLocation":"9213:4:44","nodeType":"VariableDeclaration","scope":7525,"src":"9205:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7518,"name":"address","nodeType":"ElementaryTypeName","src":"9205:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9204:14:44"},"returnParameters":{"id":7524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7525,"src":"9242:18:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$8400_memory_ptr","typeString":"struct HooksConfig"},"typeName":{"id":7522,"nodeType":"UserDefinedTypeName","pathNode":{"id":7521,"name":"HooksConfig","nameLocations":["9242:11:44"],"nodeType":"IdentifierPath","referencedDeclaration":8400,"src":"9242:11:44"},"referencedDeclaration":8400,"src":"9242:11:44","typeDescriptions":{"typeIdentifier":"t_struct$_HooksConfig_$8400_storage_ptr","typeString":"struct HooksConfig"}},"visibility":"internal"}],"src":"9241:20:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7533,"nodeType":"FunctionDefinition","src":"9466:71:44","nodes":[],"documentation":{"id":7526,"nodeType":"StructuredDocumentation","src":"9268:193:44","text":" @notice Gets the current bpt rate of a pool, by dividing the current invariant by the total supply of BPT.\n @param pool Address of the pool\n @return rate BPT rate"},"functionSelector":"4f037ee7","implemented":false,"kind":"function","modifiers":[],"name":"getBptRate","nameLocation":"9475:10:44","parameters":{"id":7529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7528,"mutability":"mutable","name":"pool","nameLocation":"9494:4:44","nodeType":"VariableDeclaration","scope":7533,"src":"9486:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7527,"name":"address","nodeType":"ElementaryTypeName","src":"9486:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9485:14:44"},"returnParameters":{"id":7532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7531,"mutability":"mutable","name":"rate","nameLocation":"9531:4:44","nodeType":"VariableDeclaration","scope":7533,"src":"9523:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7530,"name":"uint256","nodeType":"ElementaryTypeName","src":"9523:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9522:14:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7541,"nodeType":"FunctionDefinition","src":"9936:68:44","nodes":[],"documentation":{"id":7534,"nodeType":"StructuredDocumentation","src":"9768:163:44","text":" @notice Gets the total supply of a given ERC20 token.\n @param token The token address\n @return totalSupply Total supply of the token"},"functionSelector":"e4dc2aa4","implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"9945:11:44","parameters":{"id":7537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7536,"mutability":"mutable","name":"token","nameLocation":"9965:5:44","nodeType":"VariableDeclaration","scope":7541,"src":"9957:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7535,"name":"address","nodeType":"ElementaryTypeName","src":"9957:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9956:15:44"},"returnParameters":{"id":7540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7539,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7541,"src":"9995:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7538,"name":"uint256","nodeType":"ElementaryTypeName","src":"9995:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9994:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7551,"nodeType":"FunctionDefinition","src":"10243:83:44","nodes":[],"documentation":{"id":7542,"nodeType":"StructuredDocumentation","src":"10010:228:44","text":" @notice Gets the balance of an account for a given ERC20 token.\n @param token Address of the token\n @param account Address of the account\n @return balance Balance of the account for the token"},"functionSelector":"f7888aec","implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"10252:9:44","parameters":{"id":7547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7544,"mutability":"mutable","name":"token","nameLocation":"10270:5:44","nodeType":"VariableDeclaration","scope":7551,"src":"10262:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7543,"name":"address","nodeType":"ElementaryTypeName","src":"10262:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7546,"mutability":"mutable","name":"account","nameLocation":"10285:7:44","nodeType":"VariableDeclaration","scope":7551,"src":"10277:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7545,"name":"address","nodeType":"ElementaryTypeName","src":"10277:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10261:32:44"},"returnParameters":{"id":7550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7551,"src":"10317:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7548,"name":"uint256","nodeType":"ElementaryTypeName","src":"10317:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10316:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7563,"nodeType":"FunctionDefinition","src":"10631:98:44","nodes":[],"documentation":{"id":7552,"nodeType":"StructuredDocumentation","src":"10332:294:44","text":" @notice Gets the allowance of a spender for a given ERC20 token and owner.\n @param token Address of the token\n @param owner Address of the owner\n @param spender Address of the spender\n @return allowance Amount of tokens the spender is allowed to spend"},"functionSelector":"927da105","implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"10640:9:44","parameters":{"id":7559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7554,"mutability":"mutable","name":"token","nameLocation":"10658:5:44","nodeType":"VariableDeclaration","scope":7563,"src":"10650:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7553,"name":"address","nodeType":"ElementaryTypeName","src":"10650:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7556,"mutability":"mutable","name":"owner","nameLocation":"10673:5:44","nodeType":"VariableDeclaration","scope":7563,"src":"10665:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7555,"name":"address","nodeType":"ElementaryTypeName","src":"10665:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7558,"mutability":"mutable","name":"spender","nameLocation":"10688:7:44","nodeType":"VariableDeclaration","scope":7563,"src":"10680:15:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7557,"name":"address","nodeType":"ElementaryTypeName","src":"10680:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10649:47:44"},"returnParameters":{"id":7562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7563,"src":"10720:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7560,"name":"uint256","nodeType":"ElementaryTypeName","src":"10720:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10719:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7571,"nodeType":"FunctionDefinition","src":"11207:65:44","nodes":[],"documentation":{"id":7564,"nodeType":"StructuredDocumentation","src":"10955:247:44","text":" @notice Indicates whether a pool is paused.\n @dev If a pool is paused, all non-Recovery Mode state-changing operations will revert.\n @param pool The pool to be checked\n @return paused True if the pool is paused"},"functionSelector":"6c9bc732","implemented":false,"kind":"function","modifiers":[],"name":"isPoolPaused","nameLocation":"11216:12:44","parameters":{"id":7567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7566,"mutability":"mutable","name":"pool","nameLocation":"11237:4:44","nodeType":"VariableDeclaration","scope":7571,"src":"11229:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7565,"name":"address","nodeType":"ElementaryTypeName","src":"11229:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11228:14:44"},"returnParameters":{"id":7570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7571,"src":"11266:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7568,"name":"bool","nodeType":"ElementaryTypeName","src":"11266:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11265:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7585,"nodeType":"FunctionDefinition","src":"11894:96:44","nodes":[],"documentation":{"id":7572,"nodeType":"StructuredDocumentation","src":"11278:611:44","text":" @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\n @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\n the buffer period.\n @param pool The pool whose data is requested\n @return paused True if the Pool is paused\n @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\n @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\n @return pauseManager The pause manager, or the zero address"},"functionSelector":"15e32046","implemented":false,"kind":"function","modifiers":[],"name":"getPoolPausedState","nameLocation":"11903:18:44","parameters":{"id":7575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7574,"mutability":"mutable","name":"pool","nameLocation":"11930:4:44","nodeType":"VariableDeclaration","scope":7585,"src":"11922:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7573,"name":"address","nodeType":"ElementaryTypeName","src":"11922:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11921:14:44"},"returnParameters":{"id":7584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7577,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7585,"src":"11959:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7576,"name":"bool","nodeType":"ElementaryTypeName","src":"11959:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7585,"src":"11965:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7578,"name":"uint32","nodeType":"ElementaryTypeName","src":"11965:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7585,"src":"11973:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7580,"name":"uint32","nodeType":"ElementaryTypeName","src":"11973:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7585,"src":"11981:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7582,"name":"address","nodeType":"ElementaryTypeName","src":"11981:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11958:31:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7596,"nodeType":"FunctionDefinition","src":"12591:95:44","nodes":[],"documentation":{"id":7586,"nodeType":"StructuredDocumentation","src":"12207:379:44","text":" @notice Returns the accumulated swap fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return swapFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"85e0b999","implemented":false,"kind":"function","modifiers":[],"name":"getAggregateSwapFeeAmount","nameLocation":"12600:25:44","parameters":{"id":7592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7588,"mutability":"mutable","name":"pool","nameLocation":"12634:4:44","nodeType":"VariableDeclaration","scope":7596,"src":"12626:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7587,"name":"address","nodeType":"ElementaryTypeName","src":"12626:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7591,"mutability":"mutable","name":"token","nameLocation":"12647:5:44","nodeType":"VariableDeclaration","scope":7596,"src":"12640:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"},"typeName":{"id":7590,"nodeType":"UserDefinedTypeName","pathNode":{"id":7589,"name":"IERC20","nameLocations":["12640:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":97896,"src":"12640:6:44"},"referencedDeclaration":97896,"src":"12640:6:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"12625:28:44"},"returnParameters":{"id":7595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7596,"src":"12677:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7593,"name":"uint256","nodeType":"ElementaryTypeName","src":"12677:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12676:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7607,"nodeType":"FunctionDefinition","src":"13078:96:44","nodes":[],"documentation":{"id":7597,"nodeType":"StructuredDocumentation","src":"12692:381:44","text":" @notice Returns the accumulated yield fees (including aggregate fees) in `token` collected by the pool.\n @param pool The address of the pool for which aggregate fees have been collected\n @param token The address of the token in which fees have been accumulated\n @return yieldFeeAmount The total amount of fees accumulated in the specified token"},"functionSelector":"00fdfa13","implemented":false,"kind":"function","modifiers":[],"name":"getAggregateYieldFeeAmount","nameLocation":"13087:26:44","parameters":{"id":7603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7599,"mutability":"mutable","name":"pool","nameLocation":"13122:4:44","nodeType":"VariableDeclaration","scope":7607,"src":"13114:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7598,"name":"address","nodeType":"ElementaryTypeName","src":"13114:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7602,"mutability":"mutable","name":"token","nameLocation":"13135:5:44","nodeType":"VariableDeclaration","scope":7607,"src":"13128:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"},"typeName":{"id":7601,"nodeType":"UserDefinedTypeName","pathNode":{"id":7600,"name":"IERC20","nameLocations":["13128:6:44"],"nodeType":"IdentifierPath","referencedDeclaration":97896,"src":"13128:6:44"},"referencedDeclaration":97896,"src":"13128:6:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$97896","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"13113:28:44"},"returnParameters":{"id":7606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7607,"src":"13165:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7604,"name":"uint256","nodeType":"ElementaryTypeName","src":"13165:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13164:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7615,"nodeType":"FunctionDefinition","src":"13456:82:44","nodes":[],"documentation":{"id":7608,"nodeType":"StructuredDocumentation","src":"13180:271:44","text":" @notice Fetches the static swap fee percentage for a given pool.\n @param pool The address of the pool whose static swap fee percentage is being queried\n @return swapFeePercentage The current static swap fee percentage for the specified pool"},"functionSelector":"b45090f9","implemented":false,"kind":"function","modifiers":[],"name":"getStaticSwapFeePercentage","nameLocation":"13465:26:44","parameters":{"id":7611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7610,"mutability":"mutable","name":"pool","nameLocation":"13500:4:44","nodeType":"VariableDeclaration","scope":7615,"src":"13492:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7609,"name":"address","nodeType":"ElementaryTypeName","src":"13492:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13491:14:44"},"returnParameters":{"id":7614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7615,"src":"13529:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7612,"name":"uint256","nodeType":"ElementaryTypeName","src":"13529:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13528:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7624,"nodeType":"FunctionDefinition","src":"13835:91:44","nodes":[],"documentation":{"id":7616,"nodeType":"StructuredDocumentation","src":"13544:286:44","text":" @notice Fetches the role accounts for a given pool (pause manager, swap manager, pool creator)\n @param pool The address of the pool whose roles are being queried\n @return roleAccounts A struct containing the role accounts for the pool (or 0 if unassigned)"},"functionSelector":"e9ddeb26","implemented":false,"kind":"function","modifiers":[],"name":"getPoolRoleAccounts","nameLocation":"13844:19:44","parameters":{"id":7619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7618,"mutability":"mutable","name":"pool","nameLocation":"13872:4:44","nodeType":"VariableDeclaration","scope":7624,"src":"13864:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7617,"name":"address","nodeType":"ElementaryTypeName","src":"13864:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13863:14:44"},"returnParameters":{"id":7623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7624,"src":"13901:23:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$8426_memory_ptr","typeString":"struct PoolRoleAccounts"},"typeName":{"id":7621,"nodeType":"UserDefinedTypeName","pathNode":{"id":7620,"name":"PoolRoleAccounts","nameLocations":["13901:16:44"],"nodeType":"IdentifierPath","referencedDeclaration":8426,"src":"13901:16:44"},"referencedDeclaration":8426,"src":"13901:16:44","typeDescriptions":{"typeIdentifier":"t_struct$_PoolRoleAccounts_$8426_storage_ptr","typeString":"struct PoolRoleAccounts"}},"visibility":"internal"}],"src":"13900:25:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7635,"nodeType":"FunctionDefinition","src":"14289:143:44","nodes":[],"documentation":{"id":7625,"nodeType":"StructuredDocumentation","src":"13932:352:44","text":" @notice Query the current dynamic swap fee of a pool, given a set of swap parameters.\n @dev Reverts if the hook doesn't return the success flag set to `true`.\n @param pool The pool\n @param swapParams The swap parameters used to compute the fee\n @return dynamicSwapFeePercentage The dynamic swap fee percentage"},"functionSelector":"4d472bdd","implemented":false,"kind":"function","modifiers":[],"name":"computeDynamicSwapFeePercentage","nameLocation":"14298:31:44","parameters":{"id":7631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7627,"mutability":"mutable","name":"pool","nameLocation":"14347:4:44","nodeType":"VariableDeclaration","scope":7635,"src":"14339:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7626,"name":"address","nodeType":"ElementaryTypeName","src":"14339:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7630,"mutability":"mutable","name":"swapParams","nameLocation":"14383:10:44","nodeType":"VariableDeclaration","scope":7635,"src":"14361:32:44","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$8521_memory_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":7629,"nodeType":"UserDefinedTypeName","pathNode":{"id":7628,"name":"PoolSwapParams","nameLocations":["14361:14:44"],"nodeType":"IdentifierPath","referencedDeclaration":8521,"src":"14361:14:44"},"referencedDeclaration":8521,"src":"14361:14:44","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$8521_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"}],"src":"14329:70:44"},"returnParameters":{"id":7634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7633,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7635,"src":"14423:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7632,"name":"uint256","nodeType":"ElementaryTypeName","src":"14423:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14422:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7643,"nodeType":"FunctionDefinition","src":"14958:73:44","nodes":[],"documentation":{"id":7636,"nodeType":"StructuredDocumentation","src":"14659:294:44","text":" @notice Checks whether a pool is in Recovery Mode.\n @dev Recovery Mode enables a safe proportional withdrawal path, with no external calls.\n @param pool Address of the pool to check\n @return recoveryMode True if the pool is in Recovery Mode, false otherwise"},"functionSelector":"be7d628a","implemented":false,"kind":"function","modifiers":[],"name":"isPoolInRecoveryMode","nameLocation":"14967:20:44","parameters":{"id":7639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7638,"mutability":"mutable","name":"pool","nameLocation":"14996:4:44","nodeType":"VariableDeclaration","scope":7643,"src":"14988:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7637,"name":"address","nodeType":"ElementaryTypeName","src":"14988:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14987:14:44"},"returnParameters":{"id":7642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7643,"src":"15025:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7640,"name":"bool","nodeType":"ElementaryTypeName","src":"15025:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15024:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7649,"nodeType":"FunctionDefinition","src":"15820:56:44","nodes":[],"documentation":{"id":7644,"nodeType":"StructuredDocumentation","src":"15252:563:44","text":" @notice Checks if the queries enabled on the Vault.\n @dev This is a one-way switch. Once queries are disabled, they can never be re-enabled.\n The query functions rely on a specific EVM feature to detect static calls. Query operations are exempt from\n settlement constraints, so it's critical that no state changes can occur. We retain the ability to disable\n queries in the unlikely event that EVM changes violate its assumptions (perhaps on an L2).\n @return queryDisabled If true, then queries are disabled"},"functionSelector":"b4aef0ab","implemented":false,"kind":"function","modifiers":[],"name":"isQueryDisabled","nameLocation":"15829:15:44","parameters":{"id":7645,"nodeType":"ParameterList","parameters":[],"src":"15844:2:44"},"returnParameters":{"id":7648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7647,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7649,"src":"15870:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7646,"name":"bool","nodeType":"ElementaryTypeName","src":"15870:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15869:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7655,"nodeType":"FunctionDefinition","src":"16395:64:44","nodes":[],"documentation":{"id":7650,"nodeType":"StructuredDocumentation","src":"16097:293:44","text":" @notice Returns the Vault's pause window end time.\n @dev This value is immutable, and represents the timestamp after which the Vault can no longer be paused\n by governance.\n @return pauseWindowEndTime The timestamp when the Vault's pause window ends"},"functionSelector":"8a8d123a","implemented":false,"kind":"function","modifiers":[],"name":"getPauseWindowEndTime","nameLocation":"16404:21:44","parameters":{"id":7651,"nodeType":"ParameterList","parameters":[],"src":"16425:2:44"},"returnParameters":{"id":7654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7655,"src":"16451:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7652,"name":"uint32","nodeType":"ElementaryTypeName","src":"16451:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"16450:8:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7661,"nodeType":"FunctionDefinition","src":"16844:66:44","nodes":[],"documentation":{"id":7656,"nodeType":"StructuredDocumentation","src":"16465:374:44","text":" @notice Returns the Vault's buffer period duration.\n @dev This value is immutable. It represents the period during which, if paused, the Vault will remain paused.\n This ensures there is time available to address whatever issue caused the Vault to be paused.\n @return bufferPeriodDuration The length of the buffer period in seconds"},"functionSelector":"20c1fb7a","implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodDuration","nameLocation":"16853:23:44","parameters":{"id":7657,"nodeType":"ParameterList","parameters":[],"src":"16876:2:44"},"returnParameters":{"id":7660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7661,"src":"16902:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7658,"name":"uint32","nodeType":"ElementaryTypeName","src":"16902:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"16901:8:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7667,"nodeType":"FunctionDefinition","src":"17195:65:44","nodes":[],"documentation":{"id":7662,"nodeType":"StructuredDocumentation","src":"16916:274:44","text":" @notice Returns the Vault's buffer period end time.\n @dev This value is immutable. If already paused, the Vault can be unpaused until this timestamp.\n @return bufferPeriodEndTime The timestamp after which the Vault remains permanently unpaused"},"functionSelector":"cd51c12f","implemented":false,"kind":"function","modifiers":[],"name":"getBufferPeriodEndTime","nameLocation":"17204:22:44","parameters":{"id":7663,"nodeType":"ParameterList","parameters":[],"src":"17226:2:44"},"returnParameters":{"id":7666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7665,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7667,"src":"17252:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7664,"name":"uint32","nodeType":"ElementaryTypeName","src":"17252:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"17251:8:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7673,"nodeType":"FunctionDefinition","src":"17464:64:44","nodes":[],"documentation":{"id":7668,"nodeType":"StructuredDocumentation","src":"17266:193:44","text":" @notice Get the minimum number of tokens in a pool.\n @dev We expect the vast majority of pools to be 2-token.\n @return minTokens The minimum token count of a pool"},"functionSelector":"a8175b27","implemented":false,"kind":"function","modifiers":[],"name":"getMinimumPoolTokens","nameLocation":"17473:20:44","parameters":{"id":7669,"nodeType":"ParameterList","parameters":[],"src":"17493:2:44"},"returnParameters":{"id":7672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7673,"src":"17519:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7670,"name":"uint256","nodeType":"ElementaryTypeName","src":"17519:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17518:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7679,"nodeType":"FunctionDefinition","src":"17668:64:44","nodes":[],"documentation":{"id":7674,"nodeType":"StructuredDocumentation","src":"17534:129:44","text":" @notice Get the maximum number of tokens in a pool.\n @return maxTokens The maximum token count of a pool"},"functionSelector":"2e42f4d5","implemented":false,"kind":"function","modifiers":[],"name":"getMaximumPoolTokens","nameLocation":"17677:20:44","parameters":{"id":7675,"nodeType":"ParameterList","parameters":[],"src":"17697:2:44"},"returnParameters":{"id":7678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7677,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7679,"src":"17723:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7676,"name":"uint256","nodeType":"ElementaryTypeName","src":"17723:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17722:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7685,"nodeType":"FunctionDefinition","src":"18034:65:44","nodes":[],"documentation":{"id":7680,"nodeType":"StructuredDocumentation","src":"17738:291:44","text":" @notice Get the minimum trade amount in a pool operation.\n @dev This limit is applied to the 18-decimal \"upscaled\" amount in any operation (swap, add/remove liquidity).\n @return minimumTradeAmount The minimum trade amount as an 18-decimal floating point number"},"functionSelector":"e2cb0ba0","implemented":false,"kind":"function","modifiers":[],"name":"getMinimumTradeAmount","nameLocation":"18043:21:44","parameters":{"id":7681,"nodeType":"ParameterList","parameters":[],"src":"18064:2:44"},"returnParameters":{"id":7684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7683,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7685,"src":"18090:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7682,"name":"uint256","nodeType":"ElementaryTypeName","src":"18090:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18089:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7691,"nodeType":"FunctionDefinition","src":"18373:64:44","nodes":[],"documentation":{"id":7686,"nodeType":"StructuredDocumentation","src":"18105:263:44","text":" @notice Get the minimum amount that can be wrapped by an ERC4626 token buffer by the Vault.\n @dev This limit is applied to native decimal values, and guards against rounding errors.\n @return minimumWrapAmount The minimum wrap amount"},"functionSelector":"53956aa2","implemented":false,"kind":"function","modifiers":[],"name":"getMinimumWrapAmount","nameLocation":"18382:20:44","parameters":{"id":7687,"nodeType":"ParameterList","parameters":[],"src":"18402:2:44"},"returnParameters":{"id":7690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7689,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7691,"src":"18428:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7688,"name":"uint256","nodeType":"ElementaryTypeName","src":"18428:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18427:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7697,"nodeType":"FunctionDefinition","src":"18883:69:44","nodes":[],"documentation":{"id":7692,"nodeType":"StructuredDocumentation","src":"18443:435:44","text":" @notice Get the minimum total supply of pool tokens (BPT) for an initialized pool.\n @dev This prevents pools from being completely drained. When the pool is initialized, this minimum amount of BPT\n is minted to the zero address. This is an 18-decimal floating point number; BPT are always 18 decimals.\n @return minimumTotalSupply The minimum total supply a pool can have after initialization"},"functionSelector":"d0965a6b","implemented":false,"kind":"function","modifiers":[],"name":"getPoolMinimumTotalSupply","nameLocation":"18892:25:44","parameters":{"id":7693,"nodeType":"ParameterList","parameters":[],"src":"18917:2:44"},"returnParameters":{"id":7696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7695,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7697,"src":"18943:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7694,"name":"uint256","nodeType":"ElementaryTypeName","src":"18943:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18942:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7703,"nodeType":"FunctionDefinition","src":"19459:71:44","nodes":[],"documentation":{"id":7698,"nodeType":"StructuredDocumentation","src":"18958:496:44","text":" @notice Get the minimum total supply of an ERC4626 wrapped token buffer in the Vault.\n @dev This prevents buffers from being completely drained. When the buffer is initialized, this minimum number\n of shares is added to the shares resulting from the initial deposit. Buffer total supply accounting is internal\n to the Vault, as buffers are not tokenized.\n @return minimumTotalSupply The minimum total supply a buffer can have after initialization"},"functionSelector":"26a8a991","implemented":false,"kind":"function","modifiers":[],"name":"getBufferMinimumTotalSupply","nameLocation":"19468:27:44","parameters":{"id":7699,"nodeType":"ParameterList","parameters":[],"src":"19495:2:44"},"returnParameters":{"id":7702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7701,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7703,"src":"19521:7:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7700,"name":"uint256","nodeType":"ElementaryTypeName","src":"19521:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19520:9:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7709,"nodeType":"FunctionDefinition","src":"19974:54:44","nodes":[],"documentation":{"id":7704,"nodeType":"StructuredDocumentation","src":"19757:212:44","text":" @notice Indicates whether the Vault is paused.\n @dev If the Vault is paused, all non-Recovery Mode state-changing operations will revert.\n @return paused True if the Vault is paused"},"functionSelector":"098401f5","implemented":false,"kind":"function","modifiers":[],"name":"isVaultPaused","nameLocation":"19983:13:44","parameters":{"id":7705,"nodeType":"ParameterList","parameters":[],"src":"19996:2:44"},"returnParameters":{"id":7708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7709,"src":"20022:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7706,"name":"bool","nodeType":"ElementaryTypeName","src":"20022:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20021:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7719,"nodeType":"FunctionDefinition","src":"20389:76:44","nodes":[],"documentation":{"id":7710,"nodeType":"StructuredDocumentation","src":"20034:350:44","text":" @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\n @return paused True if the Vault is paused\n @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\n @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"},"functionSelector":"85c8c015","implemented":false,"kind":"function","modifiers":[],"name":"getVaultPausedState","nameLocation":"20398:19:44","parameters":{"id":7711,"nodeType":"ParameterList","parameters":[],"src":"20417:2:44"},"returnParameters":{"id":7718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7719,"src":"20443:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7712,"name":"bool","nodeType":"ElementaryTypeName","src":"20443:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":7715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7719,"src":"20449:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7714,"name":"uint32","nodeType":"ElementaryTypeName","src":"20449:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":7717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7719,"src":"20457:6:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":7716,"name":"uint32","nodeType":"ElementaryTypeName","src":"20457:6:44","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"20442:22:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7729,"nodeType":"FunctionDefinition","src":"21514:160:44","nodes":[],"documentation":{"id":7720,"nodeType":"StructuredDocumentation","src":"20682:827:44","text":" @notice Gets the aggregate swap and yield fee percentages for a pool.\n @dev These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`.\n These data are accessible as part of the `PoolConfig` (accessible through `getPoolConfig`), and also through\n the `IPoolInfo` on the pool itself. Standard Balancer pools implement this interface, but custom pools are not\n required to. We add this as a convenience function with the same interface, but it will fetch from the Vault\n directly to ensure it is always supported.\n @param pool Address of the pool\n @return aggregateSwapFeePercentage The aggregate percentage fee applied to swaps\n @return aggregateYieldFeePercentage The aggregate percentage fee applied to yield"},"functionSelector":"295f0540","implemented":false,"kind":"function","modifiers":[],"name":"getAggregateFeePercentages","nameLocation":"21523:26:44","parameters":{"id":7723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7722,"mutability":"mutable","name":"pool","nameLocation":"21567:4:44","nodeType":"VariableDeclaration","scope":7729,"src":"21559:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7721,"name":"address","nodeType":"ElementaryTypeName","src":"21559:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21549:28:44"},"returnParameters":{"id":7728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7725,"mutability":"mutable","name":"aggregateSwapFeePercentage","nameLocation":"21609:26:44","nodeType":"VariableDeclaration","scope":7729,"src":"21601:34:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7724,"name":"uint256","nodeType":"ElementaryTypeName","src":"21601:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7727,"mutability":"mutable","name":"aggregateYieldFeePercentage","nameLocation":"21645:27:44","nodeType":"VariableDeclaration","scope":7729,"src":"21637:35:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7726,"name":"uint256","nodeType":"ElementaryTypeName","src":"21637:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21600:73:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7735,"nodeType":"FunctionDefinition","src":"21926:53:44","nodes":[],"documentation":{"id":7730,"nodeType":"StructuredDocumentation","src":"21680:241:44","text":" @notice Collects accumulated aggregate swap and yield fees for the specified pool.\n @dev Fees are sent to the ProtocolFeeController address.\n @param pool The pool on which all aggregate fees should be collected"},"functionSelector":"8f4ab9ca","implemented":false,"kind":"function","modifiers":[],"name":"collectAggregateFees","nameLocation":"21935:20:44","parameters":{"id":7733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7732,"mutability":"mutable","name":"pool","nameLocation":"21964:4:44","nodeType":"VariableDeclaration","scope":7735,"src":"21956:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7731,"name":"address","nodeType":"ElementaryTypeName","src":"21956:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21955:14:44"},"returnParameters":{"id":7734,"nodeType":"ParameterList","parameters":[],"src":"21978:0:44"},"scope":7782,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":7741,"nodeType":"FunctionDefinition","src":"22516:57:44","nodes":[],"documentation":{"id":7736,"nodeType":"StructuredDocumentation","src":"22206:305:44","text":" @notice Indicates whether the Vault buffers are paused.\n @dev When buffers are paused, all buffer operations (i.e., calls on the Router with `isBuffer` true)\n will revert. This operation is reversible.\n @return buffersPaused True if the Vault buffers are paused"},"functionSelector":"55cba7fe","implemented":false,"kind":"function","modifiers":[],"name":"areBuffersPaused","nameLocation":"22525:16:44","parameters":{"id":7737,"nodeType":"ParameterList","parameters":[],"src":"22541:2:44"},"returnParameters":{"id":7740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":7741,"src":"22567:4:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7738,"name":"bool","nodeType":"ElementaryTypeName","src":"22567:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"22566:6:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7750,"nodeType":"FunctionDefinition","src":"22966:95:44","nodes":[],"documentation":{"id":7742,"nodeType":"StructuredDocumentation","src":"22579:382:44","text":" @notice Returns the asset registered for a given wrapped token.\n @dev The asset can never change after buffer initialization.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingToken Address of the underlying token registered for the wrapper; `address(0)` if the buffer\n has not been initialized."},"functionSelector":"0387587d","implemented":false,"kind":"function","modifiers":[],"name":"getBufferAsset","nameLocation":"22975:14:44","parameters":{"id":7746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7745,"mutability":"mutable","name":"wrappedToken","nameLocation":"22999:12:44","nodeType":"VariableDeclaration","scope":7750,"src":"22990:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"},"typeName":{"id":7744,"nodeType":"UserDefinedTypeName","pathNode":{"id":7743,"name":"IERC4626","nameLocations":["22990:8:44"],"nodeType":"IdentifierPath","referencedDeclaration":97037,"src":"22990:8:44"},"referencedDeclaration":97037,"src":"22990:8:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"22989:23:44"},"returnParameters":{"id":7749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7748,"mutability":"mutable","name":"underlyingToken","nameLocation":"23044:15:44","nodeType":"VariableDeclaration","scope":7750,"src":"23036:23:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7747,"name":"address","nodeType":"ElementaryTypeName","src":"23036:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23035:25:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7761,"nodeType":"FunctionDefinition","src":"23513:143:44","nodes":[],"documentation":{"id":7751,"nodeType":"StructuredDocumentation","src":"23067:441:44","text":" @notice Returns the shares (internal buffer BPT) of a liquidity owner: a user that deposited assets\n in the buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @param liquidityOwner Address of the user that owns liquidity in the wrapped token's buffer\n @return ownerShares Amount of shares allocated to the liquidity owner, in native underlying token decimals"},"functionSelector":"9385e39a","implemented":false,"kind":"function","modifiers":[],"name":"getBufferOwnerShares","nameLocation":"23522:20:44","parameters":{"id":7757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7754,"mutability":"mutable","name":"wrappedToken","nameLocation":"23561:12:44","nodeType":"VariableDeclaration","scope":7761,"src":"23552:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"},"typeName":{"id":7753,"nodeType":"UserDefinedTypeName","pathNode":{"id":7752,"name":"IERC4626","nameLocations":["23552:8:44"],"nodeType":"IdentifierPath","referencedDeclaration":97037,"src":"23552:8:44"},"referencedDeclaration":97037,"src":"23552:8:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"}},"visibility":"internal"},{"constant":false,"id":7756,"mutability":"mutable","name":"liquidityOwner","nameLocation":"23591:14:44","nodeType":"VariableDeclaration","scope":7761,"src":"23583:22:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7755,"name":"address","nodeType":"ElementaryTypeName","src":"23583:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"23542:69:44"},"returnParameters":{"id":7760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7759,"mutability":"mutable","name":"ownerShares","nameLocation":"23643:11:44","nodeType":"VariableDeclaration","scope":7761,"src":"23635:19:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7758,"name":"uint256","nodeType":"ElementaryTypeName","src":"23635:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23634:21:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7770,"nodeType":"FunctionDefinition","src":"23948:98:44","nodes":[],"documentation":{"id":7762,"nodeType":"StructuredDocumentation","src":"23662:281:44","text":" @notice Returns the supply shares (internal buffer BPT) of the ERC4626 buffer.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return bufferShares Amount of supply shares of the buffer, in native underlying token decimals"},"functionSelector":"f2784e07","implemented":false,"kind":"function","modifiers":[],"name":"getBufferTotalShares","nameLocation":"23957:20:44","parameters":{"id":7766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7765,"mutability":"mutable","name":"wrappedToken","nameLocation":"23987:12:44","nodeType":"VariableDeclaration","scope":7770,"src":"23978:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"},"typeName":{"id":7764,"nodeType":"UserDefinedTypeName","pathNode":{"id":7763,"name":"IERC4626","nameLocations":["23978:8:44"],"nodeType":"IdentifierPath","referencedDeclaration":97037,"src":"23978:8:44"},"referencedDeclaration":97037,"src":"23978:8:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"23977:23:44"},"returnParameters":{"id":7769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7768,"mutability":"mutable","name":"bufferShares","nameLocation":"24032:12:44","nodeType":"VariableDeclaration","scope":7770,"src":"24024:20:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7767,"name":"uint256","nodeType":"ElementaryTypeName","src":"24024:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24023:22:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7781,"nodeType":"FunctionDefinition","src":"24489:143:44","nodes":[],"documentation":{"id":7771,"nodeType":"StructuredDocumentation","src":"24052:432:44","text":" @notice Returns the amount of underlying and wrapped tokens deposited in the internal buffer of the Vault.\n @param wrappedToken Address of the wrapped token that implements IERC4626\n @return underlyingBalanceRaw Amount of underlying tokens deposited into the buffer, in native token decimals\n @return wrappedBalanceRaw Amount of wrapped tokens deposited into the buffer, in native token decimals"},"functionSelector":"4021fe0f","implemented":false,"kind":"function","modifiers":[],"name":"getBufferBalance","nameLocation":"24498:16:44","parameters":{"id":7775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7774,"mutability":"mutable","name":"wrappedToken","nameLocation":"24533:12:44","nodeType":"VariableDeclaration","scope":7781,"src":"24524:21:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"},"typeName":{"id":7773,"nodeType":"UserDefinedTypeName","pathNode":{"id":7772,"name":"IERC4626","nameLocations":["24524:8:44"],"nodeType":"IdentifierPath","referencedDeclaration":97037,"src":"24524:8:44"},"referencedDeclaration":97037,"src":"24524:8:44","typeDescriptions":{"typeIdentifier":"t_contract$_IERC4626_$97037","typeString":"contract IERC4626"}},"visibility":"internal"}],"src":"24514:37:44"},"returnParameters":{"id":7780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7777,"mutability":"mutable","name":"underlyingBalanceRaw","nameLocation":"24583:20:44","nodeType":"VariableDeclaration","scope":7781,"src":"24575:28:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7776,"name":"uint256","nodeType":"ElementaryTypeName","src":"24575:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7779,"mutability":"mutable","name":"wrappedBalanceRaw","nameLocation":"24613:17:44","nodeType":"VariableDeclaration","scope":7781,"src":"24605:25:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7778,"name":"uint256","nodeType":"ElementaryTypeName","src":"24605:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24574:57:44"},"scope":7782,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IVaultExplorer","contractDependencies":[],"contractKind":"interface","documentation":{"id":7358,"nodeType":"StructuredDocumentation","src":"338:856:44","text":" @notice Helper contract that exposes the full permissionless Vault interface.\n @dev Since the Vault is split across three contracts using the Proxy pattern, there is not much on the Vault\n contract itself that can be called directly, especially since it is designed to primarily use a single entrypoint\n for liquidity operations, invoked through a Router. This is unhelpful for off-chain processes (e.g., Etherscan).\n The proxy contracts (`VaultExtension` and `VaultAdmin`) can only be delegate-called through the main Vault, so\n although the functions are visible off-chain, they cannot be called from Etherscan.\n The `VaultExplorer` performs the delegate calls, in order to expose the entire Vault interface in a user-friendly\n manner. It exposes all the \"getters,\" plus permissionless write operations (e.g., fee collection)."},"fullyImplemented":false,"linearizedBaseContracts":[7782],"name":"IVaultExplorer","nameLocation":"1205:14:44","scope":7783,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0-or-later"},"id":44}