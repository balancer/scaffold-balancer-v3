{"abi":[{"type":"function","name":"getAggregateFeePercentages","inputs":[],"outputs":[{"name":"aggregateSwapFeePercentage","type":"uint256","internalType":"uint256"},{"name":"aggregateYieldFeePercentage","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCurrentLiveBalances","inputs":[],"outputs":[{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getStaticSwapFeePercentage","inputs":[],"outputs":[{"name":"staticSwapFeePercentage","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTokenInfo","inputs":[],"outputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"tokenInfo","type":"tuple[]","internalType":"struct TokenInfo[]","components":[{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"paysYieldFees","type":"bool","internalType":"bool"}]},{"name":"balancesRaw","type":"uint256[]","internalType":"uint256[]"},{"name":"lastBalancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getTokens","inputs":[],"outputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getAggregateFeePercentages()":"81fa807c","getCurrentLiveBalances()":"b156aa0a","getStaticSwapFeePercentage()":"d335b0cf","getTokenInfo()":"abb1dc44","getTokens()":"aa6ca808"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getAggregateFeePercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aggregateSwapFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateYieldFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLiveBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastBalancesLiveScaled18\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAggregateFeePercentages()\":{\"details\":\"These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`.\",\"returns\":{\"aggregateSwapFeePercentage\":\"The aggregate percentage fee applied to swaps\",\"aggregateYieldFeePercentage\":\"The aggregate percentage fee applied to yield\"}},\"getCurrentLiveBalances()\":{\"details\":\"Note that live balances will not necessarily be accurate if the pool is in Recovery Mode. Withdrawals in Recovery Mode do not make external calls (including those necessary for updating live balances), so if there are withdrawals, raw and live balances will be out of sync until Recovery Mode is disabled.\",\"returns\":{\"balancesLiveScaled18\":\"Token balances after paying yield fees, applying decimal scaling and rates\"}},\"getStaticSwapFeePercentage()\":{\"returns\":{\"staticSwapFeePercentage\":\"18-decimal FP value of the static swap fee percentage\"}},\"getTokenInfo()\":{\"returns\":{\"balancesRaw\":\"Current native decimal balances of the pool tokens, sorted in pool registration order\",\"lastBalancesLiveScaled18\":\"Last saved live balances, sorted in token registration order\",\"tokenInfo\":\"Token info structs (type, rate provider, yield flag), sorted in pool registration order\",\"tokens\":\"Pool tokens, sorted in pool registration order\"}},\"getTokens()\":{\"returns\":{\"tokens\":\"List of tokens in the pool, sorted in registration order\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAggregateFeePercentages()\":{\"notice\":\"Gets the aggregate swap and yield fee percentages for a pool.\"},\"getCurrentLiveBalances()\":{\"notice\":\"Gets the current live balances of the pool as fixed point, 18-decimal numbers.\"},\"getStaticSwapFeePercentage()\":{\"notice\":\"Fetches the static swap fee percentage for the pool.\"},\"getTokenInfo()\":{\"notice\":\"Gets the raw data for the pool: tokens, token info, raw balances, and last live balances.\"},\"getTokens()\":{\"notice\":\"Gets the tokens registered in the pool.\"}},\"notice\":\"Convenience interface for pools, to get easy access to information stored in the Vault. Intended mostly for off-chain requests; pools do not need to implement this to work properly.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-utils/IPoolInfo.sol\":\"IPoolInfo\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-utils/IPoolInfo.sol\":{\"keccak256\":\"0x40f83731186c899fa827735566fec57c58e007da69dc22aa7e1eaf1563032167\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c36c0244a52781d45175906837ba53dfa3e74dae8efc053b67dc1b91fe92a02f\",\"dweb:/ipfs/Qma7aTFwzdpJy1p1BqNmCAKJGpv49bFWamM58s2iy9vQ7g\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452\",\"dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3\",\"dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf\",\"dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323\",\"dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"getAggregateFeePercentages","outputs":[{"internalType":"uint256","name":"aggregateSwapFeePercentage","type":"uint256"},{"internalType":"uint256","name":"aggregateYieldFeePercentage","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getCurrentLiveBalances","outputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"staticSwapFeePercentage","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"struct TokenInfo[]","name":"tokenInfo","type":"tuple[]","components":[{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}]},{"internalType":"uint256[]","name":"balancesRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"lastBalancesLiveScaled18","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}]}],"devdoc":{"kind":"dev","methods":{"getAggregateFeePercentages()":{"details":"These are determined by the current protocol and pool creator fees, set in the `ProtocolFeeController`.","returns":{"aggregateSwapFeePercentage":"The aggregate percentage fee applied to swaps","aggregateYieldFeePercentage":"The aggregate percentage fee applied to yield"}},"getCurrentLiveBalances()":{"details":"Note that live balances will not necessarily be accurate if the pool is in Recovery Mode. Withdrawals in Recovery Mode do not make external calls (including those necessary for updating live balances), so if there are withdrawals, raw and live balances will be out of sync until Recovery Mode is disabled.","returns":{"balancesLiveScaled18":"Token balances after paying yield fees, applying decimal scaling and rates"}},"getStaticSwapFeePercentage()":{"returns":{"staticSwapFeePercentage":"18-decimal FP value of the static swap fee percentage"}},"getTokenInfo()":{"returns":{"balancesRaw":"Current native decimal balances of the pool tokens, sorted in pool registration order","lastBalancesLiveScaled18":"Last saved live balances, sorted in token registration order","tokenInfo":"Token info structs (type, rate provider, yield flag), sorted in pool registration order","tokens":"Pool tokens, sorted in pool registration order"}},"getTokens()":{"returns":{"tokens":"List of tokens in the pool, sorted in registration order"}}},"version":1},"userdoc":{"kind":"user","methods":{"getAggregateFeePercentages()":{"notice":"Gets the aggregate swap and yield fee percentages for a pool."},"getCurrentLiveBalances()":{"notice":"Gets the current live balances of the pool as fixed point, 18-decimal numbers."},"getStaticSwapFeePercentage()":{"notice":"Fetches the static swap fee percentage for the pool."},"getTokenInfo()":{"notice":"Gets the raw data for the pool: tokens, token info, raw balances, and last live balances."},"getTokens()":{"notice":"Gets the tokens registered in the pool."}},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-utils/IPoolInfo.sol":"IPoolInfo"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/pool-utils/IPoolInfo.sol":{"keccak256":"0x40f83731186c899fa827735566fec57c58e007da69dc22aa7e1eaf1563032167","urls":["bzz-raw://c36c0244a52781d45175906837ba53dfa3e74dae8efc053b67dc1b91fe92a02f","dweb:/ipfs/Qma7aTFwzdpJy1p1BqNmCAKJGpv49bFWamM58s2iy9vQ7g"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"keccak256":"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906","urls":["bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452","dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol":{"keccak256":"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3","urls":["bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3","dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf"],"license":"GPL-3.0-or-later"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06","urls":["bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf","dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"],"license":"MIT"}},"version":1},"id":15}