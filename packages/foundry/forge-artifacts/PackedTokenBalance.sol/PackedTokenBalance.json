{"abi":[{"type":"error","name":"BalanceOverflow","inputs":[]}],"bytecode":{"object":"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220268b23f4ea36bef61a0bf3ef5636dc4372243943c4fc3b5418acbc65fe3e8ac164736f6c63430008180033","sourceMap":"982:2125:50:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;982:2125:50;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220268b23f4ea36bef61a0bf3ef5636dc4372243943c4fc3b5418acbc65fe3e8ac164736f6c63430008180033","sourceMap":"982:2125:50:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BalanceOverflow\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"We could use a Solidity struct to pack balance values together in a single storage slot, but unfortunately Solidity only allows for structs to live in either storage, calldata or memory. Because a memory struct still takes up a slot in the stack (to store its memory location), and because the entire balance fits in a single stack slot (two 128 bit values), using memory is strictly less gas performant. Therefore, we do manual packing and unpacking. We could also use custom types now, but given the simplicity here, and the existing EnumerableMap type, it seemed easier to leave it as a bytes32.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"BalanceOverflow()\":[{\"notice\":\"One of the balances is above the maximum value that can be stored.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"This library represents a data structure for packing a token's current raw and derived balances. A derived balance can be the \\\"last\\\" live balance scaled18 of the raw token, or the balance of the wrapped version of the token in a vault buffer, among others.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/solidity-utils/contracts/helpers/PackedTokenBalance.sol\":\"PackedTokenBalance\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/solidity-utils/contracts/helpers/PackedTokenBalance.sol\":{\"keccak256\":\"0x3b5ca845ec06b247a1e5b652290023fb78f99afa5a2d2f754874d567db3a4360\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://78ef1af97a9dccd7492333b8745e15927123896e6452e40ada6b44ebfc87d9eb\",\"dweb:/ipfs/QmVaqze8Ew6BRbgjEQrM4ad7sdCb93dhy8dswi9hW3L8jv\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"BalanceOverflow"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/solidity-utils/contracts/helpers/PackedTokenBalance.sol":"PackedTokenBalance"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/solidity-utils/contracts/helpers/PackedTokenBalance.sol":{"keccak256":"0x3b5ca845ec06b247a1e5b652290023fb78f99afa5a2d2f754874d567db3a4360","urls":["bzz-raw://78ef1af97a9dccd7492333b8745e15927123896e6452e40ada6b44ebfc87d9eb","dweb:/ipfs/QmVaqze8Ew6BRbgjEQrM4ad7sdCb93dhy8dswi9hW3L8jv"],"license":"GPL-3.0-or-later"}},"version":1},"id":50}