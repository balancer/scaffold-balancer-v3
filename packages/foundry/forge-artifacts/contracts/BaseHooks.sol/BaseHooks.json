{"abi":[{"type":"function","name":"getHookFlags","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct HookFlags","components":[{"name":"enableHookAdjustedAmounts","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallComputeDynamicSwapFee","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"}]}],"stateMutability":"view"},{"type":"function","name":"onAfterAddLiquidity","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint8","internalType":"enum AddLiquidityKind"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"amountsInRaw","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"onAfterInitialize","inputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onAfterRemoveLiquidity","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint8","internalType":"enum RemoveLiquidityKind"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"amountsOutRaw","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"onAfterSwap","inputs":[{"name":"","type":"tuple","internalType":"struct AfterSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"tokenIn","type":"address","internalType":"contract IERC20"},{"name":"tokenOut","type":"address","internalType":"contract IERC20"},{"name":"amountInScaled18","type":"uint256","internalType":"uint256"},{"name":"amountOutScaled18","type":"uint256","internalType":"uint256"},{"name":"tokenInBalanceScaled18","type":"uint256","internalType":"uint256"},{"name":"tokenOutBalanceScaled18","type":"uint256","internalType":"uint256"},{"name":"amountCalculatedScaled18","type":"uint256","internalType":"uint256"},{"name":"amountCalculatedRaw","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"pool","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeAddLiquidity","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint8","internalType":"enum AddLiquidityKind"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeInitialize","inputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeRemoveLiquidity","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint8","internalType":"enum RemoveLiquidityKind"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onBeforeSwap","inputs":[{"name":"","type":"tuple","internalType":"struct PoolSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"amountGivenScaled18","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"indexIn","type":"uint256","internalType":"uint256"},{"name":"indexOut","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"onComputeDynamicSwapFeePercentage","inputs":[{"name":"","type":"tuple","internalType":"struct PoolSwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"amountGivenScaled18","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"indexIn","type":"uint256","internalType":"uint256"},{"name":"indexOut","type":"uint256","internalType":"uint256"},{"name":"router","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"onRegister","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"address","internalType":"address"},{"name":"","type":"tuple[]","internalType":"struct TokenConfig[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"paysYieldFees","type":"bool","internalType":"bool"}]},{"name":"","type":"tuple","internalType":"struct LiquidityManagement","components":[{"name":"disableUnbalancedLiquidity","type":"bool","internalType":"bool"},{"name":"enableAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"enableRemoveLiquidityCustom","type":"bool","internalType":"bool"},{"name":"enableDonation","type":"bool","internalType":"bool"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getHookFlags()":"d77153a7","onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":"976907cc","onAfterInitialize(uint256[],uint256,bytes)":"38be241d","onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":"2754888d","onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":"18b6eb55","onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":"45421ec7","onBeforeInitialize(uint256[],bytes)":"1c149e28","onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":"ba5f9f40","onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":"5211fa77","onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":"a0e8f5ac","onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":"0b89f182"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getHookFlags\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enableHookAdjustedAmounts\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallComputeDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct HookFlags\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onAfterAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onAfterInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutRaw\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onAfterRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenInBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOutBalanceScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AfterSwapParams\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"onAfterSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBeforeAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBeforeInitialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onBeforeRemoveLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"onBeforeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct PoolSwapParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onComputeDynamicSwapFeePercentage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paysYieldFees\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"disableUnbalancedLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRemoveLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDonation\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"onRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Hook contracts that only implement a subset of callbacks can inherit from here instead of IHooks, and only override what they need. `VaultGuard` allows use of the `onlyVault` modifier, which isn't used in this abstract contract, but should be used in real derived hook contracts.\",\"kind\":\"dev\",\"methods\":{\"getHookFlags()\":{\"details\":\"The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero). `onRegister` is the only \\\"mandatory\\\" hook.\",\"returns\":{\"_0\":\"Flags indicating which hooks the contract supports\"}},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsInRaw\":\"Actual amounts of tokens added, sorted in token registration order\",\"amountsInScaled18\":\"Actual amounts of tokens added, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountOut\":\"Amount of pool tokens minted\",\"kind\":\"The type of add liquidity operation (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"_0\":\"True if the pool wishes to proceed with settlement\",\"_1\":\"New amountsInRaw, potentially modified by the hook\"}},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"details\":\"Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"bptAmountOut\":\"Amount of pool tokens minted during initialization\",\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"_0\":\"success True if the pool accepts the initialization results\"}},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"amountsOutRaw\":\"Actual amount of tokens to receive, sorted in token registration order\",\"amountsOutScaled18\":\"Scaled amount of tokens to receive, sorted in token registration order\",\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"bptAmountIn\":\"Amount of pool tokens to burn\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Additional (optional) data provided by the user\"},\"returns\":{\"_0\":\"True if the pool wishes to proceed with settlement\",\"_1\":\"New amountsOutRaw, potentially modified by the hook\"}},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"details\":\"Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see above for struct definition)\"},\"returns\":{\"_0\":\"True if the pool wishes to proceed with settlement\",\"_1\":\"New amount calculated, potentially modified by the hook\"}},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The type of add liquidity operation (e.g., proportional, custom)\",\"maxAmountsInScaled18\":\"Maximum amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated an add liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"_0\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeInitialize(uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"_0\":\"success True if the pool wishes to proceed with initialization\"}},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"details\":\"Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"balancesScaled18\":\"Current pool balances, sorted in token registration order\",\"kind\":\"The type of remove liquidity operation (e.g., proportional, custom)\",\"maxBptAmountIn\":\"Maximum amount of input pool tokens\",\"minAmountsOutScaled18\":\"Minimum output amounts, sorted in token registration order\",\"pool\":\"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)\",\"router\":\"The address (usually a router contract) that initiated a remove liquidity operation on the Vault\",\"userData\":\"Optional, arbitrary data sent with the encoded request\"},\"returns\":{\"_0\":\"True if the pool wishes to proceed with settlement\"}},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"details\":\"Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\"},\"returns\":{\"_0\":\"True if the pool wishes to proceed with settlement\"}},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"details\":\"Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.\",\"params\":{\"params\":\"Swap parameters (see PoolSwapParams for struct definition)\",\"pool\":\"Pool address, used to get pool information from the Vault (poolData, token config, etc.)\",\"staticSwapFeePercentage\":\"18-decimal FP value of the static swap fee percentage, for reference\"},\"returns\":{\"_0\":\"True if the pool wishes to proceed with settlement\",\"_1\":\"Value of the swap fee percentage, as an 18-decimal FP value\"}},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"details\":\"Returns true if registration was successful, and false to revert the pool registration. Make sure this function is properly implemented (e.g. check the factory, and check that the given pool is from the factory). The Vault address will be msg.sender.\",\"params\":{\"factory\":\"Address of the pool factory (contract deploying the pool)\",\"liquidityManagement\":\"Liquidity management flags indicating which functions are enabled\",\"pool\":\"Address of the pool\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"},\"returns\":{\"_0\":\"success True if the hook allowed the registration, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHookFlags()\":{\"notice\":\"Return the set of hooks implemented by the contract.\"},\"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed after adding liquidity.\"},\"onAfterInitialize(uint256[],uint256,bytes)\":{\"notice\":\"Hook to be executed after pool initialization.\"},\"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed after removing liquidity.\"},\"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))\":{\"notice\":\"Called after a swap to perform further actions once the balances have been updated by the swap.\"},\"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)\":{\"notice\":\"Hook to be executed before adding liquidity.\"},\"onBeforeInitialize(uint256[],bytes)\":{\"notice\":\"Hook executed before pool initialization.\"},\"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)\":{\"notice\":\"Hook to be executed before removing liquidity.\"},\"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)\":{\"notice\":\"Called before a swap to give the Pool an opportunity to perform actions.\"},\"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)\":{\"notice\":\"Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees.\"},\"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))\":{\"notice\":\"Hook executed when a pool is registered with a non-zero hooks contract.\"}},\"notice\":\"Base for pool hooks contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol\":\"BaseHooks\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[\":@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/\",\":@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/\",\":@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/\",\":@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/\",\":@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@test/=lib/balancer-v3-monorepo/pkg/\",\":ds-test/=../../node_modules/forge-std/lib/ds-test/src/\",\":forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":permit2/=lib/permit2/\",\":pool-weighted/=../pool-weighted/\",\":solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/\",\":solidity-utils/=../solidity-utils/\",\":vault/=../vault/\"]},\"sources\":{\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol\":{\"keccak256\":\"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452\",\"dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol\":{\"keccak256\":\"0x90f77758dbdfdb952754aa3fbfbdf816afb9592b49a12932cf6636bb6dab6638\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://bf3a76192ee4290f81c33dcc28889761087b0f3f5324bdf0c5487504a349df5f\",\"dweb:/ipfs/QmX5tH5yox4riErpQ43BEmc7L11C65ob53gRQ5VUBdNM3Y\"]},\"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol\":{\"keccak256\":\"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3\",\"dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf\"]},\"lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol\":{\"keccak256\":\"0xe987f0806641ac62fc66a6f3b0c6b58a44832c01a1c95f349eb880b00529756a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f8fc15c0fc44dd7032aa5ece3f281d1d83076719ef9b6f6442be79a62e2c1848\",\"dweb:/ipfs/QmVAZSVhzg6fb3ChkCeAPtLLwqnwmxdkxrenvJaf83trNC\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf\",\"dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009\",\"dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323\",\"dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"getHookFlags","outputs":[{"internalType":"struct HookFlags","name":"","type":"tuple","components":[{"internalType":"bool","name":"enableHookAdjustedAmounts","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallComputeDynamicSwapFee","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}]}]},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"enum AddLiquidityKind","name":"","type":"uint8"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsInRaw","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onAfterAddLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onAfterInitialize","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"","type":"uint8"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"amountsOutRaw","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onAfterRemoveLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"struct AfterSwapParams","name":"","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountInScaled18","type":"uint256"},{"internalType":"uint256","name":"amountOutScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenInBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"tokenOutBalanceScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedScaled18","type":"uint256"},{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"onAfterSwap","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"enum AddLiquidityKind","name":"","type":"uint8"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeAddLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeInitialize","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"enum RemoveLiquidityKind","name":"","type":"uint8"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeRemoveLiquidity","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct PoolSwapParams","name":"","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"onBeforeSwap","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct PoolSwapParams","name":"","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"router","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"onComputeDynamicSwapFeePercentage","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"struct TokenConfig[]","name":"","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"paysYieldFees","type":"bool"}]},{"internalType":"struct LiquidityManagement","name":"","type":"tuple","components":[{"internalType":"bool","name":"disableUnbalancedLiquidity","type":"bool"},{"internalType":"bool","name":"enableAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableRemoveLiquidityCustom","type":"bool"},{"internalType":"bool","name":"enableDonation","type":"bool"}]}],"stateMutability":"nonpayable","type":"function","name":"onRegister","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"getHookFlags()":{"details":"The Vault will only call hooks the pool says it supports, and of course only if a hooks contract is defined (i.e., the `poolHooksContract` in `PoolRegistrationParams` is non-zero). `onRegister` is the only \"mandatory\" hook.","returns":{"_0":"Flags indicating which hooks the contract supports"}},"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":{"details":"Called if the `shouldCallAfterAddLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsInRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"amountsInRaw":"Actual amounts of tokens added, sorted in token registration order","amountsInScaled18":"Actual amounts of tokens added, sorted in token registration order","balancesScaled18":"Current pool balances, sorted in token registration order","bptAmountOut":"Amount of pool tokens minted","kind":"The type of add liquidity operation (e.g., proportional, custom)","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated an add liquidity operation on the Vault","userData":"Additional (optional) data provided by the user"},"returns":{"_0":"True if the pool wishes to proceed with settlement","_1":"New amountsInRaw, potentially modified by the hook"}},"onAfterInitialize(uint256[],uint256,bytes)":{"details":"Called if the `shouldCallAfterInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"bptAmountOut":"Amount of pool tokens minted during initialization","exactAmountsIn":"Exact amounts of input tokens","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"_0":"success True if the pool accepts the initialization results"}},"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":{"details":"Called if the `shouldCallAfterRemoveLiquidity` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountsOutRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"amountsOutRaw":"Actual amount of tokens to receive, sorted in token registration order","amountsOutScaled18":"Scaled amount of tokens to receive, sorted in token registration order","balancesScaled18":"Current pool balances, sorted in token registration order","bptAmountIn":"Amount of pool tokens to burn","kind":"The type of remove liquidity operation (e.g., proportional, custom)","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated a remove liquidity operation on the Vault","userData":"Additional (optional) data provided by the user"},"returns":{"_0":"True if the pool wishes to proceed with settlement","_1":"New amountsOutRaw, potentially modified by the hook"}},"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":{"details":"Called if the `shouldCallAfterSwap` flag is set in the configuration. The Vault will ignore `hookAdjustedAmountCalculatedRaw` unless `enableHookAdjustedAmounts` is true. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"params":"Swap parameters (see above for struct definition)"},"returns":{"_0":"True if the pool wishes to proceed with settlement","_1":"New amount calculated, potentially modified by the hook"}},"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":{"details":"Called if the `shouldCallBeforeAddLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"balancesScaled18":"Current pool balances, sorted in token registration order","kind":"The type of add liquidity operation (e.g., proportional, custom)","maxAmountsInScaled18":"Maximum amounts of input tokens","minBptAmountOut":"Minimum amount of output pool tokens","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated an add liquidity operation on the Vault","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"_0":"True if the pool wishes to proceed with settlement"}},"onBeforeInitialize(uint256[],bytes)":{"details":"Called if the `shouldCallBeforeInitialize` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"exactAmountsIn":"Exact amounts of input tokens","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"_0":"success True if the pool wishes to proceed with initialization"}},"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":{"details":"Called if the `shouldCallBeforeRemoveLiquidity` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"balancesScaled18":"Current pool balances, sorted in token registration order","kind":"The type of remove liquidity operation (e.g., proportional, custom)","maxBptAmountIn":"Maximum amount of input pool tokens","minAmountsOutScaled18":"Minimum output amounts, sorted in token registration order","pool":"Pool address, used to fetch pool information from the Vault (pool config, tokens, etc.)","router":"The address (usually a router contract) that initiated a remove liquidity operation on the Vault","userData":"Optional, arbitrary data sent with the encoded request"},"returns":{"_0":"True if the pool wishes to proceed with settlement"}},"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":{"details":"Called if the `shouldCallBeforeSwap` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"params":"Swap parameters (see PoolSwapParams for struct definition)","pool":"Pool address, used to get pool information from the Vault (poolData, token config, etc.)"},"returns":{"_0":"True if the pool wishes to proceed with settlement"}},"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":{"details":"Called if the `shouldCallComputeDynamicSwapFee` flag is set in the configuration. Hook contracts should use the `onlyVault` modifier to guarantee this is only called by the Vault.","params":{"params":"Swap parameters (see PoolSwapParams for struct definition)","pool":"Pool address, used to get pool information from the Vault (poolData, token config, etc.)","staticSwapFeePercentage":"18-decimal FP value of the static swap fee percentage, for reference"},"returns":{"_0":"True if the pool wishes to proceed with settlement","_1":"Value of the swap fee percentage, as an 18-decimal FP value"}},"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":{"details":"Returns true if registration was successful, and false to revert the pool registration. Make sure this function is properly implemented (e.g. check the factory, and check that the given pool is from the factory). The Vault address will be msg.sender.","params":{"factory":"Address of the pool factory (contract deploying the pool)","liquidityManagement":"Liquidity management flags indicating which functions are enabled","pool":"Address of the pool","tokenConfig":"An array of descriptors for the tokens the pool will manage"},"returns":{"_0":"success True if the hook allowed the registration, false otherwise"}}},"version":1},"userdoc":{"kind":"user","methods":{"getHookFlags()":{"notice":"Return the set of hooks implemented by the contract."},"onAfterAddLiquidity(address,address,uint8,uint256[],uint256[],uint256,uint256[],bytes)":{"notice":"Hook to be executed after adding liquidity."},"onAfterInitialize(uint256[],uint256,bytes)":{"notice":"Hook to be executed after pool initialization."},"onAfterRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],uint256[],bytes)":{"notice":"Hook to be executed after removing liquidity."},"onAfterSwap((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,address,address,bytes))":{"notice":"Called after a swap to perform further actions once the balances have been updated by the swap."},"onBeforeAddLiquidity(address,address,uint8,uint256[],uint256,uint256[],bytes)":{"notice":"Hook to be executed before adding liquidity."},"onBeforeInitialize(uint256[],bytes)":{"notice":"Hook executed before pool initialization."},"onBeforeRemoveLiquidity(address,address,uint8,uint256,uint256[],uint256[],bytes)":{"notice":"Hook to be executed before removing liquidity."},"onBeforeSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes),address)":{"notice":"Called before a swap to give the Pool an opportunity to perform actions."},"onComputeDynamicSwapFeePercentage((uint8,uint256,uint256[],uint256,uint256,address,bytes),address,uint256)":{"notice":"Called after `onBeforeSwap` and before the main swap operation, if the pool has dynamic fees."},"onRegister(address,address,(address,uint8,address,bool)[],(bool,bool,bool,bool))":{"notice":"Hook executed when a pool is registered with a non-zero hooks contract."}},"version":1}},"settings":{"remappings":["@balancer-labs/v3-interfaces/=lib/balancer-v3-monorepo/pkg/interfaces/","@balancer-labs/v3-pool-utils/=lib/balancer-v3-monorepo/pkg/pool-utils/","@balancer-labs/v3-pool-weighted/=lib/balancer-v3-monorepo/pkg/pool-weighted/","@balancer-labs/v3-solidity-utils/=lib/balancer-v3-monorepo/pkg/solidity-utils/","@balancer-labs/v3-vault/=lib/balancer-v3-monorepo/pkg/vault/","@openzeppelin/=lib/openzeppelin-contracts/","@test/=lib/balancer-v3-monorepo/pkg/","ds-test/=../../node_modules/forge-std/lib/ds-test/src/","forge-gas-snapshot/=lib/permit2/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","permit2/=lib/permit2/","pool-weighted/=../pool-weighted/","solidity-bytes-utils/=lib/solidity-bytes-utils/contracts/","solidity-utils/=../solidity-utils/","vault/=../vault/"],"optimizer":{"enabled":true,"runs":999},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol":"BaseHooks"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/balancer-v3-monorepo/pkg/interfaces/contracts/solidity-utils/helpers/IRateProvider.sol":{"keccak256":"0x910edf810a7b1f0bc24e0e539ad0c0f6f6e82643ab41349861144e1a456c4906","urls":["bzz-raw://96c2d6bcc42cba5cb5885e66323c42b99feaabddc3978df2297e26b029c14452","dweb:/ipfs/QmVinjNKFH5GBVtjaNjdBtnepHSGJBMJ64GJ3dpivtnCmc"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol":{"keccak256":"0x90f77758dbdfdb952754aa3fbfbdf816afb9592b49a12932cf6636bb6dab6638","urls":["bzz-raw://bf3a76192ee4290f81c33dcc28889761087b0f3f5324bdf0c5487504a349df5f","dweb:/ipfs/QmX5tH5yox4riErpQ43BEmc7L11C65ob53gRQ5VUBdNM3Y"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol":{"keccak256":"0xa617c556d3cfea9f5dd00a938e866418fe86fd1ed82c7edf0af9e0ab49bfbdc3","urls":["bzz-raw://ac8ac4d0d045d3e3270da4252eeccb4de2bb4cd50713c71c1ddbc1d9f3bb86d3","dweb:/ipfs/QmTgVAPthGjZSbd6dCczcRGSBeZJs4xbvyjAgWYB4rc6gf"],"license":"GPL-3.0-or-later"},"lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol":{"keccak256":"0xe987f0806641ac62fc66a6f3b0c6b58a44832c01a1c95f349eb880b00529756a","urls":["bzz-raw://f8fc15c0fc44dd7032aa5ece3f281d1d83076719ef9b6f6442be79a62e2c1848","dweb:/ipfs/QmVAZSVhzg6fb3ChkCeAPtLLwqnwmxdkxrenvJaf83trNC"],"license":"GPL-3.0-or-later"},"lib/openzeppelin-contracts/contracts/interfaces/IERC4626.sol":{"keccak256":"0x6423475004ac1c4db6e9f16908cbfb82e630f7868051869c6f89c7452facbc06","urls":["bzz-raw://bd31766a3235519db9207c02652e124746eef3e451271e82830090f9864ff4cf","dweb:/ipfs/QmNjjADM3vFELnFtiZJYuRRXEjQb8KP7cq6b8YqKww6Sdb"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xee2337af2dc162a973b4be6d3f7c16f06298259e0af48c5470d2839bfa8a22f4","urls":["bzz-raw://30c476b4b2f405c1bb3f0bae15b006d129c80f1bfd9d0f2038160a3bb9745009","dweb:/ipfs/Qmb3VcuDufv6xbHeVgksC4tHpc5gKYVqBEwjEXW72XzSvN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0x88f7b6f070ad1de2bf899da6978ed74b5038eac78c01b7359b92b60c3d965c28","urls":["bzz-raw://c436edb6733a036607c6f17cc590e8ee351363a8cb4c564a98d9a66392c89323","dweb:/ipfs/QmcJvJR2K3EtYcKEXVpQ1WqT6TvAbVem5HR1FirAsqEXFR"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/balancer-v3-monorepo/pkg/vault/contracts/BaseHooks.sol","id":12153,"exportedSymbols":{"AddLiquidityKind":[6632],"AfterSwapParams":[6626],"BaseHooks":[12152],"HookFlags":[6452],"IHooks":[4087],"LiquidityManagement":[6405],"PoolSwapParams":[6597],"RemoveLiquidityKind":[6653],"TokenConfig":[6519]},"nodeType":"SourceUnit","src":"46:3521:54","nodes":[{"id":11911,"nodeType":"PragmaDirective","src":"46:24:54","nodes":[],"literals":["solidity","^","0.8",".24"]},{"id":11913,"nodeType":"ImportDirective","src":"72:81:54","nodes":[],"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/IHooks.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/IHooks.sol","nameLocation":"-1:-1:-1","scope":12153,"sourceUnit":4088,"symbolAliases":[{"foreign":{"id":11912,"name":"IHooks","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4087,"src":"81:6:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":11921,"nodeType":"ImportDirective","src":"154:222:54","nodes":[],"absolutePath":"lib/balancer-v3-monorepo/pkg/interfaces/contracts/vault/VaultTypes.sol","file":"@balancer-labs/v3-interfaces/contracts/vault/VaultTypes.sol","nameLocation":"-1:-1:-1","scope":12153,"sourceUnit":6697,"symbolAliases":[{"foreign":{"id":11914,"name":"AddLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6632,"src":"167:16:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":11915,"name":"HookFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6452,"src":"189:9:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":11916,"name":"LiquidityManagement","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6405,"src":"204:19:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":11917,"name":"RemoveLiquidityKind","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6653,"src":"229:19:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":11918,"name":"TokenConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6519,"src":"254:11:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":11919,"name":"PoolSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6597,"src":"271:14:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":11920,"name":"AfterSwapParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6626,"src":"291:15:54","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":12152,"nodeType":"ContractDefinition","src":"722:2844:54","nodes":[{"id":11944,"nodeType":"FunctionDefinition","src":"793:284:54","nodes":[],"body":{"id":11943,"nodeType":"Block","src":"951:126:54","nodes":[],"statements":[{"expression":{"hexValue":"66616c7365","id":11941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1065:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":11940,"id":11942,"nodeType":"Return","src":"1058:12:54"}]},"baseFunctions":[3914],"documentation":{"id":11925,"nodeType":"StructuredDocumentation","src":"766:22:54","text":"@inheritdoc IHooks"},"functionSelector":"0b89f182","implemented":true,"kind":"function","modifiers":[],"name":"onRegister","nameLocation":"802:10:54","parameters":{"id":11937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11944,"src":"822:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11926,"name":"address","nodeType":"ElementaryTypeName","src":"822:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11929,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11944,"src":"839:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11928,"name":"address","nodeType":"ElementaryTypeName","src":"839:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11933,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11944,"src":"856:20:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$6519_memory_ptr_$dyn_memory_ptr","typeString":"struct TokenConfig[]"},"typeName":{"baseType":{"id":11931,"nodeType":"UserDefinedTypeName","pathNode":{"id":11930,"name":"TokenConfig","nameLocations":["856:11:54"],"nodeType":"IdentifierPath","referencedDeclaration":6519,"src":"856:11:54"},"referencedDeclaration":6519,"src":"856:11:54","typeDescriptions":{"typeIdentifier":"t_struct$_TokenConfig_$6519_storage_ptr","typeString":"struct TokenConfig"}},"id":11932,"nodeType":"ArrayTypeName","src":"856:13:54","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_TokenConfig_$6519_storage_$dyn_storage_ptr","typeString":"struct TokenConfig[]"}},"visibility":"internal"},{"constant":false,"id":11936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11944,"src":"886:28:54","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$6405_calldata_ptr","typeString":"struct LiquidityManagement"},"typeName":{"id":11935,"nodeType":"UserDefinedTypeName","pathNode":{"id":11934,"name":"LiquidityManagement","nameLocations":["886:19:54"],"nodeType":"IdentifierPath","referencedDeclaration":6405,"src":"886:19:54"},"referencedDeclaration":6405,"src":"886:19:54","typeDescriptions":{"typeIdentifier":"t_struct$_LiquidityManagement_$6405_storage_ptr","typeString":"struct LiquidityManagement"}},"visibility":"internal"}],"src":"812:108:54"},"returnParameters":{"id":11940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11939,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11944,"src":"945:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":11938,"name":"bool","nodeType":"ElementaryTypeName","src":"945:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"944:6:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":11951,"nodeType":"FunctionDefinition","src":"1110:71:54","nodes":[],"baseFunctions":[3921],"documentation":{"id":11945,"nodeType":"StructuredDocumentation","src":"1083:22:54","text":"@inheritdoc IHooks"},"functionSelector":"d77153a7","implemented":false,"kind":"function","modifiers":[],"name":"getHookFlags","nameLocation":"1119:12:54","parameters":{"id":11946,"nodeType":"ParameterList","parameters":[],"src":"1131:2:54"},"returnParameters":{"id":11950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11949,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11951,"src":"1163:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$6452_memory_ptr","typeString":"struct HookFlags"},"typeName":{"id":11948,"nodeType":"UserDefinedTypeName","pathNode":{"id":11947,"name":"HookFlags","nameLocations":["1163:9:54"],"nodeType":"IdentifierPath","referencedDeclaration":6452,"src":"1163:9:54"},"referencedDeclaration":6452,"src":"1163:9:54","typeDescriptions":{"typeIdentifier":"t_struct$_HookFlags_$6452_storage_ptr","typeString":"struct HookFlags"}},"visibility":"internal"}],"src":"1162:18:54"},"scope":12152,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":11965,"nodeType":"FunctionDefinition","src":"1214:119:54","nodes":[],"body":{"id":11964,"nodeType":"Block","src":"1304:29:54","nodes":[],"statements":[{"expression":{"hexValue":"66616c7365","id":11962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1321:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":11961,"id":11963,"nodeType":"Return","src":"1314:12:54"}]},"baseFunctions":[3932],"documentation":{"id":11952,"nodeType":"StructuredDocumentation","src":"1187:22:54","text":"@inheritdoc IHooks"},"functionSelector":"1c149e28","implemented":true,"kind":"function","modifiers":[],"name":"onBeforeInitialize","nameLocation":"1223:18:54","parameters":{"id":11958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11965,"src":"1242:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":11953,"name":"uint256","nodeType":"ElementaryTypeName","src":"1242:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":11954,"nodeType":"ArrayTypeName","src":"1242:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":11957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11965,"src":"1260:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":11956,"name":"bytes","nodeType":"ElementaryTypeName","src":"1260:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1241:32:54"},"returnParameters":{"id":11961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11965,"src":"1298:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":11959,"name":"bool","nodeType":"ElementaryTypeName","src":"1298:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1297:6:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":11981,"nodeType":"FunctionDefinition","src":"1366:127:54","nodes":[],"body":{"id":11980,"nodeType":"Block","src":"1464:29:54","nodes":[],"statements":[{"expression":{"hexValue":"66616c7365","id":11978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1481:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":11977,"id":11979,"nodeType":"Return","src":"1474:12:54"}]},"baseFunctions":[3945],"documentation":{"id":11966,"nodeType":"StructuredDocumentation","src":"1339:22:54","text":"@inheritdoc IHooks"},"functionSelector":"38be241d","implemented":true,"kind":"function","modifiers":[],"name":"onAfterInitialize","nameLocation":"1375:17:54","parameters":{"id":11974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11981,"src":"1393:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":11967,"name":"uint256","nodeType":"ElementaryTypeName","src":"1393:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":11968,"nodeType":"ArrayTypeName","src":"1393:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":11971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11981,"src":"1411:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":11970,"name":"uint256","nodeType":"ElementaryTypeName","src":"1411:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":11973,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11981,"src":"1420:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":11972,"name":"bytes","nodeType":"ElementaryTypeName","src":"1420:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1392:41:54"},"returnParameters":{"id":11977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11976,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":11981,"src":"1458:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":11975,"name":"bool","nodeType":"ElementaryTypeName","src":"1458:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1457:6:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":12007,"nodeType":"FunctionDefinition","src":"1526:246:54","nodes":[],"body":{"id":12006,"nodeType":"Block","src":"1743:29:54","nodes":[],"statements":[{"expression":{"hexValue":"66616c7365","id":12004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1760:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":12003,"id":12005,"nodeType":"Return","src":"1753:12:54"}]},"baseFunctions":[3968],"documentation":{"id":11982,"nodeType":"StructuredDocumentation","src":"1499:22:54","text":"@inheritdoc IHooks"},"functionSelector":"45421ec7","implemented":true,"kind":"function","modifiers":[],"name":"onBeforeAddLiquidity","nameLocation":"1535:20:54","parameters":{"id":12000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1565:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11983,"name":"address","nodeType":"ElementaryTypeName","src":"1565:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11986,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1582:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11985,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1599:16:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"},"typeName":{"id":11988,"nodeType":"UserDefinedTypeName","pathNode":{"id":11987,"name":"AddLiquidityKind","nameLocations":["1599:16:54"],"nodeType":"IdentifierPath","referencedDeclaration":6632,"src":"1599:16:54"},"referencedDeclaration":6632,"src":"1599:16:54","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":11992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1625:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":11990,"name":"uint256","nodeType":"ElementaryTypeName","src":"1625:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":11991,"nodeType":"ArrayTypeName","src":"1625:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":11994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1651:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":11993,"name":"uint256","nodeType":"ElementaryTypeName","src":"1651:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":11997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1668:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":11995,"name":"uint256","nodeType":"ElementaryTypeName","src":"1668:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":11996,"nodeType":"ArrayTypeName","src":"1668:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":11999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1694:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":11998,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1555:157:54"},"returnParameters":{"id":12003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12007,"src":"1737:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12001,"name":"bool","nodeType":"ElementaryTypeName","src":"1737:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1736:6:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":12041,"nodeType":"FunctionDefinition","src":"1805:318:54","nodes":[],"body":{"id":12040,"nodeType":"Block","src":"2078:45:54","nodes":[],"statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":12036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2096:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":12037,"name":"amountsInRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12021,"src":"2103:12:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":12038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2095:21:54","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(bool,uint256[] memory)"}},"functionReturnParameters":12035,"id":12039,"nodeType":"Return","src":"2088:28:54"}]},"baseFunctions":[3997],"documentation":{"id":12008,"nodeType":"StructuredDocumentation","src":"1778:22:54","text":"@inheritdoc IHooks"},"functionSelector":"976907cc","implemented":true,"kind":"function","modifiers":[],"name":"onAfterAddLiquidity","nameLocation":"1814:19:54","parameters":{"id":12029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"1843:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12009,"name":"address","nodeType":"ElementaryTypeName","src":"1843:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"1860:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12011,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"1877:16:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"},"typeName":{"id":12014,"nodeType":"UserDefinedTypeName","pathNode":{"id":12013,"name":"AddLiquidityKind","nameLocations":["1877:16:54"],"nodeType":"IdentifierPath","referencedDeclaration":6632,"src":"1877:16:54"},"referencedDeclaration":6632,"src":"1877:16:54","typeDescriptions":{"typeIdentifier":"t_enum$_AddLiquidityKind_$6632","typeString":"enum AddLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":12018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"1903:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12016,"name":"uint256","nodeType":"ElementaryTypeName","src":"1903:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12017,"nodeType":"ArrayTypeName","src":"1903:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12021,"mutability":"mutable","name":"amountsInRaw","nameLocation":"1946:12:54","nodeType":"VariableDeclaration","scope":12041,"src":"1929:29:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12019,"name":"uint256","nodeType":"ElementaryTypeName","src":"1929:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12020,"nodeType":"ArrayTypeName","src":"1929:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12023,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"1968:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12022,"name":"uint256","nodeType":"ElementaryTypeName","src":"1968:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"1985:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12024,"name":"uint256","nodeType":"ElementaryTypeName","src":"1985:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12025,"nodeType":"ArrayTypeName","src":"1985:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12028,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"2011:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":12027,"name":"bytes","nodeType":"ElementaryTypeName","src":"2011:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1833:196:54"},"returnParameters":{"id":12035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"2054:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12030,"name":"bool","nodeType":"ElementaryTypeName","src":"2054:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":12034,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12041,"src":"2060:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12032,"name":"uint256","nodeType":"ElementaryTypeName","src":"2060:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12033,"nodeType":"ArrayTypeName","src":"2060:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2053:24:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":12067,"nodeType":"FunctionDefinition","src":"2156:252:54","nodes":[],"body":{"id":12066,"nodeType":"Block","src":"2379:29:54","nodes":[],"statements":[{"expression":{"hexValue":"66616c7365","id":12064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2396:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":12063,"id":12065,"nodeType":"Return","src":"2389:12:54"}]},"baseFunctions":[4020],"documentation":{"id":12042,"nodeType":"StructuredDocumentation","src":"2129:22:54","text":"@inheritdoc IHooks"},"functionSelector":"ba5f9f40","implemented":true,"kind":"function","modifiers":[],"name":"onBeforeRemoveLiquidity","nameLocation":"2165:23:54","parameters":{"id":12060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2198:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12043,"name":"address","nodeType":"ElementaryTypeName","src":"2198:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2215:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12045,"name":"address","nodeType":"ElementaryTypeName","src":"2215:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2232:19:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":12048,"nodeType":"UserDefinedTypeName","pathNode":{"id":12047,"name":"RemoveLiquidityKind","nameLocations":["2232:19:54"],"nodeType":"IdentifierPath","referencedDeclaration":6653,"src":"2232:19:54"},"referencedDeclaration":6653,"src":"2232:19:54","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":12051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2261:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12050,"name":"uint256","nodeType":"ElementaryTypeName","src":"2261:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2278:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12052,"name":"uint256","nodeType":"ElementaryTypeName","src":"2278:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12053,"nodeType":"ArrayTypeName","src":"2278:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2304:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12055,"name":"uint256","nodeType":"ElementaryTypeName","src":"2304:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12056,"nodeType":"ArrayTypeName","src":"2304:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2330:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":12058,"name":"bytes","nodeType":"ElementaryTypeName","src":"2330:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2188:160:54"},"returnParameters":{"id":12063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12062,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12067,"src":"2373:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12061,"name":"bool","nodeType":"ElementaryTypeName","src":"2373:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2372:6:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":12101,"nodeType":"FunctionDefinition","src":"2441:326:54","nodes":[],"body":{"id":12100,"nodeType":"Block","src":"2721:46:54","nodes":[],"statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":12096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2739:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":12097,"name":"amountsOutRaw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12083,"src":"2746:13:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"id":12098,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2738:22:54","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"tuple(bool,uint256[] memory)"}},"functionReturnParameters":12095,"id":12099,"nodeType":"Return","src":"2731:29:54"}]},"baseFunctions":[4049],"documentation":{"id":12068,"nodeType":"StructuredDocumentation","src":"2414:22:54","text":"@inheritdoc IHooks"},"functionSelector":"2754888d","implemented":true,"kind":"function","modifiers":[],"name":"onAfterRemoveLiquidity","nameLocation":"2450:22:54","parameters":{"id":12089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2482:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12069,"name":"address","nodeType":"ElementaryTypeName","src":"2482:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2499:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12071,"name":"address","nodeType":"ElementaryTypeName","src":"2499:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12075,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2516:19:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"},"typeName":{"id":12074,"nodeType":"UserDefinedTypeName","pathNode":{"id":12073,"name":"RemoveLiquidityKind","nameLocations":["2516:19:54"],"nodeType":"IdentifierPath","referencedDeclaration":6653,"src":"2516:19:54"},"referencedDeclaration":6653,"src":"2516:19:54","typeDescriptions":{"typeIdentifier":"t_enum$_RemoveLiquidityKind_$6653","typeString":"enum RemoveLiquidityKind"}},"visibility":"internal"},{"constant":false,"id":12077,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2545:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12076,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":12080,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2562:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12078,"name":"uint256","nodeType":"ElementaryTypeName","src":"2562:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12079,"nodeType":"ArrayTypeName","src":"2562:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12083,"mutability":"mutable","name":"amountsOutRaw","nameLocation":"2605:13:54","nodeType":"VariableDeclaration","scope":12101,"src":"2588:30:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12081,"name":"uint256","nodeType":"ElementaryTypeName","src":"2588:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12082,"nodeType":"ArrayTypeName","src":"2588:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12086,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2628:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12084,"name":"uint256","nodeType":"ElementaryTypeName","src":"2628:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12085,"nodeType":"ArrayTypeName","src":"2628:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":12088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2654:12:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":12087,"name":"bytes","nodeType":"ElementaryTypeName","src":"2654:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2472:200:54"},"returnParameters":{"id":12095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12091,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2697:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12090,"name":"bool","nodeType":"ElementaryTypeName","src":"2697:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":12094,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12101,"src":"2703:16:54","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":12092,"name":"uint256","nodeType":"ElementaryTypeName","src":"2703:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":12093,"nodeType":"ArrayTypeName","src":"2703:9:54","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2696:24:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":12115,"nodeType":"FunctionDefinition","src":"2800:228:54","nodes":[],"body":{"id":12114,"nodeType":"Block","src":"2886:142:54","nodes":[],"statements":[{"expression":{"hexValue":"66616c7365","id":12112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3016:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":12111,"id":12113,"nodeType":"Return","src":"3009:12:54"}]},"baseFunctions":[4060],"documentation":{"id":12102,"nodeType":"StructuredDocumentation","src":"2773:22:54","text":"@inheritdoc IHooks"},"functionSelector":"5211fa77","implemented":true,"kind":"function","modifiers":[],"name":"onBeforeSwap","nameLocation":"2809:12:54","parameters":{"id":12108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12115,"src":"2822:23:54","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":12104,"nodeType":"UserDefinedTypeName","pathNode":{"id":12103,"name":"PoolSwapParams","nameLocations":["2822:14:54"],"nodeType":"IdentifierPath","referencedDeclaration":6597,"src":"2822:14:54"},"referencedDeclaration":6597,"src":"2822:14:54","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":12107,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12115,"src":"2847:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12106,"name":"address","nodeType":"ElementaryTypeName","src":"2847:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2821:34:54"},"returnParameters":{"id":12111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12115,"src":"2880:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12109,"name":"bool","nodeType":"ElementaryTypeName","src":"2880:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2879:6:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":12131,"nodeType":"FunctionDefinition","src":"3061:276:54","nodes":[],"body":{"id":12130,"nodeType":"Block","src":"3147:190:54","nodes":[],"statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":12126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3321:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":12127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3328:1:54","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":12128,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3320:10:54","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":12125,"id":12129,"nodeType":"Return","src":"3313:17:54"}]},"baseFunctions":[4071],"documentation":{"id":12116,"nodeType":"StructuredDocumentation","src":"3034:22:54","text":"@inheritdoc IHooks"},"functionSelector":"18b6eb55","implemented":true,"kind":"function","modifiers":[],"name":"onAfterSwap","nameLocation":"3070:11:54","parameters":{"id":12120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12131,"src":"3082:24:54","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$6626_calldata_ptr","typeString":"struct AfterSwapParams"},"typeName":{"id":12118,"nodeType":"UserDefinedTypeName","pathNode":{"id":12117,"name":"AfterSwapParams","nameLocations":["3082:15:54"],"nodeType":"IdentifierPath","referencedDeclaration":6626,"src":"3082:15:54"},"referencedDeclaration":6626,"src":"3082:15:54","typeDescriptions":{"typeIdentifier":"t_struct$_AfterSwapParams_$6626_storage_ptr","typeString":"struct AfterSwapParams"}},"visibility":"internal"}],"src":"3081:26:54"},"returnParameters":{"id":12125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12131,"src":"3132:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12121,"name":"bool","nodeType":"ElementaryTypeName","src":"3132:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":12124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12131,"src":"3138:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12123,"name":"uint256","nodeType":"ElementaryTypeName","src":"3138:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3131:15:54"},"scope":12152,"stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"id":12151,"nodeType":"FunctionDefinition","src":"3370:194:54","nodes":[],"body":{"id":12150,"nodeType":"Block","src":"3530:34:54","nodes":[],"statements":[{"expression":{"components":[{"hexValue":"66616c7365","id":12146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3548:5:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":12147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3555:1:54","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":12148,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3547:10:54","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":12145,"id":12149,"nodeType":"Return","src":"3540:17:54"}]},"baseFunctions":[4086],"documentation":{"id":12132,"nodeType":"StructuredDocumentation","src":"3343:22:54","text":"@inheritdoc IHooks"},"functionSelector":"a0e8f5ac","implemented":true,"kind":"function","modifiers":[],"name":"onComputeDynamicSwapFeePercentage","nameLocation":"3379:33:54","parameters":{"id":12140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12151,"src":"3422:23:54","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_calldata_ptr","typeString":"struct PoolSwapParams"},"typeName":{"id":12134,"nodeType":"UserDefinedTypeName","pathNode":{"id":12133,"name":"PoolSwapParams","nameLocations":["3422:14:54"],"nodeType":"IdentifierPath","referencedDeclaration":6597,"src":"3422:14:54"},"referencedDeclaration":6597,"src":"3422:14:54","typeDescriptions":{"typeIdentifier":"t_struct$_PoolSwapParams_$6597_storage_ptr","typeString":"struct PoolSwapParams"}},"visibility":"internal"},{"constant":false,"id":12137,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12151,"src":"3455:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12136,"name":"address","nodeType":"ElementaryTypeName","src":"3455:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":12139,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12151,"src":"3472:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12138,"name":"uint256","nodeType":"ElementaryTypeName","src":"3472:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3412:73:54"},"returnParameters":{"id":12145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12151,"src":"3515:4:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":12141,"name":"bool","nodeType":"ElementaryTypeName","src":"3515:4:54","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":12144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12151,"src":"3521:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":12143,"name":"uint256","nodeType":"ElementaryTypeName","src":"3521:7:54","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3514:15:54"},"scope":12152,"stateMutability":"view","virtual":true,"visibility":"public"}],"abstract":true,"baseContracts":[{"baseName":{"id":11923,"name":"IHooks","nameLocations":["753:6:54"],"nodeType":"IdentifierPath","referencedDeclaration":4087,"src":"753:6:54"},"id":11924,"nodeType":"InheritanceSpecifier","src":"753:6:54"}],"canonicalName":"BaseHooks","contractDependencies":[],"contractKind":"contract","documentation":{"id":11922,"nodeType":"StructuredDocumentation","src":"378:343:54","text":" @notice Base for pool hooks contracts.\n @dev Hook contracts that only implement a subset of callbacks can inherit from here instead of IHooks,\n and only override what they need. `VaultGuard` allows use of the `onlyVault` modifier, which isn't used\n in this abstract contract, but should be used in real derived hook contracts."},"fullyImplemented":false,"linearizedBaseContracts":[12152,4087],"name":"BaseHooks","nameLocation":"740:9:54","scope":12153,"usedErrors":[],"usedEvents":[]}],"license":"GPL-3.0-or-later"},"id":54}