{
  "address": "0xF00DAB4a32A62E83b02B312A8b195d4314350363",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "ERC2612ExpiredSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC2612InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "currentNonce",
          "type": "uint256"
        }
      ],
      "name": "InvalidAccountNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderIsNotVault",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "balancesLiveScaled18",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenInIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "invariantRatio",
          "type": "uint256"
        }
      ],
      "name": "computeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "balancesLiveScaled18",
          "type": "uint256[]"
        }
      ],
      "name": "computeInvariant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emitTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum SwapKind",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amountGivenScaled18",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "balancesScaled18",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "indexIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "indexOut",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IBasePool.SwapParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "onSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountCalculatedScaled18",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x28a6c23ed0bbf83018eeb6290148ee73462e5a83c90d3f0fd913137cf2c03cae",
  "receipt": {
    "to": null,
    "from": "0x5036388C540994Ed7b74b82F71175a441F85BdA1",
    "contractAddress": "0xF00DAB4a32A62E83b02B312A8b195d4314350363",
    "transactionIndex": 17,
    "gasUsed": "1252755",
    "logsBloom": "0x
    "blockHash": "0xaffbb279aa24938f9d60bca5e3ef4ce2d769fd29377870601c42503edca33e67",
    "transactionHash": "0x28a6c23ed0bbf83018eeb6290148ee73462e5a83c90d3f0fd913137cf2c03cae",
    "logs": [],
    "blockNumber": 5467232,
    "cumulativeGasUsed": "2774591",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDaa273AeEc06e9CCb7428a77E2abb1E4659B16D2",
    "Constant Price Pool",
    "CPP"
  ],
  "numDeployments": 1,
  "solcInputHash": "fbead9d2430dff0450f92e67b5ea9ef5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantRatio\",\"type\":\"uint256\"}],\"name\":\"computeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"name\":\"computeInvariant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBasePool.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BUIDL GUIDL\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"SenderIsNotVault(address)\":[{\"details\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\",\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"computeBalance(uint256[],uint256,uint256)\":{\"details\":\"Computes the new balance of a token after an operation, given the invariant growth ratio and all other balances.\",\"params\":{\"balancesLiveScaled18\":\"Current live balances (adjusted for decimals, rates, etc.)\",\"invariantRatio\":\"The ratio of the new invariant (after an operation) to the old\",\"tokenInIndex\":\"The index of the token we're computing the balance for, in token registration order\"},\"returns\":{\"newBalance\":\"The new balance of the selected token, after the operation\"}},\"computeInvariant(uint256[])\":{\"details\":\"This function computes the invariant based on current balances\",\"params\":{\"balancesLiveScaled18\":\"Array of current pool balances for each token in the pool, scaled to 18 decimals\"},\"returns\":{\"invariant\":\"The calculated invariant of the pool, represented as a uint256\"}},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"emitApproval(address,address,uint256)\":{\"details\":\"Emit the Approval event. This function can only be called by the MultiToken.\"},\"emitTransfer(address,address,uint256)\":{\"details\":\"Emit the Transfer event. This function can only be called by the MultiToken.\"},\"getPoolTokens()\":{\"details\":\"Delegated to the Vault; added here as a convenience, mainly for off-chain processes.TODO - left blank for now, but for finished example w/ scaffoldBalancer we need to implement this correctly.\",\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"params\":{\"params\":\"Swap parameters\"},\"returns\":{\"amountCalculatedScaled18\":\"Calculated amount for the swap\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"Example ConstantPricePool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeInvariant(uint256[])\":{\"notice\":\"Computes and returns the pool's invariant.\"},\"getPoolTokens()\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Execute a swap in the pool.\"}},\"notice\":\"CURRENTLY A WIP. This is an example custom pool implementation used.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ConstantPricePool.sol\":\"ConstantPricePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/ConstantPricePool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IBasePool.sol\\\";\\nimport \\\"./vault/BalancerPoolToken.sol\\\";\\n\\n/**\\n * @title Example ConstantPricePool\\n * @author BUIDL GUIDL\\n * @notice CURRENTLY A WIP. This is an example custom pool implementation used.\\n */\\ncontract ConstantPricePool is IBasePool, BalancerPoolToken {\\n\\n\\tconstructor(\\n\\t\\tIVault vault,\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol\\n\\t) BalancerPoolToken(vault, name, symbol)  {}\\n\\n\\t/**\\n\\t * @notice Execute a swap in the pool.\\n\\t * @param params Swap parameters\\n\\t * @return amountCalculatedScaled18 Calculated amount for the swap\\n\\t */\\n\\tfunction onSwap(\\n\\t\\tSwapParams calldata params\\n\\t) external pure returns (uint256 amountCalculatedScaled18) {\\n\\t\\tamountCalculatedScaled18 = params.amountGivenScaled18;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Computes and returns the pool's invariant.\\n\\t * @dev This function computes the invariant based on current balances\\n\\t * @param balancesLiveScaled18 Array of current pool balances for each token in the pool, scaled to 18 decimals\\n\\t * @return invariant The calculated invariant of the pool, represented as a uint256\\n\\t */\\n\\tfunction computeInvariant(\\n\\t\\tuint256[] memory balancesLiveScaled18\\n\\t) public pure returns (uint256 invariant) {\\n\\t\\tinvariant = balancesLiveScaled18[0] + balancesLiveScaled18[1];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Computes the new balance of a token after an operation, given the invariant growth ratio and all other\\n\\t * balances.\\n\\t * @param balancesLiveScaled18 Current live balances (adjusted for decimals, rates, etc.)\\n\\t * @param tokenInIndex The index of the token we're computing the balance for, in token registration order\\n\\t * @param invariantRatio The ratio of the new invariant (after an operation) to the old\\n\\t * @return newBalance The new balance of the selected token, after the operation\\n\\t */\\n\\tfunction computeBalance(\\n\\t\\tuint256[] memory balancesLiveScaled18,\\n\\t\\tuint256 tokenInIndex,\\n\\t\\tuint256 invariantRatio\\n\\t) external pure returns (uint256 newBalance) {\\n\\t\\tuint256 invariant = computeInvariant(balancesLiveScaled18);\\n\\n\\t\\tnewBalance =\\n\\t\\t\\t(balancesLiveScaled18[tokenInIndex] +\\n\\t\\t\\t\\tinvariant * (invariantRatio)) -\\n\\t\\t\\tinvariant;\\n\\t}\\n\\n\\t/**\\n     * @notice Gets the tokens registered to a pool.\\n     * @dev Delegated to the Vault; added here as a convenience, mainly for off-chain processes.\\n\\t * @dev TODO - left blank for now, but for finished example w/ scaffoldBalancer we need to implement this correctly.\\n     * @return tokens List of tokens in the pool\\n     */\\n\\tfunction getPoolTokens() external view returns (IERC20[] memory tokens) {\\n\\t\\t\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x82fc52300a39b074834fec9fd072244a6d7ab37b3cbd2aacb0fa8a7b0ee9ce38\",\"license\":\"MIT\"},\"contracts/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @notice Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     * @param actionId Identifier for the action to be performed\\n     * @param account Account trying to perform the action\\n     * @param where Target contract for the action\\n     * @return True if the action is permitted\\n     */\\n    function canPerform(bytes32 actionId, address account, address where) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfe3278913eb925022136ae31b1f1a33e60e5b950d0c3288b8bc87d054cdaec03\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { SwapKind } from \\\"./VaultTypes.sol\\\";\\n\\n/// @notice Interface for a Base Pool\\ninterface IBasePool {\\n    /**\\n     * @notice Gets the tokens registered to a pool.\\n     * @dev Delegated to the Vault; added here as a convenience, mainly for off-chain processes.\\n     * @return tokens List of tokens in the pool\\n     */\\n    function getPoolTokens() external view returns (IERC20[] memory tokens);\\n\\n    /***************************************************************************\\n                                   Invariant\\n    ***************************************************************************/\\n\\n    /**\\n     * @notice Computes and returns the pool's invariant.\\n     * @dev This function computes the invariant based on current balances\\n     * @param balancesLiveScaled18 Array of current pool balances for each token in the pool, scaled to 18 decimals\\n     * @return invariant The calculated invariant of the pool, represented as a uint256\\n     */\\n    function computeInvariant(uint256[] memory balancesLiveScaled18) external view returns (uint256 invariant);\\n\\n    /**\\n     * @dev Computes the new balance of a token after an operation, given the invariant growth ratio and all other\\n     * balances.\\n     * @param balancesLiveScaled18 Current live balances (adjusted for decimals, rates, etc.)\\n     * @param tokenInIndex The index of the token we're computing the balance for, in token registration order\\n     * @param invariantRatio The ratio of the new invariant (after an operation) to the old\\n     * @return newBalance The new balance of the selected token, after the operation\\n     */\\n    function computeBalance(\\n        uint256[] memory balancesLiveScaled18,\\n        uint256 tokenInIndex,\\n        uint256 invariantRatio\\n    ) external view returns (uint256 newBalance);\\n\\n    /***************************************************************************\\n                                       Swaps\\n    ***************************************************************************/\\n\\n    /**\\n     * @dev Data for a swap operation.\\n     * @param kind Type of swap (exact in or exact out)\\n     * @param pool Address of the liquidity pool\\n     * @param amountGivenScaled18 Amount given based on kind of the swap (e.g., tokenIn for exact in)\\n     * @param balancesScaled18 Current pool balances\\n     * @param indexIn Index of tokenIn\\n     * @param indexOut Index of tokenOut\\n     * @param sender Originator of the swap transaction\\n     * @param userData Additional (optional) data required for the swap\\n     */\\n    struct SwapParams {\\n        SwapKind kind;\\n        uint256 amountGivenScaled18;\\n        uint256[] balancesScaled18;\\n        uint256 indexIn;\\n        uint256 indexOut;\\n        address sender;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @notice Execute a swap in the pool.\\n     * @param params Swap parameters (see above for struct definition)\\n     * @return amountCalculatedScaled18 Calculated amount for the swap\\n     */\\n    function onSwap(SwapParams calldata params) external returns (uint256 amountCalculatedScaled18);\\n}\\n\",\"keccak256\":\"0x3e1dfd3d723961505c41f6d185a397f1a8dc19e20e6abe46f5ec65c6bce6f56b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IRateProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\ninterface IRateProvider {\\n    /**\\n     * @dev Returns an 18 decimal fixed point number that is the exchange rate of the token to some other underlying\\n     * token. The meaning of this rate depends on the context.\\n     */\\n    function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IVaultAdmin } from \\\"./IVaultAdmin.sol\\\";\\nimport { IVaultExtension } from \\\"./IVaultExtension.sol\\\";\\nimport { IVaultMain } from \\\"./IVaultMain.sol\\\";\\nimport { IVaultErrors } from \\\"./IVaultErrors.sol\\\";\\nimport { IVaultEvents } from \\\"./IVaultEvents.sol\\\";\\n\\ninterface IVault is\\n\\tIVaultMain,\\n\\tIVaultExtension,\\n\\tIVaultAdmin,\\n\\tIVaultErrors,\\n\\tIVaultEvents\\n{\\n\\t/// @dev Returns the main Vault address.\\n\\tfunction vault()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride(IVaultAdmin, IVaultExtension)\\n\\t\\treturns (IVault);\\n}\\n\",\"keccak256\":\"0x9defac7f1a522b6cf6fba6e930d327523fc40db0ea6121b2e6071e757b647e30\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVaultAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IAuthorizer } from \\\"./IAuthorizer.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC4626 } from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\n\\ninterface IVaultAdmin {\\n    /*******************************************************************************\\n                              Constants and immutables\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Returns Vault's pause window end time.\\n     * @dev This value is immutable; the getter can be called by anyone.\\n     */\\n    function getPauseWindowEndTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns Vault's buffer period duration.\\n     * @dev This value is immutable; the getter can be called by anyone.\\n     */\\n    function getBufferPeriodDuration() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns Vault's buffer period end time.\\n     * @dev This value is immutable; the getter can be called by anyone.\\n     */\\n    function getBufferPeriodEndTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the minimum number of tokens in a pool.\\n     * @dev We expect the vast majority of pools to be 2-token.\\n     * @return The token count of a minimal pool\\n     */\\n    function getMinimumPoolTokens() external pure returns (uint256);\\n\\n    /**\\n     * @notice Get the maximum number of tokens in a pool.\\n     * @return The token count of a minimal pool\\n     */\\n    function getMaximumPoolTokens() external pure returns (uint256);\\n\\n    /// @dev Returns the main Vault address.\\n    function vault() external view returns (IVault);\\n\\n    /*******************************************************************************\\n                                    Pool Information\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Retrieve the scaling factors from a pool's rate providers.\\n     * @dev This is not included in `getPoolTokenInfo` since it makes external calls that might revert,\\n     * effectively preventing retrieval of basic pool parameters. Tokens without rate providers will always return\\n     * FixedPoint.ONE (1e18).\\n     */\\n    function getPoolTokenRates(address pool) external view returns (uint256[] memory);\\n\\n    /*******************************************************************************\\n                                    Vault Pausing\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Indicates whether the Vault is paused.\\n     * @return True if the Vault is paused\\n     */\\n    function isVaultPaused() external view returns (bool);\\n\\n    /**\\n     * @notice Returns the paused status, and end times of the Vault's pause window and buffer period.\\n     * @return paused True if the Vault is paused\\n     * @return vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\\n     * @return vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\\n     */\\n    function getVaultPausedState() external view returns (bool, uint256, uint256);\\n\\n    /**\\n     * @notice Pause the Vault: an emergency action which disables all operational state-changing functions.\\n     * @dev This is a permissioned function that will only work during the Pause Window set during deployment.\\n     */\\n    function pauseVault() external;\\n\\n    /**\\n     * @notice Reverse a `pause` operation, and restore the Vault to normal functionality.\\n     * @dev This is a permissioned function that will only work on a paused Vault within the Buffer Period set during\\n     * deployment. Note that the Vault will automatically unpause after the Buffer Period expires.\\n     */\\n    function unpauseVault() external;\\n\\n    /*******************************************************************************\\n                                    Pool Pausing\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Pause the Pool: an emergency action which disables all pool functions.\\n     * @dev This is a permissioned function that will only work during the Pause Window set during pool factory\\n     * deployment.\\n     */\\n    function pausePool(address pool) external;\\n\\n    /**\\n     * @notice Reverse a `pause` operation, and restore the Pool to normal functionality.\\n     * @dev This is a permissioned function that will only work on a paused Pool within the Buffer Period set during\\n     * deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\\n     */\\n    function unpausePool(address pool) external;\\n\\n    /*******************************************************************************\\n                                   Fees\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Sets a new swap fee percentage for the protocol.\\n     * @param newSwapFeePercentage The new swap fee percentage to be set\\n     */\\n    function setProtocolSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    /**\\n     * @notice Sets a new yield fee percentage for the protocol.\\n     * @param newYieldFeePercentage The new swap fee percentage to be set\\n     */\\n    function setProtocolYieldFeePercentage(uint256 newYieldFeePercentage) external;\\n\\n    /**\\n     * @notice Assigns a new static swap fee percentage to the specified pool.\\n     * @param pool The address of the pool for which the static swap fee will be changed\\n     * @param swapFeePercentage The new swap fee percentage to apply to the pool\\n     */\\n    function setStaticSwapFeePercentage(address pool, uint256 swapFeePercentage) external;\\n\\n    /**\\n     * @notice Emitted when the swap fee percentage of a pool is updated.\\n     * @param swapFeePercentage The new swap fee percentage for the pool\\n     */\\n    event SwapFeePercentageChanged(address indexed pool, uint256 indexed swapFeePercentage);\\n\\n    /**\\n     * @notice Collects accumulated protocol fees for the specified array of tokens.\\n     * @dev Fees are sent to msg.sender.\\n     * @param tokens An array of token addresses for which the fees should be collected\\n     */\\n    function collectProtocolFees(IERC20[] calldata tokens) external;\\n\\n    /*******************************************************************************\\n                                    Recovery Mode\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Enable recovery mode for a pool.\\n     * @dev This is a permissioned function.\\n     * @param pool The pool\\n     */\\n    function enableRecoveryMode(address pool) external;\\n\\n    /**\\n     * @notice Disable recovery mode for a pool.\\n     * @dev This is a permissioned function.\\n     * @param pool The pool\\n     */\\n    function disableRecoveryMode(address pool) external;\\n\\n    /*******************************************************************************\\n                                    Queries\\n    *******************************************************************************/\\n\\n    /// @notice Disables queries functionality on the Vault. Can be called only by governance.\\n    function disableQuery() external;\\n\\n    /*******************************************************************************\\n                                Authentication\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Sets a new Authorizer for the Vault.\\n     * @dev The caller must be allowed by the current Authorizer to do this.\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n}\\n\",\"keccak256\":\"0x7741e61bfcab7f3d2201367c4512903991de2e91b10ff022a22f1ea1f7416a91\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVaultErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @dev Errors are namespaced inside an interface to improve DX with Typechain.\\ninterface IVaultErrors {\\n    /*******************************************************************************\\n                            Registration and Initialization\\n    *******************************************************************************/\\n\\n    /**\\n     * @dev A pool has already been registered. `registerPool` may only be called once.\\n     * @param pool The already registered pool\\n     */\\n    error PoolAlreadyRegistered(address pool);\\n\\n    /**\\n     * @dev A pool has already been initialized. `initialize` may only be called once.\\n     * @param pool The already initialized pool\\n     */\\n    error PoolAlreadyInitialized(address pool);\\n\\n    /**\\n     * @dev A pool has not been registered.\\n     * @param pool The unregistered pool\\n     */\\n    error PoolNotRegistered(address pool);\\n\\n    /**\\n     * @dev A referenced pool has not been initialized.\\n     * @param pool The uninitialized pool\\n     */\\n    error PoolNotInitialized(address pool);\\n\\n    /**\\n     * @dev A token was already registered (i.e., it is a duplicate in the pool).\\n     * @param token The duplicate token\\n     */\\n    error TokenAlreadyRegistered(IERC20 token);\\n\\n    /// @dev The token count is below the minimum allowed.\\n    error MinTokens();\\n\\n    /// @dev The token count is above the maximum allowed.\\n    error MaxTokens();\\n\\n    /// @dev Invalid tokens (e.g., zero) cannot be registered.\\n    error InvalidToken();\\n\\n    /// @dev The token type given in a TokenConfig during pool registration is invalid.\\n    error InvalidTokenType();\\n\\n    /// @dev The data in a TokenConfig struct is inconsistent or unsupported.\\n    error InvalidTokenConfiguration();\\n\\n    /**\\n     * @dev The token list passed into an operation does not match the pool tokens in the pool.\\n     * @param pool Address of the pool\\n     * @param expectedToken The correct token at a given index in the pool\\n     * @param actualToken The actual token found at that index\\n     */\\n    error TokensMismatch(address pool, address expectedToken, address actualToken);\\n\\n    /*******************************************************************************\\n                                 Transient Accounting\\n    *******************************************************************************/\\n\\n    /// @dev A transient accounting operation completed with outstanding token deltas.\\n    error BalanceNotSettled();\\n\\n    /**\\n     * @dev In transient accounting, a locker is attempting to execute an operation out of order.\\n     * The caller address should equal the locker.\\n     * @param locker Address of the current locker being processed\\n     * @param caller Address of the caller (msg.sender)\\n     */\\n    error WrongLocker(address locker, address caller);\\n\\n    /// @dev A user called a Vault function (swap, add/remove liquidity) outside the lock context.\\n    error NoLocker();\\n\\n    /**\\n     * @dev The caller attempted to access a Locker at an invalid index.\\n     * @param index The invalid index\\n     */\\n    error LockerOutOfBounds(uint256 index);\\n\\n    /// @dev The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\\n    error BeforeSwapHookFailed();\\n\\n    /// @dev The pool has returned false to the afterSwap hook, indicating the transaction should revert.\\n    error AfterSwapHookFailed();\\n\\n    /// @dev The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\\n    error BeforeInitializeHookFailed();\\n\\n    /// @dev The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\\n    error AfterInitializeHookFailed();\\n\\n    /// @dev The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\\n    error BeforeAddLiquidityHookFailed();\\n\\n    /// @dev The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\\n    error AfterAddLiquidityHookFailed();\\n\\n    /// @dev The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\\n    error BeforeRemoveLiquidityHookFailed();\\n\\n    /// @dev The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\\n    error AfterRemoveLiquidityHookFailed();\\n\\n    /// @dev An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\\n    error RouterNotTrusted();\\n\\n    /*******************************************************************************\\n                                        Swaps\\n    *******************************************************************************/\\n\\n    /// @dev The user tried to swap zero tokens.\\n    error AmountGivenZero();\\n\\n    /// @dev The user attempted to swap a token for itself.\\n    error CannotSwapSameToken();\\n\\n    /// @dev The user attempted to swap a token not in the pool.\\n    error TokenNotRegistered();\\n\\n    /// @dev An amount in or out has exceeded the limit specified in the swap request.\\n    error SwapLimit(uint256 amount, uint256 limit);\\n\\n    /*******************************************************************************\\n                                    Add Liquidity\\n    *******************************************************************************/\\n\\n    /// @dev Add liquidity kind not supported.\\n    error InvalidAddLiquidityKind();\\n\\n    /// @dev A required amountIn exceeds the maximum limit specified for the operation.\\n    error AmountInAboveMax(IERC20 token, uint256 amount, uint256 limit);\\n\\n    /// @dev The BPT amount received from adding liquidity is below the minimum specified for the operation.\\n    error BptAmountOutBelowMin(uint256 amount, uint256 limit);\\n\\n    /// @dev Pool does not support adding liquidity with a customized input.\\n    error DoesNotSupportAddLiquidityCustom();\\n\\n    /*******************************************************************************\\n                                    Remove Liquidity\\n    *******************************************************************************/\\n\\n    /// @dev Remove liquidity kind not supported.\\n    error InvalidRemoveLiquidityKind();\\n\\n    /// @dev The actual amount out is below the minimum limit specified for the operation.\\n    error AmountOutBelowMin(IERC20 token, uint256 amount, uint256 limit);\\n\\n    /// @dev The required BPT amount in exceeds the maximum limit specified for the operation.\\n    error BptAmountInAboveMax(uint256 amount, uint256 limit);\\n\\n    /// @dev Pool does not support removing liquidity with a customized input.\\n    error DoesNotSupportRemoveLiquidityCustom();\\n\\n    /*******************************************************************************\\n                                     Fees\\n    *******************************************************************************/\\n\\n    /// @dev Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\\n    error ProtocolSwapFeePercentageTooHigh();\\n\\n    /// @dev Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\\n    error ProtocolYieldFeePercentageTooHigh();\\n\\n    /// @dev Error raised when the swap fee percentage exceeds the maximum allowed value.\\n    error SwapFeePercentageTooHigh();\\n\\n    /*******************************************************************************\\n                                    Queries\\n    *******************************************************************************/\\n\\n    /// @dev A user tried to execute a query operation when they were disabled.\\n    error QueriesDisabled();\\n\\n    /*******************************************************************************\\n                                Recovery Mode\\n    *******************************************************************************/\\n\\n    /**\\n     * @dev Cannot enable recovery mode when already enabled.\\n     * @param pool The pool\\n     */\\n    error PoolInRecoveryMode(address pool);\\n\\n    /**\\n     * @dev Cannot disable recovery mode when not enabled.\\n     * @param pool The pool\\n     */\\n    error PoolNotInRecoveryMode(address pool);\\n\\n    /*******************************************************************************\\n                                Authentication\\n    *******************************************************************************/\\n\\n    /**\\n     * @dev Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\\n     * @param sender The account attempting to call a permissioned function\\n     */\\n    error SenderIsNotVault(address sender);\\n\\n    /*******************************************************************************\\n                                        Pausing\\n    *******************************************************************************/\\n\\n    /// @dev The caller specified a pause window period longer than the maximum.\\n    error VaultPauseWindowDurationTooLarge();\\n\\n    /// @dev The caller specified a buffer period longer than the maximum.\\n    error PauseBufferPeriodDurationTooLarge();\\n\\n    /// @dev A user tried to perform an operation while the Vault was paused.\\n    error VaultPaused();\\n\\n    /// @dev Governance tried to unpause the Vault when it was not paused.\\n    error VaultNotPaused();\\n\\n    /// @dev Governance tried to pause the Vault after the pause period expired.\\n    error VaultPauseWindowExpired();\\n\\n    /**\\n     * @dev A user tried to perform an operation involving a paused Pool.\\n     * @param pool The paused pool\\n     */\\n    error PoolPaused(address pool);\\n\\n    /**\\n     * @dev Governance tried to unpause the Pool when it was not paused.\\n     * @param pool The unpaused pool\\n     */\\n    error PoolNotPaused(address pool);\\n\\n    /**\\n     * @dev Governance tried to pause a Pool after the pause period expired.\\n     * @param pool The pool\\n     */\\n    error PoolPauseWindowExpired(address pool);\\n\\n    /**\\n     * @dev The caller is not the registered pause manager for the pool.\\n     * @param pool The pool\\n     */\\n    error SenderIsNotPauseManager(address pool);\\n\\n    /*******************************************************************************\\n                                    Miscellaneous\\n    *******************************************************************************/\\n\\n    /// @dev Optional User Data should be empty in the current add / remove liquidity kind.\\n    error UserDataNotSupported();\\n\\n    /// @dev The contract should not receive ETH.\\n    error CannotReceiveEth();\\n\\n    /// @dev The Vault extension was called by an account directly; it can only be called by the Vault via delegatecall.\\n    error NotVaultDelegateCall();\\n\\n    /// @dev Error thrown when a function is not supported.\\n    error OperationNotSupported();\\n\\n    /// @dev The vault extension was configured with an incorrect Vault address.\\n    error WrongVaultExtensionDeployment();\\n\\n    /// @dev The vault admin was configured with an incorrect Vault address.\\n    error WrongVaultAdminDeployment();\\n}\\n\",\"keccak256\":\"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVaultEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IAuthorizer } from \\\"./IAuthorizer.sol\\\";\\nimport { LiquidityManagement, PoolHooks, TokenConfig } from \\\"./VaultTypes.sol\\\";\\n\\ninterface IVaultEvents {\\n    /**\\n     * @notice A Pool was registered by calling `registerPool`.\\n     * @param pool The pool being registered\\n     * @param factory The factory creating the pool\\n     * @param tokenConfig The pool's tokens\\n     * @param pauseWindowEndTime The pool's pause window end time\\n     * @param pauseManager The pool's external pause manager (or 0 for governance)\\n     * @param liquidityManagement Supported liquidity management hook flags\\n     */\\n    event PoolRegistered(\\n        address indexed pool,\\n        address indexed factory,\\n        TokenConfig[] tokenConfig,\\n        uint256 pauseWindowEndTime,\\n        address pauseManager,\\n        PoolHooks hooks,\\n        LiquidityManagement liquidityManagement\\n    );\\n\\n    /**\\n     * @notice A Pool was initialized by calling `initialize`.\\n     * @param pool The pool being initialized\\n     */\\n    event PoolInitialized(address indexed pool);\\n\\n    /**\\n     * @notice Pool balances have changed (e.g., after initialization, add/remove liquidity).\\n     * @param pool The pool being registered\\n     * @param liquidityProvider The user performing the operation\\n     * @param tokens The pool's tokens\\n     * @param deltas The amount each token changed\\n     */\\n    event PoolBalanceChanged(address indexed pool, address indexed liquidityProvider, IERC20[] tokens, int256[] deltas);\\n\\n    /**\\n     * @dev The Vault's pause status has changed.\\n     * @param paused True if the Vault was paused\\n     */\\n    event VaultPausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev A Pool's pause status has changed.\\n     * @param pool The pool that was just paused or unpaused\\n     * @param paused True if the pool was paused\\n     */\\n    event PoolPausedStateChanged(address indexed pool, bool paused);\\n\\n    /**\\n     * @notice Emitted when the protocol swap fee percentage is updated.\\n     * @param swapFeePercentage The updated protocol swap fee percentage\\n     */\\n    event ProtocolSwapFeePercentageChanged(uint256 indexed swapFeePercentage);\\n\\n    /**\\n     * @notice Emitted when the protocol yield fee percentage is updated.\\n     * @param yieldFeePercentage The updated protocol yield fee percentage\\n     */\\n    event ProtocolYieldFeePercentageChanged(uint256 indexed yieldFeePercentage);\\n\\n    /**\\n     * @notice Logs the collection of fees in a specific token and amount.\\n     * @param token The token in which the fee has been collected\\n     * @param amount The amount of the token collected as fees\\n     */\\n    event ProtocolFeeCollected(IERC20 indexed token, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when a protocol swap fee is incurred.\\n     * @dev This is included for traceability of fees to pools. Pending protocol fees on both swap and yield are\\n     * combined. It is an invariant of the system that the total amounts for each token reported here and by\\n     * `ProtocolYieldFeeCharged`, summed over all pools, should equal the total collected for the token reported by\\n     * `ProtocolFeeCollected` when `collectProtocolFees` is called.\\n     *\\n     * @param pool The pool associated with this charge\\n     * @param token The token whose protocol fee balance increased\\n     * @param amount The amount of the protocol fee\\n     */\\n    event ProtocolSwapFeeCharged(address indexed pool, address indexed token, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a protocol swap fee is incurred.\\n     * @dev This is included for traceability of fees to pools. Pending protocol fees on both swap and yield are\\n     * combined. It is an invariant of the system that the total amounts for each token reported here and by\\n     * `ProtocolSwapFeeCharged`, summed over all pools, should equal the total collected for the token reported by\\n     * `ProtocolFeeCollected` when `collectProtocolFees` is called.\\n     *\\n     * @param pool The pool associated with this charge\\n     * @param token The token whose protocol fee balance increased\\n     * @param amount The amount of the protocol fee\\n     */\\n    event ProtocolYieldFeeCharged(address indexed pool, address indexed token, uint256 amount);\\n\\n    /**\\n     * @dev Recovery mode has been enabled or disabled for a pool.\\n     * @param pool The pool\\n     * @param recoveryMode True if recovery mode was enabled\\n     */\\n    event PoolRecoveryModeStateChanged(address indexed pool, bool recoveryMode);\\n\\n    /**\\n     * @notice A new authorizer is set by `setAuthorizer`.\\n     * @param newAuthorizer The address of the new authorizer\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n}\\n\",\"keccak256\":\"0xe561d23e8f311be7274a115a839f4ae3e2b24accc2b3b1fb1e23dbd5ec97ab32\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVaultExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IERC4626 } from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\nimport \\\"./VaultTypes.sol\\\";\\n\\ninterface IVaultExtension {\\n    /*******************************************************************************\\n                              Constants and immutables\\n    *******************************************************************************/\\n\\n    /// @dev Returns the main Vault address.\\n    function vault() external view returns (IVault);\\n\\n    /*******************************************************************************\\n                              Transient Accounting\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Returns the address at the specified index of the _lockers array.\\n     * @param index The index of the locker's address to fetch\\n     * @return The address at the given index\\n     */\\n    function getLocker(uint256 index) external view returns (address);\\n\\n    /**\\n     * @notice Returns the total number of lockers.\\n     * @return The number of lockers\\n     */\\n    function getLockersCount() external view returns (uint256);\\n\\n    /**\\n     *  @notice Returns the count of non-zero deltas.\\n     *  @return The current value of _nonzeroDeltaCount\\n     */\\n    function getNonzeroDeltaCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the token delta for a specific user and token.\\n     * @dev This function allows reading the value from the `_tokenDeltas` mapping.\\n     * @param user The address of the user for whom the delta is being fetched\\n     * @param token The token for which the delta is being fetched\\n     * @return The delta of the specified token for the specified user\\n     */\\n    function getTokenDelta(address user, IERC20 token) external view returns (int256);\\n\\n    /**\\n     * @notice Retrieves the reserve (i.e., total Vault balance) of a given token.\\n     * @param token The token for which to retrieve the reserve\\n     * @return The amount of reserves for the given token\\n     */\\n    function getReservesOf(IERC20 token) external view returns (uint256);\\n\\n    /*******************************************************************************\\n                                    Pool Registration\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Registers a pool, associating it with its factory and the tokens it manages.\\n     * @dev A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely\\n     * by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an\\n     * additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused\\n     * pool will automatically unpause.\\n     *\\n     * A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a\\n     * multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to\\n     * the Vault.\\n     *\\n     * If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the\\n     * authorizer.\\n     *\\n     * @param pool The address of the pool being registered\\n     * @param tokenConfig An array of descriptors for the tokens the pool will manage\\n     * @param pauseWindowEndTime The timestamp after which it is no longer possible to pause the pool\\n     * @param pauseManager Optional contract the Vault will allow to pause the pool\\n     * @param hookConfig Flags indicating which hooks the pool supports\\n     * @param liquidityManagement Liquidity management flags with implemented methods\\n     */\\n    function registerPool(\\n        address pool,\\n        TokenConfig[] memory tokenConfig,\\n        uint256 pauseWindowEndTime,\\n        address pauseManager,\\n        PoolHooks calldata hookConfig,\\n        LiquidityManagement calldata liquidityManagement\\n    ) external;\\n\\n    /**\\n     * @notice Checks whether a pool is registered.\\n     * @param pool Address of the pool to check\\n     * @return True if the pool is registered, false otherwise\\n     */\\n    function isPoolRegistered(address pool) external view returns (bool);\\n\\n    /**\\n     * @notice Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\\n     * @param pool Address of the pool to initialize\\n     * @param to Address that will receive the output BPT\\n     * @param tokens Tokens used to seed the pool (must match the registered tokens)\\n     * @param exactAmountsIn Exact amounts of input tokens\\n     * @param minBptAmountOut Minimum amount of output pool tokens\\n     * @param userData Additional (optional) data required for adding initial liquidity\\n     * @return bptAmountOut Output pool token amount\\n     */\\n    function initialize(\\n        address pool,\\n        address to,\\n        IERC20[] memory tokens,\\n        uint256[] memory exactAmountsIn,\\n        uint256 minBptAmountOut,\\n        bytes memory userData\\n    ) external returns (uint256 bptAmountOut);\\n\\n    /*******************************************************************************\\n                                    Pool Information\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Checks whether a pool is initialized.\\n     * @dev An initialized pool can be considered registered as well.\\n     * @param pool Address of the pool to check\\n     * @return True if the pool is initialized, false otherwise\\n     */\\n    function isPoolInitialized(address pool) external view returns (bool);\\n\\n    /**\\n     * @notice Gets the tokens registered to a pool.\\n     * @param pool Address of the pool\\n     * @return tokens List of tokens in the pool\\n     */\\n    function getPoolTokens(address pool) external view returns (IERC20[] memory);\\n\\n    /**\\n     * @notice Gets the raw data for a pool: tokens, raw balances, scaling factors.\\n     * @return tokens Tokens registered to the pool\\n     * @return tokenTypes The types of all registered tokens\\n     * @return balancesRaw Corresponding raw balances of the tokens\\n     * @return scalingFactors Corresponding scalingFactors of the tokens\\n     * @return rateProviders Corresponding rateProviders of the tokens (or zero for tokens with no rates)\\n     */\\n    function getPoolTokenInfo(\\n        address pool\\n    )\\n        external\\n        view\\n        returns (IERC20[] memory, TokenType[] memory, uint256[] memory, uint256[] memory, IRateProvider[] memory);\\n\\n    /**\\n     * @notice Gets the configuration parameters of a pool.\\n     * @param pool Address of the pool\\n     * @return Pool configuration\\n     */\\n    function getPoolConfig(address pool) external view returns (PoolConfig memory);\\n\\n    /*******************************************************************************\\n                                    Pool Tokens\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Gets total supply of a given ERC20 token.\\n     * @param token Token's address\\n     * @return Total supply of the token\\n     */\\n    function totalSupply(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets balance of an account for a given ERC20 token.\\n     * @param token Token's address\\n     * @param account Account's address\\n     * @return Balance of the account for the token\\n     */\\n    function balanceOf(address token, address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Gets allowance of a spender for a given ERC20 token and owner.\\n     * @param token Token's address\\n     * @param owner Owner's address\\n     * @param spender Spender's address\\n     * @return Amount of tokens the spender is allowed to spend\\n     */\\n    function allowance(address token, address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfers pool token from owner to a recipient.\\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\\n     * the pool contract, so msg.sender is used as the token address.\\n     *\\n     * @param owner Owner's address\\n     * @param to Recipient's address\\n     * @param amount Amount of tokens to transfer\\n     * @return True if successful, false otherwise\\n     */\\n    function transfer(address owner, address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice Transfers pool token from a sender to a recipient using an allowance.\\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\\n     * the pool contract, so msg.sender is used as the token address.\\n     *\\n     * @param spender Address allowed to perform the transfer\\n     * @param from Sender's address\\n     * @param to Recipient's address\\n     * @param amount Amount of tokens to transfer\\n     * @return True if successful, false otherwise\\n     */\\n    function transferFrom(address spender, address from, address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice Approves a spender to spend pool tokens on behalf of sender.\\n     * @dev Notice that the pool token address is not included in the params. This function is exclusively called by\\n     * the pool contract, so msg.sender is used as the token address.\\n     *\\n     * @param owner Owner's address\\n     * @param spender Spender's address\\n     * @param amount Amount of tokens to approve\\n     * @return True if successful, false otherwise\\n     */\\n    function approve(address owner, address spender, uint256 amount) external returns (bool);\\n\\n    /*******************************************************************************\\n                                    Pool Pausing\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Indicates whether a pool is paused.\\n     * @param pool The pool to be checked\\n     * @return True if the pool is paused\\n     */\\n    function isPoolPaused(address pool) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the paused status, and end times of the Pool's pause window and buffer period.\\n     * @dev Note that even when set to a paused state, the pool will automatically unpause at the end of\\n     * the buffer period.\\n     *\\n     * @param pool The pool whose data is requested\\n     * @return paused True if the Pool is paused\\n     * @return poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\\n     * @return poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\\n     * @return pauseManager The pause manager, or the zero address\\n     */\\n    function getPoolPausedState(address pool) external view returns (bool, uint256, uint256, address);\\n\\n    /*******************************************************************************\\n                                   Fees\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Retrieves the current protocol swap fee percentage.\\n     * @return The current protocol swap fee percentage\\n     */\\n    function getProtocolSwapFeePercentage() external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the current protocol yield fee percentage.\\n     * @return The current protocol yield fee percentage\\n     */\\n    function getProtocolYieldFeePercentage() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the accumulated swap and yield fee in `token` collected by the protocol.\\n     * @param token The address of the token in which fees have been accumulated\\n     * @return The total amount of fees accumulated in the specified token\\n     */\\n    function getProtocolFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Fetches the static swap fee percentage for a given pool.\\n     * @param pool The address of the pool whose static swap fee percentage is being queried\\n     * @return The current static swap fee percentage for the specified pool\\n     */\\n    function getStaticSwapFeePercentage(address pool) external view returns (uint256);\\n\\n    /*******************************************************************************\\n                                    Recovery Mode\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Checks whether a pool is in recovery mode.\\n     * @param pool Address of the pool to check\\n     * @return True if the pool is initialized, false otherwise\\n     */\\n    function isPoolInRecoveryMode(address pool) external view returns (bool);\\n\\n    /**\\n     * @notice Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out.\\n     * The request is implemented by the Vault without any interaction with the pool, ensuring that\\n     * it works the same for all pools, and cannot be disabled by a new pool type.\\n     *\\n     * @param pool Address of the pool\\n     * @param from Address of user to burn pool tokens from\\n     * @param exactBptAmountIn Input pool token amount\\n     * @return amountsOut Actual calculated amounts of output tokens, sorted in token registration order\\n     */\\n    function removeLiquidityRecovery(\\n        address pool,\\n        address from,\\n        uint256 exactBptAmountIn\\n    ) external returns (uint256[] memory amountsOut);\\n\\n    /*******************************************************************************\\n                                    Queries\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Performs a callback on msg.sender with arguments provided in `data`.\\n     * @dev Used to query a set of operations on the Vault. Only off-chain eth_call are allowed,\\n     * anything else will revert.\\n     *\\n     * Allows querying any operation on the Vault that has the `withLocker` modifier.\\n     *\\n     * Allows the external calling of a function via the Vault contract to\\n     * access Vault's functions guarded by `withLocker`.\\n     * `transient` modifier ensuring balances changes within the Vault are settled.\\n     *\\n     * @param data Contains function signature and args to be passed to the msg.sender\\n     * @return result Resulting data from the call\\n     */\\n    function quote(bytes calldata data) external payable returns (bytes memory result);\\n\\n    /**\\n     * @notice Checks if the queries enabled on the Vault.\\n     * @return If true, then queries are disabled\\n     */\\n    function isQueryDisabled() external view returns (bool);\\n\\n    /*******************************************************************************\\n                                     Default lockers\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Returns the Vault Admin contract address.\\n     */\\n    function getVaultAdmin() external view returns (address);\\n}\\n\",\"keccak256\":\"0x95690cde8cb09617aab94ca6eb8df973576d96d75a37eacd071f6469d91bcad7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IVaultMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IAuthorizer } from \\\"./IAuthorizer.sol\\\";\\nimport { IRateProvider } from \\\"./IRateProvider.sol\\\";\\nimport \\\"./VaultTypes.sol\\\";\\n\\ninterface IVaultMain {\\n    /*******************************************************************************\\n                              Transient Accounting\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Creates a lock context for a sequence of operations.\\n     * @dev Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`,\\n     * meaning all balances for the caller have to be settled at the end.\\n     *\\n     * @param data Contains function signature and args to be passed to the msg.sender\\n     * @return result Resulting data from the call\\n     */\\n    function lock(bytes calldata data) external payable returns (bytes memory result);\\n\\n    /**\\n     * @notice Settles deltas for a token; must be successful for the current lock to be released.\\n     * @param token Token's address\\n     * @return paid Amount paid during settlement\\n     */\\n    function settle(IERC20 token) external returns (uint256 paid);\\n\\n    /**\\n     * @notice Sends tokens to a recipient.\\n     * @param token Token's address\\n     * @param to Recipient's address\\n     * @param amount Amount of tokens to send\\n     */\\n    function sendTo(IERC20 token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Transfers tokens from a sender to the Vault.\\n     * @dev This function can transfer tokens from users using allowances granted to the Vault.\\n     * Only trusted routers are permitted to call it. Untrusted routers should use `settle` instead.\\n     *\\n     * @param token Token's address\\n     * @param from Sender's address\\n     * @param amount Amount of tokens to pull from the sender into the Vault\\n     */\\n    function takeFrom(IERC20 token, address from, uint256 amount) external;\\n\\n    /***************************************************************************\\n                                   Add Liquidity\\n    ***************************************************************************/\\n\\n    /// @dev Introduce to avoid \\\"stack too deep\\\" - without polluting the Add/RemoveLiquidity params interface.\\n    struct LiquidityLocals {\\n        uint256 tokenIndex;\\n        uint256[] limitsScaled18;\\n    }\\n\\n    /**\\n     * @notice Adds liquidity to a pool.\\n     * @dev Caution should be exercised when adding liquidity because the Vault has the capability\\n     * to transfer tokens from any user, given that it holds all allowances.\\n     *\\n     * @param params Parameters for the add liquidity (see above for struct definition)\\n     * @return amountsIn Actual amounts of input tokens\\n     * @return bptAmountOut Output pool token amount\\n     * @return returnData Arbitrary (optional) data with encoded response from the pool\\n     */\\n    function addLiquidity(\\n        AddLiquidityParams memory params\\n    ) external returns (uint256[] memory amountsIn, uint256 bptAmountOut, bytes memory returnData);\\n\\n    /***************************************************************************\\n                                 Remove Liquidity\\n    ***************************************************************************/\\n\\n    /**\\n     * @notice Removes liquidity from a pool.\\n     * @dev Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user.\\n     * Untrusted routers require prior approval from the user. This is the only function allowed to call\\n     * _queryModeBalanceIncrease (and only in a query context).\\n     *\\n     * @param params Parameters for the remove liquidity (see above for struct definition)\\n     * @return bptAmountIn Actual amount of BPT burnt\\n     * @return amountsOut Actual amounts of output tokens\\n     * @return returnData Arbitrary (optional) data with encoded response from the pool\\n     */\\n    function removeLiquidity(\\n        RemoveLiquidityParams memory params\\n    ) external returns (uint256 bptAmountIn, uint256[] memory amountsOut, bytes memory returnData);\\n\\n    /***************************************************************************\\n                                       Swaps\\n    ***************************************************************************/\\n\\n    /**\\n     * @notice A swap has occurred.\\n     * @param pool The pool with the tokens being swapped\\n     * @param tokenIn The token entering the Vault (balance increases)\\n     * @param tokenOut The token leaving the Vault (balance decreases)\\n     * @param amountIn Number of tokenIn tokens\\n     * @param amountOut Number of tokenOut tokens\\n     * @param swapFeeAmount Swap fee amount paid in token out\\n     */\\n    event Swap(\\n        address indexed pool,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 swapFeeAmount\\n    );\\n\\n    /**\\n     * @notice Swaps tokens based on provided parameters.\\n     * @dev All parameters are given in raw token decimal encoding.\\n     * @param params Parameters for the swap (see above for struct definition)\\n     * @return amountCalculatedRaw Calculated swap amount\\n     * @return amountInRaw Amount of input tokens for the swap\\n     * @return amountOutRaw Amount of output tokens from the swap\\n     */\\n    function swap(\\n        SwapParams memory params\\n    ) external returns (uint256 amountCalculatedRaw, uint256 amountInRaw, uint256 amountOutRaw);\\n\\n    /*******************************************************************************\\n                                    Pool Information\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Gets the index of a token in a given pool.\\n     * @dev Reverts if the pool is not registered, or if the token does not belong to the pool.\\n     * @param pool Address of the pool\\n     * @param token Address of the token\\n     * @return tokenCount Number of tokens in the pool\\n     * @return index Index corresponding to the given token in the pool's token list\\n     */\\n    function getPoolTokenCountAndIndexOfToken(address pool, IERC20 token) external view returns (uint256, uint256);\\n\\n    /*******************************************************************************\\n                                Authentication\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Returns the Vault's Authorizer.\\n     * @return Address of the authorizer\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /*******************************************************************************\\n                                     Miscellaneous\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Returns the Vault Extension address.\\n     */\\n    function getVaultExtension() external view returns (address);\\n}\\n\",\"keccak256\":\"0xda48e9312d7b1428fa89b30406b586262aab2d7d0281ebbdbbfaef1375240849\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/VaultTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IRateProvider } from \\\"./IRateProvider.sol\\\";\\n\\n/// @dev Represents a pool's hooks.\\nstruct PoolHooks {\\n    bool shouldCallBeforeInitialize;\\n    bool shouldCallAfterInitialize;\\n    bool shouldCallBeforeSwap;\\n    bool shouldCallAfterSwap;\\n    bool shouldCallBeforeAddLiquidity;\\n    bool shouldCallAfterAddLiquidity;\\n    bool shouldCallBeforeRemoveLiquidity;\\n    bool shouldCallAfterRemoveLiquidity;\\n}\\n\\nstruct LiquidityManagement {\\n    bool supportsAddLiquidityCustom;\\n    bool supportsRemoveLiquidityCustom;\\n}\\n\\n/// @dev Represents a pool's configuration, including hooks.\\nstruct PoolConfig {\\n    bool isPoolRegistered;\\n    bool isPoolInitialized;\\n    bool isPoolPaused;\\n    bool isPoolInRecoveryMode;\\n    bool hasDynamicSwapFee;\\n    uint64 staticSwapFeePercentage; // stores an 18-decimal FP value (max FixedPoint.ONE)\\n    uint24 tokenDecimalDiffs; // stores 18-(token decimals), for each token\\n    uint32 pauseWindowEndTime;\\n    PoolHooks hooks;\\n    LiquidityManagement liquidityManagement;\\n}\\n\\n/**\\n * @dev Token types supported by the Vault. In general, pools may contain any combination of these tokens.\\n * STANDARD tokens (e.g., BAL, WETH) have no rate provider.\\n * WITH_RATE tokens (e.g., wstETH) require rates but cannot be directly wrapped or unwrapped.\\n * In the case of wstETH, this is because the underlying stETH token is rebasing, and such tokens are unsupported\\n * by the Vault.\\n * ERC4626 tokens (e.g., waDAI) have rates, and can be directly wrapped and unwrapped. The token must conform to\\n * a subset of IERC4626, and functions as its own rate provider. To the outside world (e.g., callers of\\n * `getPoolTokens`), the pool will appear to contain the underlying base token (DAI, for waDAI), though the\\n * wrapped token will be registered and stored in the pool's balance in the Vault.\\n *\\n * NB: STANDARD must always be the first enum element, so that newly initialized data structures default to Standard.\\n */\\nenum TokenType {\\n    STANDARD,\\n    WITH_RATE,\\n    ERC4626\\n}\\n\\n/**\\n * @dev Encapsulate the data required for the Vault to support a token of the given type.\\n * For STANDARD or ERC4626 tokens, the rate provider address will be 0. By definition, ERC4626 tokens cannot be\\n * yield exempt, so the `yieldFeeExempt` flag must be false when registering them.\\n *\\n * @param token The token address\\n * @param tokenType The token type (see the enum for supported types)\\n * @param rateProvider The rate provider for a token (see further documentation above)\\n * @param yieldFeeExempt Flag indicating whether yield fees should be charged on this token\\n */\\nstruct TokenConfig {\\n    IERC20 token;\\n    TokenType tokenType;\\n    IRateProvider rateProvider;\\n    bool yieldFeeExempt;\\n}\\n\\nstruct PoolData {\\n    PoolConfig poolConfig;\\n    TokenConfig[] tokenConfig;\\n    uint256[] balancesRaw;\\n    uint256[] balancesLiveScaled18;\\n    uint256[] tokenRates;\\n    uint256[] decimalScalingFactors;\\n}\\n\\nenum Rounding {\\n    ROUND_UP,\\n    ROUND_DOWN\\n}\\n\\n/*******************************************************************************\\n                                    Swaps\\n*******************************************************************************/\\n\\nenum SwapKind {\\n    EXACT_IN,\\n    EXACT_OUT\\n}\\n\\n/**\\n * @dev Data for a swap operation.\\n * @param kind Type of swap (Exact In or Exact Out)\\n * @param pool The pool with the tokens being swapped\\n * @param tokenIn The token entering the Vault (balance increases)\\n * @param tokenOut The token leaving the Vault (balance decreases)\\n * @param amountGivenRaw Amount specified for tokenIn or tokenOut (depending on the type of swap)\\n * @param limitRaw\\n * @param userData Additional (optional) user data\\n */\\nstruct SwapParams {\\n    SwapKind kind;\\n    address pool;\\n    IERC20 tokenIn;\\n    IERC20 tokenOut;\\n    uint256 amountGivenRaw;\\n    uint256 limitRaw;\\n    bytes userData;\\n}\\n\\n/*******************************************************************************\\n                                Add liquidity\\n*******************************************************************************/\\n\\nenum AddLiquidityKind {\\n    UNBALANCED,\\n    SINGLE_TOKEN_EXACT_OUT,\\n    CUSTOM\\n}\\n\\n/**\\n * @dev Data for an add liquidity operation.\\n * @param pool Address of the pool\\n * @param to Address of user to mint to\\n * @param maxAmountsIn Maximum amounts of input tokens\\n * @param minBptAmountOut Minimum amount of output pool tokens\\n * @param kind Add liquidity kind\\n * @param userData Optional user data\\n */\\nstruct AddLiquidityParams {\\n    address pool;\\n    address to;\\n    uint256[] maxAmountsIn;\\n    uint256 minBptAmountOut;\\n    AddLiquidityKind kind;\\n    bytes userData;\\n}\\n\\n/*******************************************************************************\\n                                Remove liquidity\\n*******************************************************************************/\\n\\nenum RemoveLiquidityKind {\\n    PROPORTIONAL,\\n    SINGLE_TOKEN_EXACT_IN,\\n    SINGLE_TOKEN_EXACT_OUT,\\n    CUSTOM\\n}\\n\\n/**\\n * @param pool Address of the pool\\n * @param from Address of user to burn from\\n * @param maxBptAmountIn Maximum amount of input pool tokens\\n * @param minAmountsOut Minimum amounts of output tokens\\n * @param kind Remove liquidity kind\\n * @param userData Optional user data\\n */\\nstruct RemoveLiquidityParams {\\n    address pool;\\n    address from;\\n    uint256 maxBptAmountIn;\\n    uint256[] minAmountsOut;\\n    RemoveLiquidityKind kind;\\n    bytes userData;\\n}\\n\",\"keccak256\":\"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/BalancerPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.4;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport { Nonces } from \\\"@openzeppelin/contracts/utils/Nonces.sol\\\";\\nimport { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IVaultErrors } from \\\"../interfaces/IVault.sol\\\";\\n\\n/**\\n * @notice A fully ERC20-compatible token to be used as the base contract for Balancer Pools,\\n * with all the data and implementation delegated to the ERC20Multitoken contract.\\n\\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n */\\ncontract BalancerPoolToken is\\n\\tIERC20,\\n\\tIERC20Metadata,\\n\\tIERC20Permit,\\n\\tEIP712,\\n\\tNonces\\n{\\n\\tbytes32 public constant PERMIT_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\t\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n\\t\\t);\\n\\n\\t// @dev Permit deadline has expired.\\n\\terror ERC2612ExpiredSignature(uint256 deadline);\\n\\n\\t// @dev Mismatched signature.\\n\\terror ERC2612InvalidSigner(address signer, address owner);\\n\\n\\tIVault private immutable _vault;\\n\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\n\\tmodifier onlyVault() {\\n\\t\\t_ensureOnlyVault();\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _ensureOnlyVault() private view {\\n\\t\\tif (msg.sender != address(_vault)) {\\n\\t\\t\\trevert IVaultErrors.SenderIsNotVault(msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\tconstructor(\\n\\t\\tIVault vault_,\\n\\t\\tstring memory name_,\\n\\t\\tstring memory symbol_\\n\\t) EIP712(name_, \\\"1\\\") {\\n\\t\\t_vault = vault_;\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t}\\n\\n\\t/// @inheritdoc IERC20Metadata\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/// @inheritdoc IERC20Metadata\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/// @inheritdoc IERC20Metadata\\n\\tfunction decimals() public pure returns (uint8) {\\n\\t\\t// Always 18 decimals for BPT.\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/// @inheritdoc IERC20\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _vault.totalSupply(address(this));\\n\\t}\\n\\n\\tfunction getVault() public view returns (IVault) {\\n\\t\\treturn _vault;\\n\\t}\\n\\n\\t/// @inheritdoc IERC20\\n\\tfunction balanceOf(address account) public view returns (uint256) {\\n\\t\\treturn _vault.balanceOf(address(this), account);\\n\\t}\\n\\n\\t/// @inheritdoc IERC20\\n\\tfunction transfer(address to, uint256 amount) public returns (bool) {\\n\\t\\t// Vault will perform the transfer and call emitTransfer to emit the event from this contract.\\n\\t\\t_vault.transfer(msg.sender, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @inheritdoc IERC20\\n\\tfunction allowance(\\n\\t\\taddress owner,\\n\\t\\taddress spender\\n\\t) public view returns (uint256) {\\n\\t\\treturn _vault.allowance(address(this), owner, spender);\\n\\t}\\n\\n\\t/// @inheritdoc IERC20\\n\\tfunction approve(address spender, uint256 amount) public returns (bool) {\\n\\t\\t// Vault will perform the approval and call emitApproval to emit the event from this contract.\\n\\t\\t_vault.approve(msg.sender, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// @inheritdoc IERC20\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) public returns (bool) {\\n\\t\\t// Vault will perform the transfer and call emitTransfer to emit the event from this contract.\\n\\t\\t_vault.transferFrom(msg.sender, from, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/// Accounting is centralized in the MultiToken contract, and the actual transfers and approvals\\n\\t/// are done there. Operations can be initiated from either the token contract or the MultiToken.\\n\\t///\\n\\t/// To maintain compliance with the ERC-20 standard, and conform to the expections of off-chain processes,\\n\\t/// the MultiToken calls `emitTransfer` and `emitApproval` during those operations, so that the event is emitted\\n\\t/// only from the token contract. These events are NOT defined in the MultiToken contract.\\n\\n\\t/// @dev Emit the Transfer event. This function can only be called by the MultiToken.\\n\\tfunction emitTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external onlyVault {\\n\\t\\temit Transfer(from, to, amount);\\n\\t}\\n\\n\\t/// @dev Emit the Approval event. This function can only be called by the MultiToken.\\n\\tfunction emitApproval(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) external onlyVault {\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\t// @inheritdoc IERC20Permit\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public virtual {\\n\\t\\t// solhint-disable-next-line not-rely-on-time\\n\\t\\tif (block.timestamp > deadline) {\\n\\t\\t\\trevert ERC2612ExpiredSignature(deadline);\\n\\t\\t}\\n\\n\\t\\tbytes32 structHash = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tPERMIT_TYPEHASH,\\n\\t\\t\\t\\towner,\\n\\t\\t\\t\\tspender,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t_useNonce(owner),\\n\\t\\t\\t\\tdeadline\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tbytes32 hash = _hashTypedDataV4(structHash);\\n\\n\\t\\taddress signer = ECDSA.recover(hash, v, r, s);\\n\\t\\tif (signer != owner) {\\n\\t\\t\\trevert ERC2612InvalidSigner(signer, owner);\\n\\t\\t}\\n\\n\\t\\t_vault.approve(owner, spender, amount);\\n\\t}\\n\\n\\t// @inheritdoc IERC20Permit\\n\\tfunction nonces(\\n\\t\\taddress owner\\n\\t) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n\\t\\treturn super.nonces(owner);\\n\\t}\\n\\n\\t// @inheritdoc IERC20Permit\\n\\t// solhint-disable-next-line func-name-mixedcase\\n\\tfunction DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n\\t\\treturn _domainSeparatorV4();\\n\\t}\\n}\\n\",\"keccak256\":\"0x5ed911753ffab3ecb76c2f2eb9f6d8b2b682da0d1494add26b34b7c8346fd721\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b50604051620019fc380380620019fc833981016040819052620000359162000294565b6040805180820190915260018152603160f81b602082015283908390839082906200006282600062000142565b610120526200007381600162000142565b61014052815160208084019190912060e052815190820120610100524660a0526200010160e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526001600160a01b038316610160526003620001268382620003ad565b506004620001358282620003ad565b50505050505050620004d3565b600060208351101562000162576200015a836200017b565b905062000175565b816200016f8482620003ad565b5060ff90505b92915050565b600080829050601f81511115620001b2578260405163305a27a960e01b8152600401620001a9919062000479565b60405180910390fd5b8051620001bf82620004ae565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001fa578181015183820152602001620001e0565b50506000910152565b600082601f8301126200021557600080fd5b81516001600160401b0380821115620002325762000232620001c7565b604051601f8301601f19908116603f011681019082821181831017156200025d576200025d620001c7565b816040528381528660208588010111156200027757600080fd5b6200028a846020830160208901620001dd565b9695505050505050565b600080600060608486031215620002aa57600080fd5b83516001600160a01b0381168114620002c257600080fd5b60208501519093506001600160401b0380821115620002e057600080fd5b620002ee8783880162000203565b935060408601519150808211156200030557600080fd5b50620003148682870162000203565b9150509250925092565b600181811c908216806200033357607f821691505b6020821081036200035457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a857600081815260208120601f850160051c81016020861015620003835750805b601f850160051c820191505b81811015620003a4578281556001016200038f565b5050505b505050565b81516001600160401b03811115620003c957620003c9620001c7565b620003e181620003da84546200031e565b846200035a565b602080601f831160018114620004195760008415620004005750858301515b600019600386901b1c1916600185901b178555620003a4565b600085815260208120601f198616915b828110156200044a5788860151825594840194600190910190840162000429565b5085821015620004695787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200049a816040850160208701620001dd565b601f01601f19169190910160400192915050565b80516020808301519190811015620003545760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516101605161148b62000571600039600081816102a4015281816103d0015281816104b401528181610563015281816106b6015281816108070152818161098e01528181610a380152610ab701526000610c5801526000610c2b01526000610bd301526000610bab01526000610b0601526000610b3001526000610b5a015261148b6000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b857806389c065681161007c57806389c06568146102885780638d928af81461029757806395d89b41146102ce578063a9059cbb146102d6578063d505accf146102e9578063dd62ed3e146102fc57600080fd5b806370a082311461021f57806372c98186146102325780637ecebe001461024757806380de451d1461025a57806384b0196e1461026d57600080fd5b806323de6651116100ff57806323de6651146101b957806330adf81f146101ce578063313ce567146101f55780633644e515146102045780635687f2b81461020c57600080fd5b806306fdde031461013c578063095ea7b31461015a57806316a0b3e01461017d57806318160ddd1461019e57806323b872dd146101a6575b600080fd5b61014461030f565b6040516101519190610fbd565b60405180910390f35b61016d610168366004610fec565b6103a1565b6040519015158152602001610151565b61019061018b3660046110c7565b61044c565b604051908152602001610151565b61019061049c565b61016d6101b4366004611115565b61052c565b6101cc6101c7366004611115565b6105dd565b005b6101907f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60405160128152602001610151565b610190610637565b6101cc61021a366004611115565b610641565b61019061022d366004611151565b61068e565b61019061024036600461116c565b6020013590565b610190610255366004611151565b610723565b6101906102683660046111a7565b610741565b610275610783565b60405161015197969594939291906111e4565b6060604051610151919061127a565b6040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152602001610151565b6101446107c9565b61016d6102e4366004610fec565b6107d8565b6101cc6102f73660046112bb565b610838565b61019061030a36600461132e565b610a08565b60606003805461031e90611361565b80601f016020809104026020016040519081016040528092919081815260200182805461034a90611361565b80156103975780601f1061036c57610100808354040283529160200191610397565b820191906000526020600020905b81548152906001019060200180831161037a57829003601f168201915b5050505050905090565b60405163e1f21c6760e01b81523360048201526001600160a01b038381166024830152604482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e1f21c67906064015b6020604051808303816000875af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610440919061139b565b50600190505b92915050565b60008061045885610741565b90508061046584826113d3565b868681518110610477576104776113ea565b60200260200101516104899190611400565b6104939190611413565b95945050505050565b6040516339370aa960e21b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e4dc2aa490602401602060405180830381865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190611426565b905090565b604051630aed65f560e11b81523360048201526001600160a01b0384811660248301528381166044830152606482018390526000917f0000000000000000000000000000000000000000000000000000000000000000909116906315dacbea906084016020604051808303816000875af11580156105ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d2919061139b565b506001949350505050565b6105e5610aac565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161062a91815260200190565b60405180910390a3505050565b6000610527610af9565b610649610aac565b816001600160a01b0316836001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161062a91815260200190565b604051633de222bb60e21b81523060048201526001600160a01b0382811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063f7888aec90604401602060405180830381865afa1580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104469190611426565b6001600160a01b038116600090815260026020526040812054610446565b600081600181518110610756576107566113ea565b602002602001015182600081518110610771576107716113ea565b60200260200101516104469190611400565b600060608060008060006060610797610c24565b61079f610c51565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461031e90611361565b6040516317d5759960e31b81523360048201526001600160a01b038381166024830152604482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063beabacc8906064016103fd565b834211156108615760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886108ae8c6001600160a01b0316600090815260026020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061090982610c7e565b9050600061091982878787610cab565b9050896001600160a01b0316816001600160a01b031614610960576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610858565b60405163e1f21c6760e01b81526001600160a01b038b811660048301528a81166024830152604482018a90527f0000000000000000000000000000000000000000000000000000000000000000169063e1f21c67906064016020604051808303816000875af11580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb919061139b565b5050505050505050505050565b60405163927da10560e01b81523060048201526001600160a01b03838116602483015282811660448301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063927da10590606401602060405180830381865afa158015610a81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa59190611426565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af75760405163089676d560e01b8152336004820152602401610858565b565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610b5257507f000000000000000000000000000000000000000000000000000000000000000046145b15610b7c57507f000000000000000000000000000000000000000000000000000000000000000090565b610527604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60606105277f00000000000000000000000000000000000000000000000000000000000000006000610cd9565b60606105277f00000000000000000000000000000000000000000000000000000000000000006001610cd9565b6000610446610c8b610af9565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600080610cbd88888888610d84565b925092509250610ccd8282610e53565b50909695505050505050565b606060ff8314610cf357610cec83610f10565b9050610446565b818054610cff90611361565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2b90611361565b8015610d785780601f10610d4d57610100808354040283529160200191610d78565b820191906000526020600020905b815481529060010190602001808311610d5b57829003601f168201915b50505050509050610446565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610dbf5750600091506003905082610e49565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610e13573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e3f57506000925060019150829050610e49565b9250600091508190505b9450945094915050565b6000826003811115610e6757610e6761143f565b03610e70575050565b6001826003811115610e8457610e8461143f565b03610ea25760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610eb657610eb661143f565b03610ed75760405163fce698f760e01b815260048101829052602401610858565b6003826003811115610eeb57610eeb61143f565b03610f0c576040516335e2f38360e21b815260048101829052602401610858565b5050565b60606000610f1d83610f4f565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f81111561044657604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b81811015610f9d57602081850181015186830182015201610f81565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610aa56020830184610f77565b80356001600160a01b0381168114610fe757600080fd5b919050565b60008060408385031215610fff57600080fd5b61100883610fd0565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261103d57600080fd5b8135602067ffffffffffffffff8083111561105a5761105a611016565b8260051b604051601f19603f8301168101818110848211171561107f5761107f611016565b60405293845285810183019383810192508785111561109d57600080fd5b83870191505b848210156110bc578135835291830191908301906110a3565b979650505050505050565b6000806000606084860312156110dc57600080fd5b833567ffffffffffffffff8111156110f357600080fd5b6110ff8682870161102c565b9660208601359650604090950135949350505050565b60008060006060848603121561112a57600080fd5b61113384610fd0565b925061114160208501610fd0565b9150604084013590509250925092565b60006020828403121561116357600080fd5b610aa582610fd0565b60006020828403121561117e57600080fd5b813567ffffffffffffffff81111561119557600080fd5b820160e08185031215610aa557600080fd5b6000602082840312156111b957600080fd5b813567ffffffffffffffff8111156111d057600080fd5b6111dc8482850161102c565b949350505050565b60ff60f81b881681526000602060e08184015261120460e084018a610f77565b8381036040850152611216818a610f77565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156112685783518352928401929184019160010161124c565b50909c9b505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610ccd5783516001600160a01b031683529284019291840191600101611296565b600080600080600080600060e0888a0312156112d657600080fd5b6112df88610fd0565b96506112ed60208901610fd0565b95506040880135945060608801359350608088013560ff8116811461131157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561134157600080fd5b61134a83610fd0565b915061135860208401610fd0565b90509250929050565b600181811c9082168061137557607f821691505b60208210810361139557634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156113ad57600080fd5b81518015158114610aa557600080fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610446576104466113bd565b634e487b7160e01b600052603260045260246000fd5b80820180821115610446576104466113bd565b81810381811115610446576104466113bd565b60006020828403121561143857600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212209b5cc7be91002e1d380837be0dc9a992aeb4e5aad00e75951134299533ba272564736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "BUIDL GUIDL",
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "InvalidAccountNonce(address,uint256)": [
        {
          "details": "The nonce used for an `account` is not the expected current nonce."
        }
      ],
      "SenderIsNotVault(address)": [
        {
          "details": "Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).",
          "params": {
            "sender": "The account attempting to call a permissioned function"
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
      },
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the value of tokens owned by `account`."
      },
      "computeBalance(uint256[],uint256,uint256)": {
        "details": "Computes the new balance of a token after an operation, given the invariant growth ratio and all other balances.",
        "params": {
          "balancesLiveScaled18": "Current live balances (adjusted for decimals, rates, etc.)",
          "invariantRatio": "The ratio of the new invariant (after an operation) to the old",
          "tokenInIndex": "The index of the token we're computing the balance for, in token registration order"
        },
        "returns": {
          "newBalance": "The new balance of the selected token, after the operation"
        }
      },
      "computeInvariant(uint256[])": {
        "details": "This function computes the invariant based on current balances",
        "params": {
          "balancesLiveScaled18": "Array of current pool balances for each token in the pool, scaled to 18 decimals"
        },
        "returns": {
          "invariant": "The calculated invariant of the pool, represented as a uint256"
        }
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "emitApproval(address,address,uint256)": {
        "details": "Emit the Approval event. This function can only be called by the MultiToken."
      },
      "emitTransfer(address,address,uint256)": {
        "details": "Emit the Transfer event. This function can only be called by the MultiToken."
      },
      "getPoolTokens()": {
        "details": "Delegated to the Vault; added here as a convenience, mainly for off-chain processes.TODO - left blank for now, but for finished example w/ scaffoldBalancer we need to implement this correctly.",
        "returns": {
          "tokens": "List of tokens in the pool"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))": {
        "params": {
          "params": "Swap parameters"
        },
        "returns": {
          "amountCalculatedScaled18": "Calculated amount for the swap"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the value of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "title": "Example ConstantPricePool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeInvariant(uint256[])": {
        "notice": "Computes and returns the pool's invariant."
      },
      "getPoolTokens()": {
        "notice": "Gets the tokens registered to a pool."
      },
      "onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))": {
        "notice": "Execute a swap in the pool."
      }
    },
    "notice": "CURRENTLY A WIP. This is an example custom pool implementation used.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1369,
        "contract": "contracts/ConstantPricePool.sol:ConstantPricePool",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1371,
        "contract": "contracts/ConstantPricePool.sol:ConstantPricePool",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 348,
        "contract": "contracts/ConstantPricePool.sol:ConstantPricePool",
        "label": "_nonces",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4187,
        "contract": "contracts/ConstantPricePool.sol:ConstantPricePool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4189,
        "contract": "contracts/ConstantPricePool.sol:ConstantPricePool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}