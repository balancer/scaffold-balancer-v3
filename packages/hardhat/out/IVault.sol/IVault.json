{"abi":[{"type":"function","name":"addLiquidity","inputs":[{"name":"params","type":"tuple","internalType":"struct AddLiquidityParams","components":[{"name":"pool","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"maxAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"minBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"kind","type":"uint8","internalType":"enum AddLiquidityKind"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"amountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"bptAmountOut","type":"uint256","internalType":"uint256"},{"name":"returnData","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"function","name":"allowance","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"collectProtocolFees","inputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"disableQuery","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"disableRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"enableRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getAuthorizer","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAuthorizer"}],"stateMutability":"view"},{"type":"function","name":"getBufferPeriodDuration","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBufferPeriodEndTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLocker","inputs":[{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getLockersCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMaximumPoolTokens","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"getMinimumPoolTokens","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"getNonzeroDeltaCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPauseWindowEndTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolConfig","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct PoolConfig","components":[{"name":"isPoolRegistered","type":"bool","internalType":"bool"},{"name":"isPoolInitialized","type":"bool","internalType":"bool"},{"name":"isPoolPaused","type":"bool","internalType":"bool"},{"name":"isPoolInRecoveryMode","type":"bool","internalType":"bool"},{"name":"hasDynamicSwapFee","type":"bool","internalType":"bool"},{"name":"staticSwapFeePercentage","type":"uint64","internalType":"uint64"},{"name":"tokenDecimalDiffs","type":"uint24","internalType":"uint24"},{"name":"pauseWindowEndTime","type":"uint32","internalType":"uint32"},{"name":"hooks","type":"tuple","internalType":"struct PoolHooks","components":[{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"}]},{"name":"liquidityManagement","type":"tuple","internalType":"struct LiquidityManagement","components":[{"name":"supportsAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"supportsRemoveLiquidityCustom","type":"bool","internalType":"bool"}]}]}],"stateMutability":"view"},{"type":"function","name":"getPoolPausedState","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenCountAndIndexOfToken","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenInfo","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"contract IERC20[]"},{"name":"","type":"uint8[]","internalType":"enum TokenType[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"address[]","internalType":"contract IRateProvider[]"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenRates","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokens","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"contract IERC20[]"}],"stateMutability":"view"},{"type":"function","name":"getProtocolFees","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProtocolSwapFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProtocolYieldFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getReservesOf","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getStaticSwapFeePercentage","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTokenDelta","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"int256","internalType":"int256"}],"stateMutability":"view"},{"type":"function","name":"getVaultAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getVaultExtension","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getVaultPausedState","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"exactAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"minBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"bptAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"isPoolInRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolInitialized","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolPaused","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolRegistered","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isQueryDisabled","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isVaultPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"lock","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"pausePool","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"pauseVault","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"quote","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"registerPool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"tokenConfig","type":"tuple[]","internalType":"struct TokenConfig[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"yieldFeeExempt","type":"bool","internalType":"bool"}]},{"name":"pauseWindowEndTime","type":"uint256","internalType":"uint256"},{"name":"pauseManager","type":"address","internalType":"address"},{"name":"hookConfig","type":"tuple","internalType":"struct PoolHooks","components":[{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"}]},{"name":"liquidityManagement","type":"tuple","internalType":"struct LiquidityManagement","components":[{"name":"supportsAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"supportsRemoveLiquidityCustom","type":"bool","internalType":"bool"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeLiquidity","inputs":[{"name":"params","type":"tuple","internalType":"struct RemoveLiquidityParams","components":[{"name":"pool","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"maxBptAmountIn","type":"uint256","internalType":"uint256"},{"name":"minAmountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"kind","type":"uint8","internalType":"enum RemoveLiquidityKind"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"bptAmountIn","type":"uint256","internalType":"uint256"},{"name":"amountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"returnData","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"function","name":"removeLiquidityRecovery","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"exactBptAmountIn","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"amountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"sendTo","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setAuthorizer","inputs":[{"name":"newAuthorizer","type":"address","internalType":"contract IAuthorizer"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setProtocolSwapFeePercentage","inputs":[{"name":"newSwapFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setProtocolYieldFeePercentage","inputs":[{"name":"newYieldFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setStaticSwapFeePercentage","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"swapFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"settle","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"paid","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"swap","inputs":[{"name":"params","type":"tuple","internalType":"struct SwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"pool","type":"address","internalType":"address"},{"name":"tokenIn","type":"address","internalType":"contract IERC20"},{"name":"tokenOut","type":"address","internalType":"contract IERC20"},{"name":"amountGivenRaw","type":"uint256","internalType":"uint256"},{"name":"limitRaw","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"amountCalculatedRaw","type":"uint256","internalType":"uint256"},{"name":"amountInRaw","type":"uint256","internalType":"uint256"},{"name":"amountOutRaw","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"takeFrom","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"from","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"totalSupply","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"unpausePool","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unpauseVault","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"vault","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVault"}],"stateMutability":"view"},{"type":"event","name":"AuthorizerChanged","inputs":[{"name":"newAuthorizer","type":"address","indexed":true,"internalType":"contract IAuthorizer"}],"anonymous":false},{"type":"event","name":"PoolBalanceChanged","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"liquidityProvider","type":"address","indexed":true,"internalType":"address"},{"name":"tokens","type":"address[]","indexed":false,"internalType":"contract IERC20[]"},{"name":"deltas","type":"int256[]","indexed":false,"internalType":"int256[]"}],"anonymous":false},{"type":"event","name":"PoolInitialized","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"PoolPausedStateChanged","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"paused","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"PoolRecoveryModeStateChanged","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"recoveryMode","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"PoolRegistered","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"factory","type":"address","indexed":true,"internalType":"address"},{"name":"tokenConfig","type":"tuple[]","indexed":false,"internalType":"struct TokenConfig[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"yieldFeeExempt","type":"bool","internalType":"bool"}]},{"name":"pauseWindowEndTime","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"pauseManager","type":"address","indexed":false,"internalType":"address"},{"name":"hooks","type":"tuple","indexed":false,"internalType":"struct PoolHooks","components":[{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"}]},{"name":"liquidityManagement","type":"tuple","indexed":false,"internalType":"struct LiquidityManagement","components":[{"name":"supportsAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"supportsRemoveLiquidityCustom","type":"bool","internalType":"bool"}]}],"anonymous":false},{"type":"event","name":"ProtocolFeeCollected","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"amount","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProtocolSwapFeeCharged","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProtocolSwapFeePercentageChanged","inputs":[{"name":"swapFeePercentage","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProtocolYieldFeeCharged","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProtocolYieldFeePercentageChanged","inputs":[{"name":"yieldFeePercentage","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Swap","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"tokenIn","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"tokenOut","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"swapFeeAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SwapFeePercentageChanged","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"swapFeePercentage","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"VaultPausedStateChanged","inputs":[{"name":"paused","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"error","name":"AfterAddLiquidityHookFailed","inputs":[]},{"type":"error","name":"AfterInitializeHookFailed","inputs":[]},{"type":"error","name":"AfterRemoveLiquidityHookFailed","inputs":[]},{"type":"error","name":"AfterSwapHookFailed","inputs":[]},{"type":"error","name":"AmountGivenZero","inputs":[]},{"type":"error","name":"AmountInAboveMax","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"AmountOutBelowMin","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"BalanceNotSettled","inputs":[]},{"type":"error","name":"BeforeAddLiquidityHookFailed","inputs":[]},{"type":"error","name":"BeforeInitializeHookFailed","inputs":[]},{"type":"error","name":"BeforeRemoveLiquidityHookFailed","inputs":[]},{"type":"error","name":"BeforeSwapHookFailed","inputs":[]},{"type":"error","name":"BptAmountInAboveMax","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"BptAmountOutBelowMin","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"CannotReceiveEth","inputs":[]},{"type":"error","name":"CannotSwapSameToken","inputs":[]},{"type":"error","name":"DoesNotSupportAddLiquidityCustom","inputs":[]},{"type":"error","name":"DoesNotSupportRemoveLiquidityCustom","inputs":[]},{"type":"error","name":"InvalidAddLiquidityKind","inputs":[]},{"type":"error","name":"InvalidRemoveLiquidityKind","inputs":[]},{"type":"error","name":"InvalidToken","inputs":[]},{"type":"error","name":"InvalidTokenConfiguration","inputs":[]},{"type":"error","name":"InvalidTokenType","inputs":[]},{"type":"error","name":"LockerOutOfBounds","inputs":[{"name":"index","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MaxTokens","inputs":[]},{"type":"error","name":"MinTokens","inputs":[]},{"type":"error","name":"NoLocker","inputs":[]},{"type":"error","name":"NotVaultDelegateCall","inputs":[]},{"type":"error","name":"OperationNotSupported","inputs":[]},{"type":"error","name":"PauseBufferPeriodDurationTooLarge","inputs":[]},{"type":"error","name":"PoolAlreadyInitialized","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolAlreadyRegistered","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolInRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotInRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotInitialized","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotPaused","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotRegistered","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolPauseWindowExpired","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolPaused","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"ProtocolSwapFeePercentageTooHigh","inputs":[]},{"type":"error","name":"ProtocolYieldFeePercentageTooHigh","inputs":[]},{"type":"error","name":"QueriesDisabled","inputs":[]},{"type":"error","name":"RouterNotTrusted","inputs":[]},{"type":"error","name":"SenderIsNotPauseManager","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"SenderIsNotVault","inputs":[{"name":"sender","type":"address","internalType":"address"}]},{"type":"error","name":"SwapFeePercentageTooHigh","inputs":[]},{"type":"error","name":"SwapLimit","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"TokenAlreadyRegistered","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}]},{"type":"error","name":"TokenNotRegistered","inputs":[]},{"type":"error","name":"TokensMismatch","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"expectedToken","type":"address","internalType":"address"},{"name":"actualToken","type":"address","internalType":"address"}]},{"type":"error","name":"UserDataNotSupported","inputs":[]},{"type":"error","name":"VaultNotPaused","inputs":[]},{"type":"error","name":"VaultPauseWindowDurationTooLarge","inputs":[]},{"type":"error","name":"VaultPauseWindowExpired","inputs":[]},{"type":"error","name":"VaultPaused","inputs":[]},{"type":"error","name":"WrongLocker","inputs":[{"name":"locker","type":"address","internalType":"address"},{"name":"caller","type":"address","internalType":"address"}]},{"type":"error","name":"WrongVaultAdminDeployment","inputs":[]},{"type":"error","name":"WrongVaultExtensionDeployment","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":"4af29ec4","allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","balanceOf(address,address)":"f7888aec","collectProtocolFees(address[])":"00aa45a5","disableQuery()":"de1a36a6","disableRecoveryMode(address)":"bffb78b2","enableRecoveryMode(address)":"dc3f574e","getAuthorizer()":"aaabadc5","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getLocker(uint256)":"0b1bd243","getLockersCount()":"0f950ea6","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getNonzeroDeltaCount()":"db817187","getPauseWindowEndTime()":"8a8d123a","getPoolConfig(address)":"f29486a1","getPoolPausedState(address)":"15e32046","getPoolTokenCountAndIndexOfToken(address,address)":"c9c1661b","getPoolTokenInfo(address)":"67e0e076","getPoolTokenRates(address)":"7e361bde","getPoolTokens(address)":"ca4f2803","getProtocolFees(address)":"f27dd8ab","getProtocolSwapFeePercentage()":"c2372f82","getProtocolYieldFeePercentage()":"b099a799","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address,address)":"ab8f258d","getVaultAdmin()":"1ba0ae45","getVaultExtension()":"b9a8effa","getVaultPausedState()":"85c8c015","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","isVaultPaused()":"098401f5","lock(bytes)":"81548319","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","quote(bytes)":"edfa3568","registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))":"fea5ec5d","removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":"21457897","removeLiquidityRecovery(address,address,uint256)":"3a2d133b","sendTo(address,address,uint256)":"ae639329","setAuthorizer(address)":"058a628f","setProtocolSwapFeePercentage(uint256)":"8bf6daa5","setProtocolYieldFeePercentage(uint256)":"e4ecefe7","setStaticSwapFeePercentage(address,uint256)":"d15126ba","settle(address)":"6a256b29","swap((uint8,address,address,address,uint256,uint256,bytes))":"2bfb780c","takeFrom(address,address,uint256)":"ed2438cd","totalSupply(address)":"e4dc2aa4","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","vault()":"fbfa77cf"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LockerOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolSwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolYieldFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"SenderIsNotPauseManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserDataNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"WrongLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PoolPausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"recoveryMode\",\"type\":\"bool\"}],\"name\":\"PoolRecoveryModeStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"yieldFeeExempt\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct PoolHooks\",\"name\":\"hooks\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"supportsAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"supportsRemoveLiquidityCustom\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolSwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"yieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ProtocolYieldFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"VaultPausedStateChanged\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"enum AddLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct AddLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"collectProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint64\"},{\"internalType\":\"uint24\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct PoolHooks\",\"name\":\"hooks\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"supportsAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"supportsRemoveLiquidityCustom\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenCountAndIndexOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"enum TokenType[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IRateProvider[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"yieldFeeExempt\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct PoolHooks\",\"name\":\"hookConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"supportsAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"supportsRemoveLiquidityCustom\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"enum RemoveLiquidityKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitRaw\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInRaw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutRaw\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"details\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"details\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"details\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"details\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"details\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"details\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"details\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"details\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"details\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"details\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"CannotReceiveEth()\":[{\"details\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"details\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"details\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"details\":\"Pool does not support removing liquidity with a customized input.\"}],\"InvalidAddLiquidityKind()\":[{\"details\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"details\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"details\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"details\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenType()\":[{\"details\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"LockerOutOfBounds(uint256)\":[{\"details\":\"The caller attempted to access a Locker at an invalid index.\",\"params\":{\"index\":\"The invalid index\"}}],\"MaxTokens()\":[{\"details\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"details\":\"The token count is below the minimum allowed.\"}],\"NoLocker()\":[{\"details\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"The Vault extension was called by an account directly; it can only be called by the Vault via delegatecall.\"}],\"OperationNotSupported()\":[{\"details\":\"Error thrown when a function is not supported.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"details\":\"The caller specified a buffer period longer than the maximum.\"}],\"PoolAlreadyInitialized(address)\":[{\"details\":\"A pool has already been initialized. `initialize` may only be called once.\",\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"details\":\"A pool has already been registered. `registerPool` may only be called once.\",\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"details\":\"Cannot enable recovery mode when already enabled.\",\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"details\":\"Cannot disable recovery mode when not enabled.\",\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"details\":\"A referenced pool has not been initialized.\",\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"details\":\"Governance tried to unpause the Pool when it was not paused.\",\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"details\":\"A pool has not been registered.\",\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"details\":\"Governance tried to pause a Pool after the pause period expired.\",\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"details\":\"A user tried to perform an operation involving a paused Pool.\",\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"details\":\"Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"details\":\"Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\"}],\"QueriesDisabled()\":[{\"details\":\"A user tried to execute a query operation when they were disabled.\"}],\"RouterNotTrusted()\":[{\"details\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotPauseManager(address)\":[{\"details\":\"The caller is not the registered pause manager for the pool.\",\"params\":{\"pool\":\"The pool\"}}],\"SenderIsNotVault(address)\":[{\"details\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\",\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"Error raised when the swap fee percentage exceeds the maximum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"details\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"details\":\"A token was already registered (i.e., it is a duplicate in the pool).\",\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered()\":[{\"details\":\"The user attempted to swap a token not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"details\":\"The token list passed into an operation does not match the pool tokens in the pool.\",\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"UserDataNotSupported()\":[{\"details\":\"Optional User Data should be empty in the current add / remove liquidity kind.\"}],\"VaultNotPaused()\":[{\"details\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"details\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"details\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"details\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrongLocker(address,address)\":[{\"details\":\"In transient accounting, a locker is attempting to execute an operation out of order. The caller address should equal the locker.\",\"params\":{\"caller\":\"Address of the caller (msg.sender)\",\"locker\":\"Address of the current locker being processed\"}}],\"WrongVaultAdminDeployment()\":[{\"details\":\"The vault admin was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"details\":\"The vault extension was configured with an incorrect Vault address.\"}]},\"events\":{\"AuthorizerChanged(address)\":{\"params\":{\"newAuthorizer\":\"The address of the new authorizer\"}},\"PoolBalanceChanged(address,address,address[],int256[])\":{\"params\":{\"deltas\":\"The amount each token changed\",\"liquidityProvider\":\"The user performing the operation\",\"pool\":\"The pool being registered\",\"tokens\":\"The pool's tokens\"}},\"PoolInitialized(address)\":{\"params\":{\"pool\":\"The pool being initialized\"}},\"PoolPausedStateChanged(address,bool)\":{\"details\":\"A Pool's pause status has changed.\",\"params\":{\"paused\":\"True if the pool was paused\",\"pool\":\"The pool that was just paused or unpaused\"}},\"PoolRecoveryModeStateChanged(address,bool)\":{\"details\":\"Recovery mode has been enabled or disabled for a pool.\",\"params\":{\"pool\":\"The pool\",\"recoveryMode\":\"True if recovery mode was enabled\"}},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))\":{\"params\":{\"factory\":\"The factory creating the pool\",\"liquidityManagement\":\"Supported liquidity management hook flags\",\"pauseManager\":\"The pool's external pause manager (or 0 for governance)\",\"pauseWindowEndTime\":\"The pool's pause window end time\",\"pool\":\"The pool being registered\",\"tokenConfig\":\"The pool's tokens\"}},\"ProtocolFeeCollected(address,uint256)\":{\"params\":{\"amount\":\"The amount of the token collected as fees\",\"token\":\"The token in which the fee has been collected\"}},\"ProtocolSwapFeeCharged(address,address,uint256)\":{\"details\":\"This is included for traceability of fees to pools. Pending protocol fees on both swap and yield are combined. It is an invariant of the system that the total amounts for each token reported here and by `ProtocolYieldFeeCharged`, summed over all pools, should equal the total collected for the token reported by `ProtocolFeeCollected` when `collectProtocolFees` is called.\",\"params\":{\"amount\":\"The amount of the protocol fee\",\"pool\":\"The pool associated with this charge\",\"token\":\"The token whose protocol fee balance increased\"}},\"ProtocolSwapFeePercentageChanged(uint256)\":{\"params\":{\"swapFeePercentage\":\"The updated protocol swap fee percentage\"}},\"ProtocolYieldFeeCharged(address,address,uint256)\":{\"details\":\"This is included for traceability of fees to pools. Pending protocol fees on both swap and yield are combined. It is an invariant of the system that the total amounts for each token reported here and by `ProtocolSwapFeeCharged`, summed over all pools, should equal the total collected for the token reported by `ProtocolFeeCollected` when `collectProtocolFees` is called.\",\"params\":{\"amount\":\"The amount of the protocol fee\",\"pool\":\"The pool associated with this charge\",\"token\":\"The token whose protocol fee balance increased\"}},\"ProtocolYieldFeePercentageChanged(uint256)\":{\"params\":{\"yieldFeePercentage\":\"The updated protocol yield fee percentage\"}},\"Swap(address,address,address,uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Number of tokenIn tokens\",\"amountOut\":\"Number of tokenOut tokens\",\"pool\":\"The pool with the tokens being swapped\",\"swapFeeAmount\":\"Swap fee amount paid in token out\",\"tokenIn\":\"The token entering the Vault (balance increases)\",\"tokenOut\":\"The token leaving the Vault (balance decreases)\"}},\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}},\"VaultPausedStateChanged(bool)\":{\"details\":\"The Vault's pause status has changed.\",\"params\":{\"paused\":\"True if the Vault was paused\"}}},\"kind\":\"dev\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"details\":\"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.\",\"params\":{\"params\":\"Parameters for the add liquidity (see above for struct definition)\"},\"returns\":{\"amountsIn\":\"Actual amounts of input tokens\",\"bptAmountOut\":\"Output pool token amount\",\"returnData\":\"Arbitrary (optional) data with encoded response from the pool\"}},\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Owner's address\",\"spender\":\"Spender's address\",\"token\":\"Token's address\"},\"returns\":{\"_0\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Owner's address\",\"spender\":\"Spender's address\"},\"returns\":{\"_0\":\"True if successful, false otherwise\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Account's address\",\"token\":\"Token's address\"},\"returns\":{\"_0\":\"Balance of the account for the token\"}},\"collectProtocolFees(address[])\":{\"details\":\"Fees are sent to msg.sender.\",\"params\":{\"tokens\":\"An array of token addresses for which the fees should be collected\"}},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function.\",\"params\":{\"pool\":\"The pool\"}},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function.\",\"params\":{\"pool\":\"The pool\"}},\"getAuthorizer()\":{\"returns\":{\"_0\":\"Address of the authorizer\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable; the getter can be called by anyone.\"},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable; the getter can be called by anyone.\"},\"getLocker(uint256)\":{\"params\":{\"index\":\"The index of the locker's address to fetch\"},\"returns\":{\"_0\":\"The address at the given index\"}},\"getLockersCount()\":{\"returns\":{\"_0\":\"The number of lockers\"}},\"getMaximumPoolTokens()\":{\"returns\":{\"_0\":\"The token count of a minimal pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"_0\":\"The token count of a minimal pool\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"_0\":\"The current value of _nonzeroDeltaCount\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable; the getter can be called by anyone.\"},\"getPoolConfig(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"Pool configuration\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"_0\":\"paused True if the Pool is paused\",\"_1\":\"poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\",\"_2\":\"poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\",\"_3\":\"pauseManager The pause manager, or the zero address\"}},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"details\":\"Reverts if the pool is not registered, or if the token does not belong to the pool.\",\"params\":{\"pool\":\"Address of the pool\",\"token\":\"Address of the token\"},\"returns\":{\"_0\":\"tokenCount Number of tokens in the pool\",\"_1\":\"index Index corresponding to the given token in the pool's token list\"}},\"getPoolTokenInfo(address)\":{\"returns\":{\"_0\":\"tokens Tokens registered to the pool\",\"_1\":\"tokenTypes The types of all registered tokens\",\"_2\":\"balancesRaw Corresponding raw balances of the tokens\",\"_3\":\"scalingFactors Corresponding scalingFactors of the tokens\",\"_4\":\"rateProviders Corresponding rateProviders of the tokens (or zero for tokens with no rates)\"}},\"getPoolTokenRates(address)\":{\"details\":\"This is not included in `getPoolTokenInfo` since it makes external calls that might revert, effectively preventing retrieval of basic pool parameters. Tokens without rate providers will always return FixedPoint.ONE (1e18).\"},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"tokens List of tokens in the pool\"}},\"getProtocolFees(address)\":{\"params\":{\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"_0\":\"The total amount of fees accumulated in the specified token\"}},\"getProtocolSwapFeePercentage()\":{\"returns\":{\"_0\":\"The current protocol swap fee percentage\"}},\"getProtocolYieldFeePercentage()\":{\"returns\":{\"_0\":\"The current protocol yield fee percentage\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"_0\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"_0\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address,address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\",\"user\":\"The address of the user for whom the delta is being fetched\"},\"returns\":{\"_0\":\"The delta of the specified token for the specified user\"}},\"getVaultPausedState()\":{\"returns\":{\"_0\":\"paused True if the Vault is paused\",\"_1\":\"vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\",\"_2\":\"vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"isPoolInRecoveryMode(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"True if the pool is initialized, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"_0\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"returns\":{\"_0\":\"If true, then queries are disabled\"}},\"isVaultPaused()\":{\"returns\":{\"_0\":\"True if the Vault is paused\"}},\"lock(bytes)\":{\"details\":\"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\"},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment.\"},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `withLocker` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `withLocker`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"hookConfig\":\"Flags indicating which hooks the pool supports\",\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseManager\":\"Optional contract the Vault will allow to pause the pool\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"details\":\"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).\",\"params\":{\"params\":\"Parameters for the remove liquidity (see above for struct definition)\"},\"returns\":{\"amountsOut\":\"Actual amounts of output tokens\",\"bptAmountIn\":\"Actual amount of BPT burnt\",\"returnData\":\"Arbitrary (optional) data with encoded response from the pool\"}},\"removeLiquidityRecovery(address,address,uint256)\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"sendTo(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to send\",\"to\":\"Recipient's address\",\"token\":\"Token's address\"}},\"setAuthorizer(address)\":{\"details\":\"The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setProtocolSwapFeePercentage(uint256)\":{\"params\":{\"newSwapFeePercentage\":\"The new swap fee percentage to be set\"}},\"setProtocolYieldFeePercentage(uint256)\":{\"params\":{\"newYieldFeePercentage\":\"The new swap fee percentage to be set\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"settle(address)\":{\"params\":{\"token\":\"Token's address\"},\"returns\":{\"paid\":\"Amount paid during settlement\"}},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"details\":\"All parameters are given in raw token decimal encoding.\",\"params\":{\"params\":\"Parameters for the swap (see above for struct definition)\"},\"returns\":{\"amountCalculatedRaw\":\"Calculated swap amount\",\"amountInRaw\":\"Amount of input tokens for the swap\",\"amountOutRaw\":\"Amount of output tokens from the swap\"}},\"takeFrom(address,address,uint256)\":{\"details\":\"This function can transfer tokens from users using allowances granted to the Vault. Only trusted routers are permitted to call it. Untrusted routers should use `settle` instead.\",\"params\":{\"amount\":\"Amount of tokens to pull from the sender into the Vault\",\"from\":\"Sender's address\",\"token\":\"Token's address\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"Token's address\"},\"returns\":{\"_0\":\"Total supply of the token\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Owner's address\",\"to\":\"Recipient's address\"},\"returns\":{\"_0\":\"True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Sender's address\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Recipient's address\"},\"returns\":{\"_0\":\"True if successful, false otherwise\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\"},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires.\"},\"vault()\":{\"details\":\"Returns the main Vault address.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AuthorizerChanged(address)\":{\"notice\":\"A new authorizer is set by `setAuthorizer`.\"},\"PoolBalanceChanged(address,address,address[],int256[])\":{\"notice\":\"Pool balances have changed (e.g., after initialization, add/remove liquidity).\"},\"PoolInitialized(address)\":{\"notice\":\"A Pool was initialized by calling `initialize`.\"},\"PoolRegistered(address,address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))\":{\"notice\":\"A Pool was registered by calling `registerPool`.\"},\"ProtocolFeeCollected(address,uint256)\":{\"notice\":\"Logs the collection of fees in a specific token and amount.\"},\"ProtocolSwapFeeCharged(address,address,uint256)\":{\"notice\":\"Emitted when a protocol swap fee is incurred.\"},\"ProtocolSwapFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol swap fee percentage is updated.\"},\"ProtocolYieldFeeCharged(address,address,uint256)\":{\"notice\":\"Emitted when a protocol swap fee is incurred.\"},\"ProtocolYieldFeePercentageChanged(uint256)\":{\"notice\":\"Emitted when the protocol yield fee percentage is updated.\"},\"Swap(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"A swap has occurred.\"},\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity((address,address,uint256[],uint256,uint8,bytes))\":{\"notice\":\"Adds liquidity to a pool.\"},\"allowance(address,address,address)\":{\"notice\":\"Gets allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets balance of an account for a given ERC20 token.\"},\"collectProtocolFees(address[])\":{\"notice\":\"Collects accumulated protocol fees for the specified array of tokens.\"},\"disableQuery()\":{\"notice\":\"Disables queries functionality on the Vault. Can be called only by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"getAuthorizer()\":{\"notice\":\"Returns the Vault's Authorizer.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns Vault's buffer period end time.\"},\"getLocker(uint256)\":{\"notice\":\"Returns the address at the specified index of the _lockers array.\"},\"getLockersCount()\":{\"notice\":\"Returns the total number of lockers.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns Vault's pause window end time.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolTokenCountAndIndexOfToken(address,address)\":{\"notice\":\"Gets the index of a token in a given pool.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Retrieve the scaling factors from a pool's rate providers.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFees(address)\":{\"notice\":\"Returns the accumulated swap and yield fee in `token` collected by the protocol.\"},\"getProtocolSwapFeePercentage()\":{\"notice\":\"Retrieves the current protocol swap fee percentage.\"},\"getProtocolYieldFeePercentage()\":{\"notice\":\"Retrieves the current protocol yield fee percentage.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address,address)\":{\"notice\":\"Retrieves the token delta for a specific user and token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the Vault Admin contract address.\"},\"getVaultExtension()\":{\"notice\":\"Returns the Vault Extension address.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in recovery mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Checks if the queries enabled on the Vault.\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"lock(bytes)\":{\"notice\":\"Creates a lock context for a sequence of operations.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions.\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))\":{\"notice\":\"Removes liquidity from a pool.\"},\"removeLiquidityRecovery(address,address,uint256)\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"sendTo(address,address,uint256)\":{\"notice\":\"Sends tokens to a recipient.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolSwapFeePercentage(uint256)\":{\"notice\":\"Sets a new swap fee percentage for the protocol.\"},\"setProtocolYieldFeePercentage(uint256)\":{\"notice\":\"Sets a new yield fee percentage for the protocol.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"settle(address)\":{\"notice\":\"Settles deltas for a token; must be successful for the current lock to be released.\"},\"swap((uint8,address,address,address,uint256,uint256,bytes))\":{\"notice\":\"Swaps tokens based on provided parameters.\"},\"takeFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens from a sender to the Vault.\"},\"totalSupply(address)\":{\"notice\":\"Gets total supply of a given ERC20 token.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore the Vault to normal functionality.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0xfe3278913eb925022136ae31b1f1a33e60e5b950d0c3288b8bc87d054cdaec03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0d2c4586e9f26f8a1fd8dc6945a3ab34d23219da74959fd47e4ba826ab249d53\",\"dweb:/ipfs/QmP3c3GJ8UHYvw6nX7iRDDm3xh4cwJrWUksMREDAohkVD9\"]},\"contracts/interfaces/IRateProvider.sol\":{\"keccak256\":\"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6\",\"dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9\"]},\"contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x9defac7f1a522b6cf6fba6e930d327523fc40db0ea6121b2e6071e757b647e30\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c53c9c819cdc57258fa7c8365a51400ee37f7df390a01815f9c21fac47e33562\",\"dweb:/ipfs/QmeZJDYTku8iqC9tjraQGyDDxrwuYpt8YELWKi4puWaApb\"]},\"contracts/interfaces/IVaultAdmin.sol\":{\"keccak256\":\"0x7741e61bfcab7f3d2201367c4512903991de2e91b10ff022a22f1ea1f7416a91\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49e3ce6c9d9a7bbc9add5bd5577fa73b3cff9b3b102e025e52f888ca232da2cb\",\"dweb:/ipfs/QmWRwhXTvnTc3Z3tHWuo6dBnxtFr89KQepVDHEBrguV2iE\"]},\"contracts/interfaces/IVaultErrors.sol\":{\"keccak256\":\"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c\",\"dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah\"]},\"contracts/interfaces/IVaultEvents.sol\":{\"keccak256\":\"0xe561d23e8f311be7274a115a839f4ae3e2b24accc2b3b1fb1e23dbd5ec97ab32\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://933b4078d8cf44ce5f58a02843808ec7ff07120ea9c4b51a95e2d4606aa566b9\",\"dweb:/ipfs/QmT3r93qATKxcyUej9dCfayUB5KRTvHJ6BvNcy1Un6FcAf\"]},\"contracts/interfaces/IVaultExtension.sol\":{\"keccak256\":\"0x95690cde8cb09617aab94ca6eb8df973576d96d75a37eacd071f6469d91bcad7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://358646937a4f0b6312b90c9e0ad49cb33d303512bd34be9c1233d5376f18f6f0\",\"dweb:/ipfs/QmeeKoYhqRwPjQEKpyWQtTG58vmdbRkFQRUbAAE6RWdXb7\"]},\"contracts/interfaces/IVaultMain.sol\":{\"keccak256\":\"0xda48e9312d7b1428fa89b30406b586262aab2d7d0281ebbdbbfaef1375240849\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://add42cd3dc01ebd4ea38f047406bd97ad99546bd25f8645e45ba6800d1e2e149\",\"dweb:/ipfs/QmZNt5KUpTLETPeq9ypSUq2KhACChVNaQsmF9Ye5SXPBT3\"]},\"contracts/interfaces/VaultTypes.sol\":{\"keccak256\":\"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f\",\"dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"AfterAddLiquidityHookFailed"},{"inputs":[],"type":"error","name":"AfterInitializeHookFailed"},{"inputs":[],"type":"error","name":"AfterRemoveLiquidityHookFailed"},{"inputs":[],"type":"error","name":"AfterSwapHookFailed"},{"inputs":[],"type":"error","name":"AmountGivenZero"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"AmountInAboveMax"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"AmountOutBelowMin"},{"inputs":[],"type":"error","name":"BalanceNotSettled"},{"inputs":[],"type":"error","name":"BeforeAddLiquidityHookFailed"},{"inputs":[],"type":"error","name":"BeforeInitializeHookFailed"},{"inputs":[],"type":"error","name":"BeforeRemoveLiquidityHookFailed"},{"inputs":[],"type":"error","name":"BeforeSwapHookFailed"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"BptAmountInAboveMax"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"BptAmountOutBelowMin"},{"inputs":[],"type":"error","name":"CannotReceiveEth"},{"inputs":[],"type":"error","name":"CannotSwapSameToken"},{"inputs":[],"type":"error","name":"DoesNotSupportAddLiquidityCustom"},{"inputs":[],"type":"error","name":"DoesNotSupportRemoveLiquidityCustom"},{"inputs":[],"type":"error","name":"InvalidAddLiquidityKind"},{"inputs":[],"type":"error","name":"InvalidRemoveLiquidityKind"},{"inputs":[],"type":"error","name":"InvalidToken"},{"inputs":[],"type":"error","name":"InvalidTokenConfiguration"},{"inputs":[],"type":"error","name":"InvalidTokenType"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"type":"error","name":"LockerOutOfBounds"},{"inputs":[],"type":"error","name":"MaxTokens"},{"inputs":[],"type":"error","name":"MinTokens"},{"inputs":[],"type":"error","name":"NoLocker"},{"inputs":[],"type":"error","name":"NotVaultDelegateCall"},{"inputs":[],"type":"error","name":"OperationNotSupported"},{"inputs":[],"type":"error","name":"PauseBufferPeriodDurationTooLarge"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolAlreadyInitialized"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolAlreadyRegistered"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolInRecoveryMode"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotInRecoveryMode"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotInitialized"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotPaused"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotRegistered"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolPauseWindowExpired"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolPaused"},{"inputs":[],"type":"error","name":"ProtocolSwapFeePercentageTooHigh"},{"inputs":[],"type":"error","name":"ProtocolYieldFeePercentageTooHigh"},{"inputs":[],"type":"error","name":"QueriesDisabled"},{"inputs":[],"type":"error","name":"RouterNotTrusted"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"SenderIsNotPauseManager"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"type":"error","name":"SenderIsNotVault"},{"inputs":[],"type":"error","name":"SwapFeePercentageTooHigh"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"SwapLimit"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"type":"error","name":"TokenAlreadyRegistered"},{"inputs":[],"type":"error","name":"TokenNotRegistered"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"type":"error","name":"TokensMismatch"},{"inputs":[],"type":"error","name":"UserDataNotSupported"},{"inputs":[],"type":"error","name":"VaultNotPaused"},{"inputs":[],"type":"error","name":"VaultPauseWindowDurationTooLarge"},{"inputs":[],"type":"error","name":"VaultPauseWindowExpired"},{"inputs":[],"type":"error","name":"VaultPaused"},{"inputs":[{"internalType":"address","name":"locker","type":"address"},{"internalType":"address","name":"caller","type":"address"}],"type":"error","name":"WrongLocker"},{"inputs":[],"type":"error","name":"WrongVaultAdminDeployment"},{"inputs":[],"type":"error","name":"WrongVaultExtensionDeployment"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address","indexed":true}],"type":"event","name":"AuthorizerChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"address","name":"liquidityProvider","type":"address","indexed":true},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]","indexed":false},{"internalType":"int256[]","name":"deltas","type":"int256[]","indexed":false}],"type":"event","name":"PoolBalanceChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true}],"type":"event","name":"PoolInitialized","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"bool","name":"paused","type":"bool","indexed":false}],"type":"event","name":"PoolPausedStateChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"bool","name":"recoveryMode","type":"bool","indexed":false}],"type":"event","name":"PoolRecoveryModeStateChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"address","name":"factory","type":"address","indexed":true},{"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"yieldFeeExempt","type":"bool"}],"indexed":false},{"internalType":"uint256","name":"pauseWindowEndTime","type":"uint256","indexed":false},{"internalType":"address","name":"pauseManager","type":"address","indexed":false},{"internalType":"struct PoolHooks","name":"hooks","type":"tuple","components":[{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}],"indexed":false},{"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple","components":[{"internalType":"bool","name":"supportsAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"supportsRemoveLiquidityCustom","type":"bool"}],"indexed":false}],"type":"event","name":"PoolRegistered","anonymous":false},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":true}],"type":"event","name":"ProtocolFeeCollected","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"ProtocolSwapFeeCharged","anonymous":false},{"inputs":[{"internalType":"uint256","name":"swapFeePercentage","type":"uint256","indexed":true}],"type":"event","name":"ProtocolSwapFeePercentageChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"address","name":"token","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"ProtocolYieldFeeCharged","anonymous":false},{"inputs":[{"internalType":"uint256","name":"yieldFeePercentage","type":"uint256","indexed":true}],"type":"event","name":"ProtocolYieldFeePercentageChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"contract IERC20","name":"tokenIn","type":"address","indexed":true},{"internalType":"contract IERC20","name":"tokenOut","type":"address","indexed":true},{"internalType":"uint256","name":"amountIn","type":"uint256","indexed":false},{"internalType":"uint256","name":"amountOut","type":"uint256","indexed":false},{"internalType":"uint256","name":"swapFeeAmount","type":"uint256","indexed":false}],"type":"event","name":"Swap","anonymous":false},{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256","indexed":true}],"type":"event","name":"SwapFeePercentageChanged","anonymous":false},{"inputs":[{"internalType":"bool","name":"paused","type":"bool","indexed":false}],"type":"event","name":"VaultPausedStateChanged","anonymous":false},{"inputs":[{"internalType":"struct AddLiquidityParams","name":"params","type":"tuple","components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"maxAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"enum AddLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"addLiquidity","outputs":[{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256","name":"bptAmountOut","type":"uint256"},{"internalType":"bytes","name":"returnData","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"collectProtocolFees"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"disableQuery"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"disableRecoveryMode"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"enableRecoveryMode"},{"inputs":[],"stateMutability":"view","type":"function","name":"getAuthorizer","outputs":[{"internalType":"contract IAuthorizer","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBufferPeriodDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getLocker","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getLockersCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPauseWindowEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolConfig","outputs":[{"internalType":"struct PoolConfig","name":"","type":"tuple","components":[{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"},{"internalType":"bool","name":"hasDynamicSwapFee","type":"bool"},{"internalType":"uint64","name":"staticSwapFeePercentage","type":"uint64"},{"internalType":"uint24","name":"tokenDecimalDiffs","type":"uint24"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"struct PoolHooks","name":"hooks","type":"tuple","components":[{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}]},{"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple","components":[{"internalType":"bool","name":"supportsAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"supportsRemoveLiquidityCustom","type":"bool"}]}]}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenCountAndIndexOfToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"","type":"address[]"},{"internalType":"enum TokenType[]","name":"","type":"uint8[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"contract IRateProvider[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getProtocolFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getProtocolSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getProtocolYieldFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getReservesOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getTokenDelta","outputs":[{"internalType":"int256","name":"","type":"int256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultAdmin","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultExtension","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isVaultPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"lock","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"pausePool"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pauseVault"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"yieldFeeExempt","type":"bool"}]},{"internalType":"uint256","name":"pauseWindowEndTime","type":"uint256"},{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"struct PoolHooks","name":"hookConfig","type":"tuple","components":[{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}]},{"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple","components":[{"internalType":"bool","name":"supportsAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"supportsRemoveLiquidityCustom","type":"bool"}]}],"stateMutability":"nonpayable","type":"function","name":"registerPool"},{"inputs":[{"internalType":"struct RemoveLiquidityParams","name":"params","type":"tuple","components":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"maxBptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"enum RemoveLiquidityKind","name":"kind","type":"uint8"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"bptAmountIn","type":"uint256"},{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"},{"internalType":"bytes","name":"returnData","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"sendTo"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setAuthorizer"},{"inputs":[{"internalType":"uint256","name":"newSwapFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setProtocolSwapFeePercentage"},{"inputs":[{"internalType":"uint256","name":"newYieldFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setProtocolYieldFeePercentage"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setStaticSwapFeePercentage"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"settle","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}]},{"inputs":[{"internalType":"struct SwapParams","name":"params","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"contract IERC20","name":"tokenIn","type":"address"},{"internalType":"contract IERC20","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountGivenRaw","type":"uint256"},{"internalType":"uint256","name":"limitRaw","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"swap","outputs":[{"internalType":"uint256","name":"amountCalculatedRaw","type":"uint256"},{"internalType":"uint256","name":"amountInRaw","type":"uint256"},{"internalType":"uint256","name":"amountOutRaw","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"takeFrom"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"unpausePool"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"unpauseVault"},{"inputs":[],"stateMutability":"view","type":"function","name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":{"details":"Caution should be exercised when adding liquidity because the Vault has the capability to transfer tokens from any user, given that it holds all allowances.","params":{"params":"Parameters for the add liquidity (see above for struct definition)"},"returns":{"amountsIn":"Actual amounts of input tokens","bptAmountOut":"Output pool token amount","returnData":"Arbitrary (optional) data with encoded response from the pool"}},"allowance(address,address,address)":{"params":{"owner":"Owner's address","spender":"Spender's address","token":"Token's address"},"returns":{"_0":"Amount of tokens the spender is allowed to spend"}},"approve(address,address,uint256)":{"details":"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.","params":{"amount":"Amount of tokens to approve","owner":"Owner's address","spender":"Spender's address"},"returns":{"_0":"True if successful, false otherwise"}},"balanceOf(address,address)":{"params":{"account":"Account's address","token":"Token's address"},"returns":{"_0":"Balance of the account for the token"}},"collectProtocolFees(address[])":{"details":"Fees are sent to msg.sender.","params":{"tokens":"An array of token addresses for which the fees should be collected"}},"disableRecoveryMode(address)":{"details":"This is a permissioned function.","params":{"pool":"The pool"}},"enableRecoveryMode(address)":{"details":"This is a permissioned function.","params":{"pool":"The pool"}},"getAuthorizer()":{"returns":{"_0":"Address of the authorizer"}},"getBufferPeriodDuration()":{"details":"This value is immutable; the getter can be called by anyone."},"getBufferPeriodEndTime()":{"details":"This value is immutable; the getter can be called by anyone."},"getLocker(uint256)":{"params":{"index":"The index of the locker's address to fetch"},"returns":{"_0":"The address at the given index"}},"getLockersCount()":{"returns":{"_0":"The number of lockers"}},"getMaximumPoolTokens()":{"returns":{"_0":"The token count of a minimal pool"}},"getMinimumPoolTokens()":{"details":"We expect the vast majority of pools to be 2-token.","returns":{"_0":"The token count of a minimal pool"}},"getNonzeroDeltaCount()":{"returns":{"_0":"The current value of _nonzeroDeltaCount"}},"getPauseWindowEndTime()":{"details":"This value is immutable; the getter can be called by anyone."},"getPoolConfig(address)":{"params":{"pool":"Address of the pool"},"returns":{"_0":"Pool configuration"}},"getPoolPausedState(address)":{"details":"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period.","params":{"pool":"The pool whose data is requested"},"returns":{"_0":"paused True if the Pool is paused","_1":"poolPauseWindowEndTime The timestamp of the end of the Pool's pause window","_2":"poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)","_3":"pauseManager The pause manager, or the zero address"}},"getPoolTokenCountAndIndexOfToken(address,address)":{"details":"Reverts if the pool is not registered, or if the token does not belong to the pool.","params":{"pool":"Address of the pool","token":"Address of the token"},"returns":{"_0":"tokenCount Number of tokens in the pool","_1":"index Index corresponding to the given token in the pool's token list"}},"getPoolTokenInfo(address)":{"returns":{"_0":"tokens Tokens registered to the pool","_1":"tokenTypes The types of all registered tokens","_2":"balancesRaw Corresponding raw balances of the tokens","_3":"scalingFactors Corresponding scalingFactors of the tokens","_4":"rateProviders Corresponding rateProviders of the tokens (or zero for tokens with no rates)"}},"getPoolTokenRates(address)":{"details":"This is not included in `getPoolTokenInfo` since it makes external calls that might revert, effectively preventing retrieval of basic pool parameters. Tokens without rate providers will always return FixedPoint.ONE (1e18)."},"getPoolTokens(address)":{"params":{"pool":"Address of the pool"},"returns":{"_0":"tokens List of tokens in the pool"}},"getProtocolFees(address)":{"params":{"token":"The address of the token in which fees have been accumulated"},"returns":{"_0":"The total amount of fees accumulated in the specified token"}},"getProtocolSwapFeePercentage()":{"returns":{"_0":"The current protocol swap fee percentage"}},"getProtocolYieldFeePercentage()":{"returns":{"_0":"The current protocol yield fee percentage"}},"getReservesOf(address)":{"params":{"token":"The token for which to retrieve the reserve"},"returns":{"_0":"The amount of reserves for the given token"}},"getStaticSwapFeePercentage(address)":{"params":{"pool":"The address of the pool whose static swap fee percentage is being queried"},"returns":{"_0":"The current static swap fee percentage for the specified pool"}},"getTokenDelta(address,address)":{"details":"This function allows reading the value from the `_tokenDeltas` mapping.","params":{"token":"The token for which the delta is being fetched","user":"The address of the user for whom the delta is being fetched"},"returns":{"_0":"The delta of the specified token for the specified user"}},"getVaultPausedState()":{"returns":{"_0":"paused True if the Vault is paused","_1":"vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window","_2":"vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"}},"initialize(address,address,address[],uint256[],uint256,bytes)":{"params":{"exactAmountsIn":"Exact amounts of input tokens","minBptAmountOut":"Minimum amount of output pool tokens","pool":"Address of the pool to initialize","to":"Address that will receive the output BPT","tokens":"Tokens used to seed the pool (must match the registered tokens)","userData":"Additional (optional) data required for adding initial liquidity"},"returns":{"bptAmountOut":"Output pool token amount"}},"isPoolInRecoveryMode(address)":{"params":{"pool":"Address of the pool to check"},"returns":{"_0":"True if the pool is initialized, false otherwise"}},"isPoolInitialized(address)":{"details":"An initialized pool can be considered registered as well.","params":{"pool":"Address of the pool to check"},"returns":{"_0":"True if the pool is initialized, false otherwise"}},"isPoolPaused(address)":{"params":{"pool":"The pool to be checked"},"returns":{"_0":"True if the pool is paused"}},"isPoolRegistered(address)":{"params":{"pool":"Address of the pool to check"},"returns":{"_0":"True if the pool is registered, false otherwise"}},"isQueryDisabled()":{"returns":{"_0":"If true, then queries are disabled"}},"isVaultPaused()":{"returns":{"_0":"True if the Vault is paused"}},"lock(bytes)":{"details":"Performs a callback on msg.sender with arguments provided in `data`. The Callback is `transient`, meaning all balances for the caller have to be settled at the end.","params":{"data":"Contains function signature and args to be passed to the msg.sender"},"returns":{"result":"Resulting data from the call"}},"pausePool(address)":{"details":"This is a permissioned function that will only work during the Pause Window set during pool factory deployment."},"pauseVault()":{"details":"This is a permissioned function that will only work during the Pause Window set during deployment."},"quote(bytes)":{"details":"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `withLocker` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `withLocker`. `transient` modifier ensuring balances changes within the Vault are settled.","params":{"data":"Contains function signature and args to be passed to the msg.sender"},"returns":{"result":"Resulting data from the call"}},"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))":{"details":"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.","params":{"hookConfig":"Flags indicating which hooks the pool supports","liquidityManagement":"Liquidity management flags with implemented methods","pauseManager":"Optional contract the Vault will allow to pause the pool","pauseWindowEndTime":"The timestamp after which it is no longer possible to pause the pool","pool":"The address of the pool being registered","tokenConfig":"An array of descriptors for the tokens the pool will manage"}},"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":{"details":"Trusted routers can burn pool tokens belonging to any user and require no prior approval from the user. Untrusted routers require prior approval from the user. This is the only function allowed to call _queryModeBalanceIncrease (and only in a query context).","params":{"params":"Parameters for the remove liquidity (see above for struct definition)"},"returns":{"amountsOut":"Actual amounts of output tokens","bptAmountIn":"Actual amount of BPT burnt","returnData":"Arbitrary (optional) data with encoded response from the pool"}},"removeLiquidityRecovery(address,address,uint256)":{"params":{"exactBptAmountIn":"Input pool token amount","from":"Address of user to burn pool tokens from","pool":"Address of the pool"},"returns":{"amountsOut":"Actual calculated amounts of output tokens, sorted in token registration order"}},"sendTo(address,address,uint256)":{"params":{"amount":"Amount of tokens to send","to":"Recipient's address","token":"Token's address"}},"setAuthorizer(address)":{"details":"The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."},"setProtocolSwapFeePercentage(uint256)":{"params":{"newSwapFeePercentage":"The new swap fee percentage to be set"}},"setProtocolYieldFeePercentage(uint256)":{"params":{"newYieldFeePercentage":"The new swap fee percentage to be set"}},"setStaticSwapFeePercentage(address,uint256)":{"params":{"pool":"The address of the pool for which the static swap fee will be changed","swapFeePercentage":"The new swap fee percentage to apply to the pool"}},"settle(address)":{"params":{"token":"Token's address"},"returns":{"paid":"Amount paid during settlement"}},"swap((uint8,address,address,address,uint256,uint256,bytes))":{"details":"All parameters are given in raw token decimal encoding.","params":{"params":"Parameters for the swap (see above for struct definition)"},"returns":{"amountCalculatedRaw":"Calculated swap amount","amountInRaw":"Amount of input tokens for the swap","amountOutRaw":"Amount of output tokens from the swap"}},"takeFrom(address,address,uint256)":{"details":"This function can transfer tokens from users using allowances granted to the Vault. Only trusted routers are permitted to call it. Untrusted routers should use `settle` instead.","params":{"amount":"Amount of tokens to pull from the sender into the Vault","from":"Sender's address","token":"Token's address"}},"totalSupply(address)":{"params":{"token":"Token's address"},"returns":{"_0":"Total supply of the token"}},"transfer(address,address,uint256)":{"details":"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.","params":{"amount":"Amount of tokens to transfer","owner":"Owner's address","to":"Recipient's address"},"returns":{"_0":"True if successful, false otherwise"}},"transferFrom(address,address,address,uint256)":{"details":"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.","params":{"amount":"Amount of tokens to transfer","from":"Sender's address","spender":"Address allowed to perform the transfer","to":"Recipient's address"},"returns":{"_0":"True if successful, false otherwise"}},"unpausePool(address)":{"details":"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires."},"unpauseVault()":{"details":"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires."},"vault()":{"details":"Returns the main Vault address."}},"version":1},"userdoc":{"kind":"user","methods":{"addLiquidity((address,address,uint256[],uint256,uint8,bytes))":{"notice":"Adds liquidity to a pool."},"allowance(address,address,address)":{"notice":"Gets allowance of a spender for a given ERC20 token and owner."},"approve(address,address,uint256)":{"notice":"Approves a spender to spend pool tokens on behalf of sender."},"balanceOf(address,address)":{"notice":"Gets balance of an account for a given ERC20 token."},"collectProtocolFees(address[])":{"notice":"Collects accumulated protocol fees for the specified array of tokens."},"disableQuery()":{"notice":"Disables queries functionality on the Vault. Can be called only by governance."},"disableRecoveryMode(address)":{"notice":"Disable recovery mode for a pool."},"enableRecoveryMode(address)":{"notice":"Enable recovery mode for a pool."},"getAuthorizer()":{"notice":"Returns the Vault's Authorizer."},"getBufferPeriodDuration()":{"notice":"Returns Vault's buffer period duration."},"getBufferPeriodEndTime()":{"notice":"Returns Vault's buffer period end time."},"getLocker(uint256)":{"notice":"Returns the address at the specified index of the _lockers array."},"getLockersCount()":{"notice":"Returns the total number of lockers."},"getMaximumPoolTokens()":{"notice":"Get the maximum number of tokens in a pool."},"getMinimumPoolTokens()":{"notice":"Get the minimum number of tokens in a pool."},"getNonzeroDeltaCount()":{"notice":"Returns the count of non-zero deltas."},"getPauseWindowEndTime()":{"notice":"Returns Vault's pause window end time."},"getPoolConfig(address)":{"notice":"Gets the configuration parameters of a pool."},"getPoolPausedState(address)":{"notice":"Returns the paused status, and end times of the Pool's pause window and buffer period."},"getPoolTokenCountAndIndexOfToken(address,address)":{"notice":"Gets the index of a token in a given pool."},"getPoolTokenInfo(address)":{"notice":"Gets the raw data for a pool: tokens, raw balances, scaling factors."},"getPoolTokenRates(address)":{"notice":"Retrieve the scaling factors from a pool's rate providers."},"getPoolTokens(address)":{"notice":"Gets the tokens registered to a pool."},"getProtocolFees(address)":{"notice":"Returns the accumulated swap and yield fee in `token` collected by the protocol."},"getProtocolSwapFeePercentage()":{"notice":"Retrieves the current protocol swap fee percentage."},"getProtocolYieldFeePercentage()":{"notice":"Retrieves the current protocol yield fee percentage."},"getReservesOf(address)":{"notice":"Retrieves the reserve (i.e., total Vault balance) of a given token."},"getStaticSwapFeePercentage(address)":{"notice":"Fetches the static swap fee percentage for a given pool."},"getTokenDelta(address,address)":{"notice":"Retrieves the token delta for a specific user and token."},"getVaultAdmin()":{"notice":"Returns the Vault Admin contract address."},"getVaultExtension()":{"notice":"Returns the Vault Extension address."},"getVaultPausedState()":{"notice":"Returns the paused status, and end times of the Vault's pause window and buffer period."},"initialize(address,address,address[],uint256[],uint256,bytes)":{"notice":"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange."},"isPoolInRecoveryMode(address)":{"notice":"Checks whether a pool is in recovery mode."},"isPoolInitialized(address)":{"notice":"Checks whether a pool is initialized."},"isPoolPaused(address)":{"notice":"Indicates whether a pool is paused."},"isPoolRegistered(address)":{"notice":"Checks whether a pool is registered."},"isQueryDisabled()":{"notice":"Checks if the queries enabled on the Vault."},"isVaultPaused()":{"notice":"Indicates whether the Vault is paused."},"lock(bytes)":{"notice":"Creates a lock context for a sequence of operations."},"pausePool(address)":{"notice":"Pause the Pool: an emergency action which disables all pool functions."},"pauseVault()":{"notice":"Pause the Vault: an emergency action which disables all operational state-changing functions."},"quote(bytes)":{"notice":"Performs a callback on msg.sender with arguments provided in `data`."},"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))":{"notice":"Registers a pool, associating it with its factory and the tokens it manages."},"removeLiquidity((address,address,uint256,uint256[],uint8,bytes))":{"notice":"Removes liquidity from a pool."},"removeLiquidityRecovery(address,address,uint256)":{"notice":"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type."},"sendTo(address,address,uint256)":{"notice":"Sends tokens to a recipient."},"setAuthorizer(address)":{"notice":"Sets a new Authorizer for the Vault."},"setProtocolSwapFeePercentage(uint256)":{"notice":"Sets a new swap fee percentage for the protocol."},"setProtocolYieldFeePercentage(uint256)":{"notice":"Sets a new yield fee percentage for the protocol."},"setStaticSwapFeePercentage(address,uint256)":{"notice":"Assigns a new static swap fee percentage to the specified pool."},"settle(address)":{"notice":"Settles deltas for a token; must be successful for the current lock to be released."},"swap((uint8,address,address,address,uint256,uint256,bytes))":{"notice":"Swaps tokens based on provided parameters."},"takeFrom(address,address,uint256)":{"notice":"Transfers tokens from a sender to the Vault."},"totalSupply(address)":{"notice":"Gets total supply of a given ERC20 token."},"transfer(address,address,uint256)":{"notice":"Transfers pool token from owner to a recipient."},"transferFrom(address,address,address,uint256)":{"notice":"Transfers pool token from a sender to a recipient using an allowance."},"unpausePool(address)":{"notice":"Reverse a `pause` operation, and restore the Pool to normal functionality."},"unpauseVault()":{"notice":"Reverse a `pause` operation, and restore the Vault to normal functionality."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IVault.sol":"IVault"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/IAuthorizer.sol":{"keccak256":"0xfe3278913eb925022136ae31b1f1a33e60e5b950d0c3288b8bc87d054cdaec03","urls":["bzz-raw://0d2c4586e9f26f8a1fd8dc6945a3ab34d23219da74959fd47e4ba826ab249d53","dweb:/ipfs/QmP3c3GJ8UHYvw6nX7iRDDm3xh4cwJrWUksMREDAohkVD9"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IRateProvider.sol":{"keccak256":"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41","urls":["bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6","dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVault.sol":{"keccak256":"0x9defac7f1a522b6cf6fba6e930d327523fc40db0ea6121b2e6071e757b647e30","urls":["bzz-raw://c53c9c819cdc57258fa7c8365a51400ee37f7df390a01815f9c21fac47e33562","dweb:/ipfs/QmeZJDYTku8iqC9tjraQGyDDxrwuYpt8YELWKi4puWaApb"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultAdmin.sol":{"keccak256":"0x7741e61bfcab7f3d2201367c4512903991de2e91b10ff022a22f1ea1f7416a91","urls":["bzz-raw://49e3ce6c9d9a7bbc9add5bd5577fa73b3cff9b3b102e025e52f888ca232da2cb","dweb:/ipfs/QmWRwhXTvnTc3Z3tHWuo6dBnxtFr89KQepVDHEBrguV2iE"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultErrors.sol":{"keccak256":"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3","urls":["bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c","dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultEvents.sol":{"keccak256":"0xe561d23e8f311be7274a115a839f4ae3e2b24accc2b3b1fb1e23dbd5ec97ab32","urls":["bzz-raw://933b4078d8cf44ce5f58a02843808ec7ff07120ea9c4b51a95e2d4606aa566b9","dweb:/ipfs/QmT3r93qATKxcyUej9dCfayUB5KRTvHJ6BvNcy1Un6FcAf"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultExtension.sol":{"keccak256":"0x95690cde8cb09617aab94ca6eb8df973576d96d75a37eacd071f6469d91bcad7","urls":["bzz-raw://358646937a4f0b6312b90c9e0ad49cb33d303512bd34be9c1233d5376f18f6f0","dweb:/ipfs/QmeeKoYhqRwPjQEKpyWQtTG58vmdbRkFQRUbAAE6RWdXb7"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultMain.sol":{"keccak256":"0xda48e9312d7b1428fa89b30406b586262aab2d7d0281ebbdbbfaef1375240849","urls":["bzz-raw://add42cd3dc01ebd4ea38f047406bd97ad99546bd25f8645e45ba6800d1e2e149","dweb:/ipfs/QmZNt5KUpTLETPeq9ypSUq2KhACChVNaQsmF9Ye5SXPBT3"],"license":"GPL-3.0-or-later"},"contracts/interfaces/VaultTypes.sol":{"keccak256":"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11","urls":["bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f","dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW"],"license":"GPL-3.0-or-later"},"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol":{"keccak256":"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d","urls":["bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205","dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2","urls":["bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850","dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"],"license":"MIT"}},"version":1},"id":4}