{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"token","type":"address","internalType":"address"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getLocker","inputs":[{"name":"index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getLockersCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getNonzeroDeltaCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolConfig","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"tuple","internalType":"struct PoolConfig","components":[{"name":"isPoolRegistered","type":"bool","internalType":"bool"},{"name":"isPoolInitialized","type":"bool","internalType":"bool"},{"name":"isPoolPaused","type":"bool","internalType":"bool"},{"name":"isPoolInRecoveryMode","type":"bool","internalType":"bool"},{"name":"hasDynamicSwapFee","type":"bool","internalType":"bool"},{"name":"staticSwapFeePercentage","type":"uint64","internalType":"uint64"},{"name":"tokenDecimalDiffs","type":"uint24","internalType":"uint24"},{"name":"pauseWindowEndTime","type":"uint32","internalType":"uint32"},{"name":"hooks","type":"tuple","internalType":"struct PoolHooks","components":[{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"}]},{"name":"liquidityManagement","type":"tuple","internalType":"struct LiquidityManagement","components":[{"name":"supportsAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"supportsRemoveLiquidityCustom","type":"bool","internalType":"bool"}]}]}],"stateMutability":"view"},{"type":"function","name":"getPoolPausedState","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenInfo","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"contract IERC20[]"},{"name":"","type":"uint8[]","internalType":"enum TokenType[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"},{"name":"","type":"address[]","internalType":"contract IRateProvider[]"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokens","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"contract IERC20[]"}],"stateMutability":"view"},{"type":"function","name":"getProtocolFees","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProtocolSwapFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProtocolYieldFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getReservesOf","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getStaticSwapFeePercentage","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getTokenDelta","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"","type":"int256","internalType":"int256"}],"stateMutability":"view"},{"type":"function","name":"getVaultAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"exactAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"minBptAmountOut","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"bptAmountOut","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"isPoolInRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolInitialized","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolPaused","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isPoolRegistered","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isQueryDisabled","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"quote","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"result","type":"bytes","internalType":"bytes"}],"stateMutability":"payable"},{"type":"function","name":"registerPool","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"tokenConfig","type":"tuple[]","internalType":"struct TokenConfig[]","components":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"tokenType","type":"uint8","internalType":"enum TokenType"},{"name":"rateProvider","type":"address","internalType":"contract IRateProvider"},{"name":"yieldFeeExempt","type":"bool","internalType":"bool"}]},{"name":"pauseWindowEndTime","type":"uint256","internalType":"uint256"},{"name":"pauseManager","type":"address","internalType":"address"},{"name":"hookConfig","type":"tuple","internalType":"struct PoolHooks","components":[{"name":"shouldCallBeforeInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallAfterInitialize","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeSwap","type":"bool","internalType":"bool"},{"name":"shouldCallAfterSwap","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterAddLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallBeforeRemoveLiquidity","type":"bool","internalType":"bool"},{"name":"shouldCallAfterRemoveLiquidity","type":"bool","internalType":"bool"}]},{"name":"liquidityManagement","type":"tuple","internalType":"struct LiquidityManagement","components":[{"name":"supportsAddLiquidityCustom","type":"bool","internalType":"bool"},{"name":"supportsRemoveLiquidityCustom","type":"bool","internalType":"bool"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeLiquidityRecovery","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"exactBptAmountIn","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"amountsOut","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"totalSupply","inputs":[{"name":"token","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"vault","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVault"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address,address)":"927da105","approve(address,address,uint256)":"e1f21c67","balanceOf(address,address)":"f7888aec","getLocker(uint256)":"0b1bd243","getLockersCount()":"0f950ea6","getNonzeroDeltaCount()":"db817187","getPoolConfig(address)":"f29486a1","getPoolPausedState(address)":"15e32046","getPoolTokenInfo(address)":"67e0e076","getPoolTokens(address)":"ca4f2803","getProtocolFees(address)":"f27dd8ab","getProtocolSwapFeePercentage()":"c2372f82","getProtocolYieldFeePercentage()":"b099a799","getReservesOf(address)":"96787092","getStaticSwapFeePercentage(address)":"b45090f9","getTokenDelta(address,address)":"ab8f258d","getVaultAdmin()":"1ba0ae45","initialize(address,address,address[],uint256[],uint256,bytes)":"ba8a2be0","isPoolInRecoveryMode(address)":"be7d628a","isPoolInitialized(address)":"532cec7c","isPoolPaused(address)":"6c9bc732","isPoolRegistered(address)":"c673bdaf","isQueryDisabled()":"b4aef0ab","quote(bytes)":"edfa3568","registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))":"fea5ec5d","removeLiquidityRecovery(address,address,uint256)":"3a2d133b","totalSupply(address)":"e4dc2aa4","transfer(address,address,uint256)":"beabacc8","transferFrom(address,address,address,uint256)":"15dacbea","vault()":"fbfa77cf"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonzeroDeltaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPoolRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInitialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoolInRecoveryMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasDynamicSwapFee\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"staticSwapFeePercentage\",\"type\":\"uint64\"},{\"internalType\":\"uint24\",\"name\":\"tokenDecimalDiffs\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct PoolHooks\",\"name\":\"hooks\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"supportsAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"supportsRemoveLiquidityCustom\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"internalType\":\"struct PoolConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"enum TokenType[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IRateProvider[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolYieldFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getReservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getStaticSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"exactAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInRecoveryMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isPoolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueryDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"contract IRateProvider\",\"name\":\"rateProvider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"yieldFeeExempt\",\"type\":\"bool\"}],\"internalType\":\"struct TokenConfig[]\",\"name\":\"tokenConfig\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pauseManager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterAddLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallBeforeRemoveLiquidity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldCallAfterRemoveLiquidity\",\"type\":\"bool\"}],\"internalType\":\"struct PoolHooks\",\"name\":\"hookConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"supportsAddLiquidityCustom\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"supportsRemoveLiquidityCustom\",\"type\":\"bool\"}],\"internalType\":\"struct LiquidityManagement\",\"name\":\"liquidityManagement\",\"type\":\"tuple\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exactBptAmountIn\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityRecovery\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"params\":{\"owner\":\"Owner's address\",\"spender\":\"Spender's address\",\"token\":\"Token's address\"},\"returns\":{\"_0\":\"Amount of tokens the spender is allowed to spend\"}},\"approve(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to approve\",\"owner\":\"Owner's address\",\"spender\":\"Spender's address\"},\"returns\":{\"_0\":\"True if successful, false otherwise\"}},\"balanceOf(address,address)\":{\"params\":{\"account\":\"Account's address\",\"token\":\"Token's address\"},\"returns\":{\"_0\":\"Balance of the account for the token\"}},\"getLocker(uint256)\":{\"params\":{\"index\":\"The index of the locker's address to fetch\"},\"returns\":{\"_0\":\"The address at the given index\"}},\"getLockersCount()\":{\"returns\":{\"_0\":\"The number of lockers\"}},\"getNonzeroDeltaCount()\":{\"returns\":{\"_0\":\"The current value of _nonzeroDeltaCount\"}},\"getPoolConfig(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"Pool configuration\"}},\"getPoolPausedState(address)\":{\"details\":\"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period.\",\"params\":{\"pool\":\"The pool whose data is requested\"},\"returns\":{\"_0\":\"paused True if the Pool is paused\",\"_1\":\"poolPauseWindowEndTime The timestamp of the end of the Pool's pause window\",\"_2\":\"poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)\",\"_3\":\"pauseManager The pause manager, or the zero address\"}},\"getPoolTokenInfo(address)\":{\"returns\":{\"_0\":\"tokens Tokens registered to the pool\",\"_1\":\"tokenTypes The types of all registered tokens\",\"_2\":\"balancesRaw Corresponding raw balances of the tokens\",\"_3\":\"scalingFactors Corresponding scalingFactors of the tokens\",\"_4\":\"rateProviders Corresponding rateProviders of the tokens (or zero for tokens with no rates)\"}},\"getPoolTokens(address)\":{\"params\":{\"pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"tokens List of tokens in the pool\"}},\"getProtocolFees(address)\":{\"params\":{\"token\":\"The address of the token in which fees have been accumulated\"},\"returns\":{\"_0\":\"The total amount of fees accumulated in the specified token\"}},\"getProtocolSwapFeePercentage()\":{\"returns\":{\"_0\":\"The current protocol swap fee percentage\"}},\"getProtocolYieldFeePercentage()\":{\"returns\":{\"_0\":\"The current protocol yield fee percentage\"}},\"getReservesOf(address)\":{\"params\":{\"token\":\"The token for which to retrieve the reserve\"},\"returns\":{\"_0\":\"The amount of reserves for the given token\"}},\"getStaticSwapFeePercentage(address)\":{\"params\":{\"pool\":\"The address of the pool whose static swap fee percentage is being queried\"},\"returns\":{\"_0\":\"The current static swap fee percentage for the specified pool\"}},\"getTokenDelta(address,address)\":{\"details\":\"This function allows reading the value from the `_tokenDeltas` mapping.\",\"params\":{\"token\":\"The token for which the delta is being fetched\",\"user\":\"The address of the user for whom the delta is being fetched\"},\"returns\":{\"_0\":\"The delta of the specified token for the specified user\"}},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"params\":{\"exactAmountsIn\":\"Exact amounts of input tokens\",\"minBptAmountOut\":\"Minimum amount of output pool tokens\",\"pool\":\"Address of the pool to initialize\",\"to\":\"Address that will receive the output BPT\",\"tokens\":\"Tokens used to seed the pool (must match the registered tokens)\",\"userData\":\"Additional (optional) data required for adding initial liquidity\"},\"returns\":{\"bptAmountOut\":\"Output pool token amount\"}},\"isPoolInRecoveryMode(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"True if the pool is initialized, false otherwise\"}},\"isPoolInitialized(address)\":{\"details\":\"An initialized pool can be considered registered as well.\",\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"True if the pool is initialized, false otherwise\"}},\"isPoolPaused(address)\":{\"params\":{\"pool\":\"The pool to be checked\"},\"returns\":{\"_0\":\"True if the pool is paused\"}},\"isPoolRegistered(address)\":{\"params\":{\"pool\":\"Address of the pool to check\"},\"returns\":{\"_0\":\"True if the pool is registered, false otherwise\"}},\"isQueryDisabled()\":{\"returns\":{\"_0\":\"If true, then queries are disabled\"}},\"quote(bytes)\":{\"details\":\"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `withLocker` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `withLocker`. `transient` modifier ensuring balances changes within the Vault are settled.\",\"params\":{\"data\":\"Contains function signature and args to be passed to the msg.sender\"},\"returns\":{\"result\":\"Resulting data from the call\"}},\"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))\":{\"details\":\"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.\",\"params\":{\"hookConfig\":\"Flags indicating which hooks the pool supports\",\"liquidityManagement\":\"Liquidity management flags with implemented methods\",\"pauseManager\":\"Optional contract the Vault will allow to pause the pool\",\"pauseWindowEndTime\":\"The timestamp after which it is no longer possible to pause the pool\",\"pool\":\"The address of the pool being registered\",\"tokenConfig\":\"An array of descriptors for the tokens the pool will manage\"}},\"removeLiquidityRecovery(address,address,uint256)\":{\"params\":{\"exactBptAmountIn\":\"Input pool token amount\",\"from\":\"Address of user to burn pool tokens from\",\"pool\":\"Address of the pool\"},\"returns\":{\"amountsOut\":\"Actual calculated amounts of output tokens, sorted in token registration order\"}},\"totalSupply(address)\":{\"params\":{\"token\":\"Token's address\"},\"returns\":{\"_0\":\"Total supply of the token\"}},\"transfer(address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"owner\":\"Owner's address\",\"to\":\"Recipient's address\"},\"returns\":{\"_0\":\"True if successful, false otherwise\"}},\"transferFrom(address,address,address,uint256)\":{\"details\":\"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.\",\"params\":{\"amount\":\"Amount of tokens to transfer\",\"from\":\"Sender's address\",\"spender\":\"Address allowed to perform the transfer\",\"to\":\"Recipient's address\"},\"returns\":{\"_0\":\"True if successful, false otherwise\"}},\"vault()\":{\"details\":\"Returns the main Vault address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"Gets allowance of a spender for a given ERC20 token and owner.\"},\"approve(address,address,uint256)\":{\"notice\":\"Approves a spender to spend pool tokens on behalf of sender.\"},\"balanceOf(address,address)\":{\"notice\":\"Gets balance of an account for a given ERC20 token.\"},\"getLocker(uint256)\":{\"notice\":\"Returns the address at the specified index of the _lockers array.\"},\"getLockersCount()\":{\"notice\":\"Returns the total number of lockers.\"},\"getNonzeroDeltaCount()\":{\"notice\":\"Returns the count of non-zero deltas.\"},\"getPoolConfig(address)\":{\"notice\":\"Gets the configuration parameters of a pool.\"},\"getPoolPausedState(address)\":{\"notice\":\"Returns the paused status, and end times of the Pool's pause window and buffer period.\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the raw data for a pool: tokens, raw balances, scaling factors.\"},\"getPoolTokens(address)\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"getProtocolFees(address)\":{\"notice\":\"Returns the accumulated swap and yield fee in `token` collected by the protocol.\"},\"getProtocolSwapFeePercentage()\":{\"notice\":\"Retrieves the current protocol swap fee percentage.\"},\"getProtocolYieldFeePercentage()\":{\"notice\":\"Retrieves the current protocol yield fee percentage.\"},\"getReservesOf(address)\":{\"notice\":\"Retrieves the reserve (i.e., total Vault balance) of a given token.\"},\"getStaticSwapFeePercentage(address)\":{\"notice\":\"Fetches the static swap fee percentage for a given pool.\"},\"getTokenDelta(address,address)\":{\"notice\":\"Retrieves the token delta for a specific user and token.\"},\"getVaultAdmin()\":{\"notice\":\"Returns the Vault Admin contract address.\"},\"initialize(address,address,address[],uint256[],uint256,bytes)\":{\"notice\":\"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange.\"},\"isPoolInRecoveryMode(address)\":{\"notice\":\"Checks whether a pool is in recovery mode.\"},\"isPoolInitialized(address)\":{\"notice\":\"Checks whether a pool is initialized.\"},\"isPoolPaused(address)\":{\"notice\":\"Indicates whether a pool is paused.\"},\"isPoolRegistered(address)\":{\"notice\":\"Checks whether a pool is registered.\"},\"isQueryDisabled()\":{\"notice\":\"Checks if the queries enabled on the Vault.\"},\"quote(bytes)\":{\"notice\":\"Performs a callback on msg.sender with arguments provided in `data`.\"},\"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))\":{\"notice\":\"Registers a pool, associating it with its factory and the tokens it manages.\"},\"removeLiquidityRecovery(address,address,uint256)\":{\"notice\":\"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type.\"},\"totalSupply(address)\":{\"notice\":\"Gets total supply of a given ERC20 token.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfers pool token from owner to a recipient.\"},\"transferFrom(address,address,address,uint256)\":{\"notice\":\"Transfers pool token from a sender to a recipient using an allowance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IVaultExtension.sol\":\"IVaultExtension\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0xfe3278913eb925022136ae31b1f1a33e60e5b950d0c3288b8bc87d054cdaec03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0d2c4586e9f26f8a1fd8dc6945a3ab34d23219da74959fd47e4ba826ab249d53\",\"dweb:/ipfs/QmP3c3GJ8UHYvw6nX7iRDDm3xh4cwJrWUksMREDAohkVD9\"]},\"contracts/interfaces/IRateProvider.sol\":{\"keccak256\":\"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6\",\"dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9\"]},\"contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x9defac7f1a522b6cf6fba6e930d327523fc40db0ea6121b2e6071e757b647e30\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c53c9c819cdc57258fa7c8365a51400ee37f7df390a01815f9c21fac47e33562\",\"dweb:/ipfs/QmeZJDYTku8iqC9tjraQGyDDxrwuYpt8YELWKi4puWaApb\"]},\"contracts/interfaces/IVaultAdmin.sol\":{\"keccak256\":\"0x7741e61bfcab7f3d2201367c4512903991de2e91b10ff022a22f1ea1f7416a91\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49e3ce6c9d9a7bbc9add5bd5577fa73b3cff9b3b102e025e52f888ca232da2cb\",\"dweb:/ipfs/QmWRwhXTvnTc3Z3tHWuo6dBnxtFr89KQepVDHEBrguV2iE\"]},\"contracts/interfaces/IVaultErrors.sol\":{\"keccak256\":\"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c\",\"dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah\"]},\"contracts/interfaces/IVaultEvents.sol\":{\"keccak256\":\"0xe561d23e8f311be7274a115a839f4ae3e2b24accc2b3b1fb1e23dbd5ec97ab32\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://933b4078d8cf44ce5f58a02843808ec7ff07120ea9c4b51a95e2d4606aa566b9\",\"dweb:/ipfs/QmT3r93qATKxcyUej9dCfayUB5KRTvHJ6BvNcy1Un6FcAf\"]},\"contracts/interfaces/IVaultExtension.sol\":{\"keccak256\":\"0x95690cde8cb09617aab94ca6eb8df973576d96d75a37eacd071f6469d91bcad7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://358646937a4f0b6312b90c9e0ad49cb33d303512bd34be9c1233d5376f18f6f0\",\"dweb:/ipfs/QmeeKoYhqRwPjQEKpyWQtTG58vmdbRkFQRUbAAE6RWdXb7\"]},\"contracts/interfaces/IVaultMain.sol\":{\"keccak256\":\"0xda48e9312d7b1428fa89b30406b586262aab2d7d0281ebbdbbfaef1375240849\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://add42cd3dc01ebd4ea38f047406bd97ad99546bd25f8645e45ba6800d1e2e149\",\"dweb:/ipfs/QmZNt5KUpTLETPeq9ypSUq2KhACChVNaQsmF9Ye5SXPBT3\"]},\"contracts/interfaces/VaultTypes.sol\":{\"keccak256\":\"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f\",\"dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getLocker","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getLockersCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getNonzeroDeltaCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolConfig","outputs":[{"internalType":"struct PoolConfig","name":"","type":"tuple","components":[{"internalType":"bool","name":"isPoolRegistered","type":"bool"},{"internalType":"bool","name":"isPoolInitialized","type":"bool"},{"internalType":"bool","name":"isPoolPaused","type":"bool"},{"internalType":"bool","name":"isPoolInRecoveryMode","type":"bool"},{"internalType":"bool","name":"hasDynamicSwapFee","type":"bool"},{"internalType":"uint64","name":"staticSwapFeePercentage","type":"uint64"},{"internalType":"uint24","name":"tokenDecimalDiffs","type":"uint24"},{"internalType":"uint32","name":"pauseWindowEndTime","type":"uint32"},{"internalType":"struct PoolHooks","name":"hooks","type":"tuple","components":[{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}]},{"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple","components":[{"internalType":"bool","name":"supportsAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"supportsRemoveLiquidityCustom","type":"bool"}]}]}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolPausedState","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenInfo","outputs":[{"internalType":"contract IERC20[]","name":"","type":"address[]"},{"internalType":"enum TokenType[]","name":"","type":"uint8[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"contract IRateProvider[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"","type":"address[]"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getProtocolFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getProtocolSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getProtocolYieldFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getReservesOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getStaticSwapFeePercentage","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"contract IERC20","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"getTokenDelta","outputs":[{"internalType":"int256","name":"","type":"int256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultAdmin","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"exactAmountsIn","type":"uint256[]"},{"internalType":"uint256","name":"minBptAmountOut","type":"uint256"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"initialize","outputs":[{"internalType":"uint256","name":"bptAmountOut","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolInRecoveryMode","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolInitialized","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"isPoolRegistered","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isQueryDisabled","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"quote","outputs":[{"internalType":"bytes","name":"result","type":"bytes"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"struct TokenConfig[]","name":"tokenConfig","type":"tuple[]","components":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"enum TokenType","name":"tokenType","type":"uint8"},{"internalType":"contract IRateProvider","name":"rateProvider","type":"address"},{"internalType":"bool","name":"yieldFeeExempt","type":"bool"}]},{"internalType":"uint256","name":"pauseWindowEndTime","type":"uint256"},{"internalType":"address","name":"pauseManager","type":"address"},{"internalType":"struct PoolHooks","name":"hookConfig","type":"tuple","components":[{"internalType":"bool","name":"shouldCallBeforeInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallAfterInitialize","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeSwap","type":"bool"},{"internalType":"bool","name":"shouldCallAfterSwap","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterAddLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallBeforeRemoveLiquidity","type":"bool"},{"internalType":"bool","name":"shouldCallAfterRemoveLiquidity","type":"bool"}]},{"internalType":"struct LiquidityManagement","name":"liquidityManagement","type":"tuple","components":[{"internalType":"bool","name":"supportsAddLiquidityCustom","type":"bool"},{"internalType":"bool","name":"supportsRemoveLiquidityCustom","type":"bool"}]}],"stateMutability":"nonpayable","type":"function","name":"registerPool"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"exactBptAmountIn","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"removeLiquidityRecovery","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"allowance(address,address,address)":{"params":{"owner":"Owner's address","spender":"Spender's address","token":"Token's address"},"returns":{"_0":"Amount of tokens the spender is allowed to spend"}},"approve(address,address,uint256)":{"details":"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.","params":{"amount":"Amount of tokens to approve","owner":"Owner's address","spender":"Spender's address"},"returns":{"_0":"True if successful, false otherwise"}},"balanceOf(address,address)":{"params":{"account":"Account's address","token":"Token's address"},"returns":{"_0":"Balance of the account for the token"}},"getLocker(uint256)":{"params":{"index":"The index of the locker's address to fetch"},"returns":{"_0":"The address at the given index"}},"getLockersCount()":{"returns":{"_0":"The number of lockers"}},"getNonzeroDeltaCount()":{"returns":{"_0":"The current value of _nonzeroDeltaCount"}},"getPoolConfig(address)":{"params":{"pool":"Address of the pool"},"returns":{"_0":"Pool configuration"}},"getPoolPausedState(address)":{"details":"Note that even when set to a paused state, the pool will automatically unpause at the end of the buffer period.","params":{"pool":"The pool whose data is requested"},"returns":{"_0":"paused True if the Pool is paused","_1":"poolPauseWindowEndTime The timestamp of the end of the Pool's pause window","_2":"poolBufferPeriodEndTime The timestamp after which the Pool unpauses itself (if paused)","_3":"pauseManager The pause manager, or the zero address"}},"getPoolTokenInfo(address)":{"returns":{"_0":"tokens Tokens registered to the pool","_1":"tokenTypes The types of all registered tokens","_2":"balancesRaw Corresponding raw balances of the tokens","_3":"scalingFactors Corresponding scalingFactors of the tokens","_4":"rateProviders Corresponding rateProviders of the tokens (or zero for tokens with no rates)"}},"getPoolTokens(address)":{"params":{"pool":"Address of the pool"},"returns":{"_0":"tokens List of tokens in the pool"}},"getProtocolFees(address)":{"params":{"token":"The address of the token in which fees have been accumulated"},"returns":{"_0":"The total amount of fees accumulated in the specified token"}},"getProtocolSwapFeePercentage()":{"returns":{"_0":"The current protocol swap fee percentage"}},"getProtocolYieldFeePercentage()":{"returns":{"_0":"The current protocol yield fee percentage"}},"getReservesOf(address)":{"params":{"token":"The token for which to retrieve the reserve"},"returns":{"_0":"The amount of reserves for the given token"}},"getStaticSwapFeePercentage(address)":{"params":{"pool":"The address of the pool whose static swap fee percentage is being queried"},"returns":{"_0":"The current static swap fee percentage for the specified pool"}},"getTokenDelta(address,address)":{"details":"This function allows reading the value from the `_tokenDeltas` mapping.","params":{"token":"The token for which the delta is being fetched","user":"The address of the user for whom the delta is being fetched"},"returns":{"_0":"The delta of the specified token for the specified user"}},"initialize(address,address,address[],uint256[],uint256,bytes)":{"params":{"exactAmountsIn":"Exact amounts of input tokens","minBptAmountOut":"Minimum amount of output pool tokens","pool":"Address of the pool to initialize","to":"Address that will receive the output BPT","tokens":"Tokens used to seed the pool (must match the registered tokens)","userData":"Additional (optional) data required for adding initial liquidity"},"returns":{"bptAmountOut":"Output pool token amount"}},"isPoolInRecoveryMode(address)":{"params":{"pool":"Address of the pool to check"},"returns":{"_0":"True if the pool is initialized, false otherwise"}},"isPoolInitialized(address)":{"details":"An initialized pool can be considered registered as well.","params":{"pool":"Address of the pool to check"},"returns":{"_0":"True if the pool is initialized, false otherwise"}},"isPoolPaused(address)":{"params":{"pool":"The pool to be checked"},"returns":{"_0":"True if the pool is paused"}},"isPoolRegistered(address)":{"params":{"pool":"Address of the pool to check"},"returns":{"_0":"True if the pool is registered, false otherwise"}},"isQueryDisabled()":{"returns":{"_0":"If true, then queries are disabled"}},"quote(bytes)":{"details":"Used to query a set of operations on the Vault. Only off-chain eth_call are allowed, anything else will revert. Allows querying any operation on the Vault that has the `withLocker` modifier. Allows the external calling of a function via the Vault contract to access Vault's functions guarded by `withLocker`. `transient` modifier ensuring balances changes within the Vault are settled.","params":{"data":"Contains function signature and args to be passed to the msg.sender"},"returns":{"result":"Resulting data from the call"}},"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))":{"details":"A pool can opt-out of pausing by providing a zero value for the pause window, or allow pausing indefinitely by providing a large value. (Pool pause windows are not limited by the Vault maximums.) The vault defines an additional buffer period during which a paused pool will stay paused. After the buffer period passes, a paused pool will automatically unpause. A pool can opt out of Balancer governance pausing by providing a custom `pauseManager`. This might be a multi-sig contract or an arbitrary smart contract with its own access controls, that forwards calls to the Vault. If the zero address is provided for the `pauseManager`, permissions for pausing the pool will default to the authorizer.","params":{"hookConfig":"Flags indicating which hooks the pool supports","liquidityManagement":"Liquidity management flags with implemented methods","pauseManager":"Optional contract the Vault will allow to pause the pool","pauseWindowEndTime":"The timestamp after which it is no longer possible to pause the pool","pool":"The address of the pool being registered","tokenConfig":"An array of descriptors for the tokens the pool will manage"}},"removeLiquidityRecovery(address,address,uint256)":{"params":{"exactBptAmountIn":"Input pool token amount","from":"Address of user to burn pool tokens from","pool":"Address of the pool"},"returns":{"amountsOut":"Actual calculated amounts of output tokens, sorted in token registration order"}},"totalSupply(address)":{"params":{"token":"Token's address"},"returns":{"_0":"Total supply of the token"}},"transfer(address,address,uint256)":{"details":"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.","params":{"amount":"Amount of tokens to transfer","owner":"Owner's address","to":"Recipient's address"},"returns":{"_0":"True if successful, false otherwise"}},"transferFrom(address,address,address,uint256)":{"details":"Notice that the pool token address is not included in the params. This function is exclusively called by the pool contract, so msg.sender is used as the token address.","params":{"amount":"Amount of tokens to transfer","from":"Sender's address","spender":"Address allowed to perform the transfer","to":"Recipient's address"},"returns":{"_0":"True if successful, false otherwise"}},"vault()":{"details":"Returns the main Vault address."}},"version":1},"userdoc":{"kind":"user","methods":{"allowance(address,address,address)":{"notice":"Gets allowance of a spender for a given ERC20 token and owner."},"approve(address,address,uint256)":{"notice":"Approves a spender to spend pool tokens on behalf of sender."},"balanceOf(address,address)":{"notice":"Gets balance of an account for a given ERC20 token."},"getLocker(uint256)":{"notice":"Returns the address at the specified index of the _lockers array."},"getLockersCount()":{"notice":"Returns the total number of lockers."},"getNonzeroDeltaCount()":{"notice":"Returns the count of non-zero deltas."},"getPoolConfig(address)":{"notice":"Gets the configuration parameters of a pool."},"getPoolPausedState(address)":{"notice":"Returns the paused status, and end times of the Pool's pause window and buffer period."},"getPoolTokenInfo(address)":{"notice":"Gets the raw data for a pool: tokens, raw balances, scaling factors."},"getPoolTokens(address)":{"notice":"Gets the tokens registered to a pool."},"getProtocolFees(address)":{"notice":"Returns the accumulated swap and yield fee in `token` collected by the protocol."},"getProtocolSwapFeePercentage()":{"notice":"Retrieves the current protocol swap fee percentage."},"getProtocolYieldFeePercentage()":{"notice":"Retrieves the current protocol yield fee percentage."},"getReservesOf(address)":{"notice":"Retrieves the reserve (i.e., total Vault balance) of a given token."},"getStaticSwapFeePercentage(address)":{"notice":"Fetches the static swap fee percentage for a given pool."},"getTokenDelta(address,address)":{"notice":"Retrieves the token delta for a specific user and token."},"getVaultAdmin()":{"notice":"Returns the Vault Admin contract address."},"initialize(address,address,address[],uint256[],uint256,bytes)":{"notice":"Initializes a registered pool by adding liquidity; mints BPT tokens for the first time in exchange."},"isPoolInRecoveryMode(address)":{"notice":"Checks whether a pool is in recovery mode."},"isPoolInitialized(address)":{"notice":"Checks whether a pool is initialized."},"isPoolPaused(address)":{"notice":"Indicates whether a pool is paused."},"isPoolRegistered(address)":{"notice":"Checks whether a pool is registered."},"isQueryDisabled()":{"notice":"Checks if the queries enabled on the Vault."},"quote(bytes)":{"notice":"Performs a callback on msg.sender with arguments provided in `data`."},"registerPool(address,(address,uint8,address,bool)[],uint256,address,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool))":{"notice":"Registers a pool, associating it with its factory and the tokens it manages."},"removeLiquidityRecovery(address,address,uint256)":{"notice":"Remove liquidity from a pool specifying exact pool tokens in, with proportional token amounts out. The request is implemented by the Vault without any interaction with the pool, ensuring that it works the same for all pools, and cannot be disabled by a new pool type."},"totalSupply(address)":{"notice":"Gets total supply of a given ERC20 token."},"transfer(address,address,uint256)":{"notice":"Transfers pool token from owner to a recipient."},"transferFrom(address,address,address,uint256)":{"notice":"Transfers pool token from a sender to a recipient using an allowance."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IVaultExtension.sol":"IVaultExtension"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/IAuthorizer.sol":{"keccak256":"0xfe3278913eb925022136ae31b1f1a33e60e5b950d0c3288b8bc87d054cdaec03","urls":["bzz-raw://0d2c4586e9f26f8a1fd8dc6945a3ab34d23219da74959fd47e4ba826ab249d53","dweb:/ipfs/QmP3c3GJ8UHYvw6nX7iRDDm3xh4cwJrWUksMREDAohkVD9"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IRateProvider.sol":{"keccak256":"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41","urls":["bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6","dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVault.sol":{"keccak256":"0x9defac7f1a522b6cf6fba6e930d327523fc40db0ea6121b2e6071e757b647e30","urls":["bzz-raw://c53c9c819cdc57258fa7c8365a51400ee37f7df390a01815f9c21fac47e33562","dweb:/ipfs/QmeZJDYTku8iqC9tjraQGyDDxrwuYpt8YELWKi4puWaApb"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultAdmin.sol":{"keccak256":"0x7741e61bfcab7f3d2201367c4512903991de2e91b10ff022a22f1ea1f7416a91","urls":["bzz-raw://49e3ce6c9d9a7bbc9add5bd5577fa73b3cff9b3b102e025e52f888ca232da2cb","dweb:/ipfs/QmWRwhXTvnTc3Z3tHWuo6dBnxtFr89KQepVDHEBrguV2iE"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultErrors.sol":{"keccak256":"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3","urls":["bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c","dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultEvents.sol":{"keccak256":"0xe561d23e8f311be7274a115a839f4ae3e2b24accc2b3b1fb1e23dbd5ec97ab32","urls":["bzz-raw://933b4078d8cf44ce5f58a02843808ec7ff07120ea9c4b51a95e2d4606aa566b9","dweb:/ipfs/QmT3r93qATKxcyUej9dCfayUB5KRTvHJ6BvNcy1Un6FcAf"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultExtension.sol":{"keccak256":"0x95690cde8cb09617aab94ca6eb8df973576d96d75a37eacd071f6469d91bcad7","urls":["bzz-raw://358646937a4f0b6312b90c9e0ad49cb33d303512bd34be9c1233d5376f18f6f0","dweb:/ipfs/QmeeKoYhqRwPjQEKpyWQtTG58vmdbRkFQRUbAAE6RWdXb7"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultMain.sol":{"keccak256":"0xda48e9312d7b1428fa89b30406b586262aab2d7d0281ebbdbbfaef1375240849","urls":["bzz-raw://add42cd3dc01ebd4ea38f047406bd97ad99546bd25f8645e45ba6800d1e2e149","dweb:/ipfs/QmZNt5KUpTLETPeq9ypSUq2KhACChVNaQsmF9Ye5SXPBT3"],"license":"GPL-3.0-or-later"},"contracts/interfaces/VaultTypes.sol":{"keccak256":"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11","urls":["bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f","dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW"],"license":"GPL-3.0-or-later"},"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol":{"keccak256":"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d","urls":["bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205","dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2","urls":["bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850","dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"],"license":"MIT"}},"version":1},"id":8}