{"abi":[{"type":"function","name":"collectProtocolFees","inputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"disableQuery","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"disableRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"enableRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getBufferPeriodDuration","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getBufferPeriodEndTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getMaximumPoolTokens","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"getMinimumPoolTokens","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"pure"},{"type":"function","name":"getPauseWindowEndTime","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenRates","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getVaultPausedState","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isVaultPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"pausePool","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"pauseVault","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setAuthorizer","inputs":[{"name":"newAuthorizer","type":"address","internalType":"contract IAuthorizer"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setProtocolSwapFeePercentage","inputs":[{"name":"newSwapFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setProtocolYieldFeePercentage","inputs":[{"name":"newYieldFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setStaticSwapFeePercentage","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"swapFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unpausePool","inputs":[{"name":"pool","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"unpauseVault","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"vault","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVault"}],"stateMutability":"view"},{"type":"event","name":"SwapFeePercentageChanged","inputs":[{"name":"pool","type":"address","indexed":true,"internalType":"address"},{"name":"swapFeePercentage","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"collectProtocolFees(address[])":"00aa45a5","disableQuery()":"de1a36a6","disableRecoveryMode(address)":"bffb78b2","enableRecoveryMode(address)":"dc3f574e","getBufferPeriodDuration()":"20c1fb7a","getBufferPeriodEndTime()":"cd51c12f","getMaximumPoolTokens()":"2e42f4d5","getMinimumPoolTokens()":"a8175b27","getPauseWindowEndTime()":"8a8d123a","getPoolTokenRates(address)":"7e361bde","getVaultPausedState()":"85c8c015","isVaultPaused()":"098401f5","pausePool(address)":"55aca1ec","pauseVault()":"9e0879c2","setAuthorizer(address)":"058a628f","setProtocolSwapFeePercentage(uint256)":"8bf6daa5","setProtocolYieldFeePercentage(uint256)":"e4ecefe7","setStaticSwapFeePercentage(address,uint256)":"d15126ba","unpausePool(address)":"f21c38cd","unpauseVault()":"0b7562be","vault()":"fbfa77cf"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"collectProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"disableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"enableRecoveryMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaximumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPauseWindowEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolTokenRates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVaultPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"pausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newYieldFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolYieldFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setStaticSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"unpausePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"SwapFeePercentageChanged(address,uint256)\":{\"params\":{\"swapFeePercentage\":\"The new swap fee percentage for the pool\"}}},\"kind\":\"dev\",\"methods\":{\"collectProtocolFees(address[])\":{\"details\":\"Fees are sent to msg.sender.\",\"params\":{\"tokens\":\"An array of token addresses for which the fees should be collected\"}},\"disableRecoveryMode(address)\":{\"details\":\"This is a permissioned function.\",\"params\":{\"pool\":\"The pool\"}},\"enableRecoveryMode(address)\":{\"details\":\"This is a permissioned function.\",\"params\":{\"pool\":\"The pool\"}},\"getBufferPeriodDuration()\":{\"details\":\"This value is immutable; the getter can be called by anyone.\"},\"getBufferPeriodEndTime()\":{\"details\":\"This value is immutable; the getter can be called by anyone.\"},\"getMaximumPoolTokens()\":{\"returns\":{\"_0\":\"The token count of a minimal pool\"}},\"getMinimumPoolTokens()\":{\"details\":\"We expect the vast majority of pools to be 2-token.\",\"returns\":{\"_0\":\"The token count of a minimal pool\"}},\"getPauseWindowEndTime()\":{\"details\":\"This value is immutable; the getter can be called by anyone.\"},\"getPoolTokenRates(address)\":{\"details\":\"This is not included in `getPoolTokenInfo` since it makes external calls that might revert, effectively preventing retrieval of basic pool parameters. Tokens without rate providers will always return FixedPoint.ONE (1e18).\"},\"getVaultPausedState()\":{\"returns\":{\"_0\":\"paused True if the Vault is paused\",\"_1\":\"vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window\",\"_2\":\"vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period\"}},\"isVaultPaused()\":{\"returns\":{\"_0\":\"True if the Vault is paused\"}},\"pausePool(address)\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during pool factory deployment.\"},\"pauseVault()\":{\"details\":\"This is a permissioned function that will only work during the Pause Window set during deployment.\"},\"setAuthorizer(address)\":{\"details\":\"The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setProtocolSwapFeePercentage(uint256)\":{\"params\":{\"newSwapFeePercentage\":\"The new swap fee percentage to be set\"}},\"setProtocolYieldFeePercentage(uint256)\":{\"params\":{\"newYieldFeePercentage\":\"The new swap fee percentage to be set\"}},\"setStaticSwapFeePercentage(address,uint256)\":{\"params\":{\"pool\":\"The address of the pool for which the static swap fee will be changed\",\"swapFeePercentage\":\"The new swap fee percentage to apply to the pool\"}},\"unpausePool(address)\":{\"details\":\"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires.\"},\"unpauseVault()\":{\"details\":\"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires.\"},\"vault()\":{\"details\":\"Returns the main Vault address.\"}},\"version\":1},\"userdoc\":{\"events\":{\"SwapFeePercentageChanged(address,uint256)\":{\"notice\":\"Emitted when the swap fee percentage of a pool is updated.\"}},\"kind\":\"user\",\"methods\":{\"collectProtocolFees(address[])\":{\"notice\":\"Collects accumulated protocol fees for the specified array of tokens.\"},\"disableQuery()\":{\"notice\":\"Disables queries functionality on the Vault. Can be called only by governance.\"},\"disableRecoveryMode(address)\":{\"notice\":\"Disable recovery mode for a pool.\"},\"enableRecoveryMode(address)\":{\"notice\":\"Enable recovery mode for a pool.\"},\"getBufferPeriodDuration()\":{\"notice\":\"Returns Vault's buffer period duration.\"},\"getBufferPeriodEndTime()\":{\"notice\":\"Returns Vault's buffer period end time.\"},\"getMaximumPoolTokens()\":{\"notice\":\"Get the maximum number of tokens in a pool.\"},\"getMinimumPoolTokens()\":{\"notice\":\"Get the minimum number of tokens in a pool.\"},\"getPauseWindowEndTime()\":{\"notice\":\"Returns Vault's pause window end time.\"},\"getPoolTokenRates(address)\":{\"notice\":\"Retrieve the scaling factors from a pool's rate providers.\"},\"getVaultPausedState()\":{\"notice\":\"Returns the paused status, and end times of the Vault's pause window and buffer period.\"},\"isVaultPaused()\":{\"notice\":\"Indicates whether the Vault is paused.\"},\"pausePool(address)\":{\"notice\":\"Pause the Pool: an emergency action which disables all pool functions.\"},\"pauseVault()\":{\"notice\":\"Pause the Vault: an emergency action which disables all operational state-changing functions.\"},\"setAuthorizer(address)\":{\"notice\":\"Sets a new Authorizer for the Vault.\"},\"setProtocolSwapFeePercentage(uint256)\":{\"notice\":\"Sets a new swap fee percentage for the protocol.\"},\"setProtocolYieldFeePercentage(uint256)\":{\"notice\":\"Sets a new yield fee percentage for the protocol.\"},\"setStaticSwapFeePercentage(address,uint256)\":{\"notice\":\"Assigns a new static swap fee percentage to the specified pool.\"},\"unpausePool(address)\":{\"notice\":\"Reverse a `pause` operation, and restore the Pool to normal functionality.\"},\"unpauseVault()\":{\"notice\":\"Reverse a `pause` operation, and restore the Vault to normal functionality.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IVaultAdmin.sol\":\"IVaultAdmin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IAuthorizer.sol\":{\"keccak256\":\"0xfe3278913eb925022136ae31b1f1a33e60e5b950d0c3288b8bc87d054cdaec03\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0d2c4586e9f26f8a1fd8dc6945a3ab34d23219da74959fd47e4ba826ab249d53\",\"dweb:/ipfs/QmP3c3GJ8UHYvw6nX7iRDDm3xh4cwJrWUksMREDAohkVD9\"]},\"contracts/interfaces/IRateProvider.sol\":{\"keccak256\":\"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6\",\"dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9\"]},\"contracts/interfaces/IVault.sol\":{\"keccak256\":\"0x9defac7f1a522b6cf6fba6e930d327523fc40db0ea6121b2e6071e757b647e30\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://c53c9c819cdc57258fa7c8365a51400ee37f7df390a01815f9c21fac47e33562\",\"dweb:/ipfs/QmeZJDYTku8iqC9tjraQGyDDxrwuYpt8YELWKi4puWaApb\"]},\"contracts/interfaces/IVaultAdmin.sol\":{\"keccak256\":\"0x7741e61bfcab7f3d2201367c4512903991de2e91b10ff022a22f1ea1f7416a91\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://49e3ce6c9d9a7bbc9add5bd5577fa73b3cff9b3b102e025e52f888ca232da2cb\",\"dweb:/ipfs/QmWRwhXTvnTc3Z3tHWuo6dBnxtFr89KQepVDHEBrguV2iE\"]},\"contracts/interfaces/IVaultErrors.sol\":{\"keccak256\":\"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c\",\"dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah\"]},\"contracts/interfaces/IVaultEvents.sol\":{\"keccak256\":\"0xe561d23e8f311be7274a115a839f4ae3e2b24accc2b3b1fb1e23dbd5ec97ab32\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://933b4078d8cf44ce5f58a02843808ec7ff07120ea9c4b51a95e2d4606aa566b9\",\"dweb:/ipfs/QmT3r93qATKxcyUej9dCfayUB5KRTvHJ6BvNcy1Un6FcAf\"]},\"contracts/interfaces/IVaultExtension.sol\":{\"keccak256\":\"0x95690cde8cb09617aab94ca6eb8df973576d96d75a37eacd071f6469d91bcad7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://358646937a4f0b6312b90c9e0ad49cb33d303512bd34be9c1233d5376f18f6f0\",\"dweb:/ipfs/QmeeKoYhqRwPjQEKpyWQtTG58vmdbRkFQRUbAAE6RWdXb7\"]},\"contracts/interfaces/IVaultMain.sol\":{\"keccak256\":\"0xda48e9312d7b1428fa89b30406b586262aab2d7d0281ebbdbbfaef1375240849\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://add42cd3dc01ebd4ea38f047406bd97ad99546bd25f8645e45ba6800d1e2e149\",\"dweb:/ipfs/QmZNt5KUpTLETPeq9ypSUq2KhACChVNaQsmF9Ye5SXPBT3\"]},\"contracts/interfaces/VaultTypes.sol\":{\"keccak256\":\"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f\",\"dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW\"]},\"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"pool","type":"address","indexed":true},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256","indexed":true}],"type":"event","name":"SwapFeePercentageChanged","anonymous":false},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"collectProtocolFees"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"disableQuery"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"disableRecoveryMode"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"enableRecoveryMode"},{"inputs":[],"stateMutability":"view","type":"function","name":"getBufferPeriodDuration","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getBufferPeriodEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"getMaximumPoolTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"getMinimumPoolTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPauseWindowEndTime","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function","name":"getPoolTokenRates","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getVaultPausedState","outputs":[{"internalType":"bool","name":"","type":"bool"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"isVaultPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"pausePool"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"pauseVault"},{"inputs":[{"internalType":"contract IAuthorizer","name":"newAuthorizer","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setAuthorizer"},{"inputs":[{"internalType":"uint256","name":"newSwapFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setProtocolSwapFeePercentage"},{"inputs":[{"internalType":"uint256","name":"newYieldFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setProtocolYieldFeePercentage"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"uint256","name":"swapFeePercentage","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setStaticSwapFeePercentage"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"unpausePool"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"unpauseVault"},{"inputs":[],"stateMutability":"view","type":"function","name":"vault","outputs":[{"internalType":"contract IVault","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"collectProtocolFees(address[])":{"details":"Fees are sent to msg.sender.","params":{"tokens":"An array of token addresses for which the fees should be collected"}},"disableRecoveryMode(address)":{"details":"This is a permissioned function.","params":{"pool":"The pool"}},"enableRecoveryMode(address)":{"details":"This is a permissioned function.","params":{"pool":"The pool"}},"getBufferPeriodDuration()":{"details":"This value is immutable; the getter can be called by anyone."},"getBufferPeriodEndTime()":{"details":"This value is immutable; the getter can be called by anyone."},"getMaximumPoolTokens()":{"returns":{"_0":"The token count of a minimal pool"}},"getMinimumPoolTokens()":{"details":"We expect the vast majority of pools to be 2-token.","returns":{"_0":"The token count of a minimal pool"}},"getPauseWindowEndTime()":{"details":"This value is immutable; the getter can be called by anyone."},"getPoolTokenRates(address)":{"details":"This is not included in `getPoolTokenInfo` since it makes external calls that might revert, effectively preventing retrieval of basic pool parameters. Tokens without rate providers will always return FixedPoint.ONE (1e18)."},"getVaultPausedState()":{"returns":{"_0":"paused True if the Vault is paused","_1":"vaultPauseWindowEndTime The timestamp of the end of the Vault's pause window","_2":"vaultBufferPeriodEndTime The timestamp of the end of the Vault's buffer period"}},"isVaultPaused()":{"returns":{"_0":"True if the Vault is paused"}},"pausePool(address)":{"details":"This is a permissioned function that will only work during the Pause Window set during pool factory deployment."},"pauseVault()":{"details":"This is a permissioned function that will only work during the Pause Window set during deployment."},"setAuthorizer(address)":{"details":"The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."},"setProtocolSwapFeePercentage(uint256)":{"params":{"newSwapFeePercentage":"The new swap fee percentage to be set"}},"setProtocolYieldFeePercentage(uint256)":{"params":{"newYieldFeePercentage":"The new swap fee percentage to be set"}},"setStaticSwapFeePercentage(address,uint256)":{"params":{"pool":"The address of the pool for which the static swap fee will be changed","swapFeePercentage":"The new swap fee percentage to apply to the pool"}},"unpausePool(address)":{"details":"This is a permissioned function that will only work on a paused Pool within the Buffer Period set during deployment. Note that the Pool will automatically unpause after the Buffer Period expires."},"unpauseVault()":{"details":"This is a permissioned function that will only work on a paused Vault within the Buffer Period set during deployment. Note that the Vault will automatically unpause after the Buffer Period expires."},"vault()":{"details":"Returns the main Vault address."}},"version":1},"userdoc":{"kind":"user","methods":{"collectProtocolFees(address[])":{"notice":"Collects accumulated protocol fees for the specified array of tokens."},"disableQuery()":{"notice":"Disables queries functionality on the Vault. Can be called only by governance."},"disableRecoveryMode(address)":{"notice":"Disable recovery mode for a pool."},"enableRecoveryMode(address)":{"notice":"Enable recovery mode for a pool."},"getBufferPeriodDuration()":{"notice":"Returns Vault's buffer period duration."},"getBufferPeriodEndTime()":{"notice":"Returns Vault's buffer period end time."},"getMaximumPoolTokens()":{"notice":"Get the maximum number of tokens in a pool."},"getMinimumPoolTokens()":{"notice":"Get the minimum number of tokens in a pool."},"getPauseWindowEndTime()":{"notice":"Returns Vault's pause window end time."},"getPoolTokenRates(address)":{"notice":"Retrieve the scaling factors from a pool's rate providers."},"getVaultPausedState()":{"notice":"Returns the paused status, and end times of the Vault's pause window and buffer period."},"isVaultPaused()":{"notice":"Indicates whether the Vault is paused."},"pausePool(address)":{"notice":"Pause the Pool: an emergency action which disables all pool functions."},"pauseVault()":{"notice":"Pause the Vault: an emergency action which disables all operational state-changing functions."},"setAuthorizer(address)":{"notice":"Sets a new Authorizer for the Vault."},"setProtocolSwapFeePercentage(uint256)":{"notice":"Sets a new swap fee percentage for the protocol."},"setProtocolYieldFeePercentage(uint256)":{"notice":"Sets a new yield fee percentage for the protocol."},"setStaticSwapFeePercentage(address,uint256)":{"notice":"Assigns a new static swap fee percentage to the specified pool."},"unpausePool(address)":{"notice":"Reverse a `pause` operation, and restore the Pool to normal functionality."},"unpauseVault()":{"notice":"Reverse a `pause` operation, and restore the Vault to normal functionality."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IVaultAdmin.sol":"IVaultAdmin"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/IAuthorizer.sol":{"keccak256":"0xfe3278913eb925022136ae31b1f1a33e60e5b950d0c3288b8bc87d054cdaec03","urls":["bzz-raw://0d2c4586e9f26f8a1fd8dc6945a3ab34d23219da74959fd47e4ba826ab249d53","dweb:/ipfs/QmP3c3GJ8UHYvw6nX7iRDDm3xh4cwJrWUksMREDAohkVD9"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IRateProvider.sol":{"keccak256":"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41","urls":["bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6","dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVault.sol":{"keccak256":"0x9defac7f1a522b6cf6fba6e930d327523fc40db0ea6121b2e6071e757b647e30","urls":["bzz-raw://c53c9c819cdc57258fa7c8365a51400ee37f7df390a01815f9c21fac47e33562","dweb:/ipfs/QmeZJDYTku8iqC9tjraQGyDDxrwuYpt8YELWKi4puWaApb"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultAdmin.sol":{"keccak256":"0x7741e61bfcab7f3d2201367c4512903991de2e91b10ff022a22f1ea1f7416a91","urls":["bzz-raw://49e3ce6c9d9a7bbc9add5bd5577fa73b3cff9b3b102e025e52f888ca232da2cb","dweb:/ipfs/QmWRwhXTvnTc3Z3tHWuo6dBnxtFr89KQepVDHEBrguV2iE"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultErrors.sol":{"keccak256":"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3","urls":["bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c","dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultEvents.sol":{"keccak256":"0xe561d23e8f311be7274a115a839f4ae3e2b24accc2b3b1fb1e23dbd5ec97ab32","urls":["bzz-raw://933b4078d8cf44ce5f58a02843808ec7ff07120ea9c4b51a95e2d4606aa566b9","dweb:/ipfs/QmT3r93qATKxcyUej9dCfayUB5KRTvHJ6BvNcy1Un6FcAf"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultExtension.sol":{"keccak256":"0x95690cde8cb09617aab94ca6eb8df973576d96d75a37eacd071f6469d91bcad7","urls":["bzz-raw://358646937a4f0b6312b90c9e0ad49cb33d303512bd34be9c1233d5376f18f6f0","dweb:/ipfs/QmeeKoYhqRwPjQEKpyWQtTG58vmdbRkFQRUbAAE6RWdXb7"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IVaultMain.sol":{"keccak256":"0xda48e9312d7b1428fa89b30406b586262aab2d7d0281ebbdbbfaef1375240849","urls":["bzz-raw://add42cd3dc01ebd4ea38f047406bd97ad99546bd25f8645e45ba6800d1e2e149","dweb:/ipfs/QmZNt5KUpTLETPeq9ypSUq2KhACChVNaQsmF9Ye5SXPBT3"],"license":"GPL-3.0-or-later"},"contracts/interfaces/VaultTypes.sol":{"keccak256":"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11","urls":["bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f","dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW"],"license":"GPL-3.0-or-later"},"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol":{"keccak256":"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d","urls":["bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205","dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"},"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"keccak256":"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2","urls":["bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850","dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"],"license":"MIT"}},"version":1},"id":5}