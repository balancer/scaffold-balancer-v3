{"abi":[{"type":"function","name":"computeBalance","inputs":[{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"tokenInIndex","type":"uint256","internalType":"uint256"},{"name":"invariantRatio","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"newBalance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"computeInvariant","inputs":[{"name":"balancesLiveScaled18","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"invariant","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokens","inputs":[],"outputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"stateMutability":"view"},{"type":"function","name":"onSwap","inputs":[{"name":"params","type":"tuple","internalType":"struct IBasePool.SwapParams","components":[{"name":"kind","type":"uint8","internalType":"enum SwapKind"},{"name":"amountGivenScaled18","type":"uint256","internalType":"uint256"},{"name":"balancesScaled18","type":"uint256[]","internalType":"uint256[]"},{"name":"indexIn","type":"uint256","internalType":"uint256"},{"name":"indexOut","type":"uint256","internalType":"uint256"},{"name":"sender","type":"address","internalType":"address"},{"name":"userData","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"amountCalculatedScaled18","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"computeBalance(uint256[],uint256,uint256)":"16a0b3e0","computeInvariant(uint256[])":"80de451d","getPoolTokens()":"89c06568","onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))":"72c98186"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invariantRatio\",\"type\":\"uint256\"}],\"name\":\"computeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balancesLiveScaled18\",\"type\":\"uint256[]\"}],\"name\":\"computeInvariant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountGivenScaled18\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"balancesScaled18\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IBasePool.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"onSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountCalculatedScaled18\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeBalance(uint256[],uint256,uint256)\":{\"details\":\"Computes the new balance of a token after an operation, given the invariant growth ratio and all other balances.\",\"params\":{\"balancesLiveScaled18\":\"Current live balances (adjusted for decimals, rates, etc.)\",\"invariantRatio\":\"The ratio of the new invariant (after an operation) to the old\",\"tokenInIndex\":\"The index of the token we're computing the balance for, in token registration order\"},\"returns\":{\"newBalance\":\"The new balance of the selected token, after the operation\"}},\"computeInvariant(uint256[])\":{\"details\":\"This function computes the invariant based on current balances\",\"params\":{\"balancesLiveScaled18\":\"Array of current pool balances for each token in the pool, scaled to 18 decimals\"},\"returns\":{\"invariant\":\"The calculated invariant of the pool, represented as a uint256\"}},\"getPoolTokens()\":{\"details\":\"Delegated to the Vault; added here as a convenience, mainly for off-chain processes.\",\"returns\":{\"tokens\":\"List of tokens in the pool\"}},\"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"params\":{\"params\":\"Swap parameters (see above for struct definition)\"},\"returns\":{\"amountCalculatedScaled18\":\"Calculated amount for the swap\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeInvariant(uint256[])\":{\"notice\":\"Computes and returns the pool's invariant.\"},\"getPoolTokens()\":{\"notice\":\"Gets the tokens registered to a pool.\"},\"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))\":{\"notice\":\"Execute a swap in the pool.\"}},\"notice\":\"Interface for a Base Pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IBasePool.sol\":\"IBasePool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IBasePool.sol\":{\"keccak256\":\"0x3e1dfd3d723961505c41f6d185a397f1a8dc19e20e6abe46f5ec65c6bce6f56b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://92c6167ecc8c3f0700d7b366ba426f12ba6faa18a847b6321a51432ec339dc2f\",\"dweb:/ipfs/QmYBe3te7asvwfSxEBGKYDQzhboU7vTwdfXcB1Kwm1uJC5\"]},\"contracts/interfaces/IRateProvider.sol\":{\"keccak256\":\"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6\",\"dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9\"]},\"contracts/interfaces/VaultTypes.sol\":{\"keccak256\":\"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f\",\"dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"},{"internalType":"uint256","name":"tokenInIndex","type":"uint256"},{"internalType":"uint256","name":"invariantRatio","type":"uint256"}],"stateMutability":"view","type":"function","name":"computeBalance","outputs":[{"internalType":"uint256","name":"newBalance","type":"uint256"}]},{"inputs":[{"internalType":"uint256[]","name":"balancesLiveScaled18","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"computeInvariant","outputs":[{"internalType":"uint256","name":"invariant","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPoolTokens","outputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"}]},{"inputs":[{"internalType":"struct IBasePool.SwapParams","name":"params","type":"tuple","components":[{"internalType":"enum SwapKind","name":"kind","type":"uint8"},{"internalType":"uint256","name":"amountGivenScaled18","type":"uint256"},{"internalType":"uint256[]","name":"balancesScaled18","type":"uint256[]"},{"internalType":"uint256","name":"indexIn","type":"uint256"},{"internalType":"uint256","name":"indexOut","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"bytes","name":"userData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"onSwap","outputs":[{"internalType":"uint256","name":"amountCalculatedScaled18","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"computeBalance(uint256[],uint256,uint256)":{"details":"Computes the new balance of a token after an operation, given the invariant growth ratio and all other balances.","params":{"balancesLiveScaled18":"Current live balances (adjusted for decimals, rates, etc.)","invariantRatio":"The ratio of the new invariant (after an operation) to the old","tokenInIndex":"The index of the token we're computing the balance for, in token registration order"},"returns":{"newBalance":"The new balance of the selected token, after the operation"}},"computeInvariant(uint256[])":{"details":"This function computes the invariant based on current balances","params":{"balancesLiveScaled18":"Array of current pool balances for each token in the pool, scaled to 18 decimals"},"returns":{"invariant":"The calculated invariant of the pool, represented as a uint256"}},"getPoolTokens()":{"details":"Delegated to the Vault; added here as a convenience, mainly for off-chain processes.","returns":{"tokens":"List of tokens in the pool"}},"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))":{"params":{"params":"Swap parameters (see above for struct definition)"},"returns":{"amountCalculatedScaled18":"Calculated amount for the swap"}}},"version":1},"userdoc":{"kind":"user","methods":{"computeInvariant(uint256[])":{"notice":"Computes and returns the pool's invariant."},"getPoolTokens()":{"notice":"Gets the tokens registered to a pool."},"onSwap((uint8,uint256,uint256[],uint256,uint256,address,bytes))":{"notice":"Execute a swap in the pool."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IBasePool.sol":"IBasePool"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/IBasePool.sol":{"keccak256":"0x3e1dfd3d723961505c41f6d185a397f1a8dc19e20e6abe46f5ec65c6bce6f56b","urls":["bzz-raw://92c6167ecc8c3f0700d7b366ba426f12ba6faa18a847b6321a51432ec339dc2f","dweb:/ipfs/QmYBe3te7asvwfSxEBGKYDQzhboU7vTwdfXcB1Kwm1uJC5"],"license":"GPL-3.0-or-later"},"contracts/interfaces/IRateProvider.sol":{"keccak256":"0xd5ed338e0bad13b06d02735667e71a52f9b2af5292ebf8e66c52cca108425a41","urls":["bzz-raw://9ca9cb281ee4525ad4e73e26a3d69fd81472f92fa0178a8ff9ac510f3319dca6","dweb:/ipfs/Qmey5SKfQ2CCzGUVA4tTtvDCRc1ySLNJNdGKUtTvTbP7e9"],"license":"GPL-3.0-or-later"},"contracts/interfaces/VaultTypes.sol":{"keccak256":"0xdbd9552b26fc806328d962f26745f7b3dda845a1fbde80afe6c810181801be11","urls":["bzz-raw://1a4edf330698341ea90ce4f6bbf11d4d2c87737cffe189fd62df1e7bb108786f","dweb:/ipfs/QmZLVS8PJZjn7cbs1JFx9kPUHf3LXAkckxPnvdLRRNrPLW"],"license":"GPL-3.0-or-later"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"}},"version":1},"id":2}