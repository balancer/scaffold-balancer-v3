{"abi":[{"type":"error","name":"AfterAddLiquidityHookFailed","inputs":[]},{"type":"error","name":"AfterInitializeHookFailed","inputs":[]},{"type":"error","name":"AfterRemoveLiquidityHookFailed","inputs":[]},{"type":"error","name":"AfterSwapHookFailed","inputs":[]},{"type":"error","name":"AmountGivenZero","inputs":[]},{"type":"error","name":"AmountInAboveMax","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"AmountOutBelowMin","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"BalanceNotSettled","inputs":[]},{"type":"error","name":"BeforeAddLiquidityHookFailed","inputs":[]},{"type":"error","name":"BeforeInitializeHookFailed","inputs":[]},{"type":"error","name":"BeforeRemoveLiquidityHookFailed","inputs":[]},{"type":"error","name":"BeforeSwapHookFailed","inputs":[]},{"type":"error","name":"BptAmountInAboveMax","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"BptAmountOutBelowMin","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"CannotReceiveEth","inputs":[]},{"type":"error","name":"CannotSwapSameToken","inputs":[]},{"type":"error","name":"DoesNotSupportAddLiquidityCustom","inputs":[]},{"type":"error","name":"DoesNotSupportRemoveLiquidityCustom","inputs":[]},{"type":"error","name":"InvalidAddLiquidityKind","inputs":[]},{"type":"error","name":"InvalidRemoveLiquidityKind","inputs":[]},{"type":"error","name":"InvalidToken","inputs":[]},{"type":"error","name":"InvalidTokenConfiguration","inputs":[]},{"type":"error","name":"InvalidTokenType","inputs":[]},{"type":"error","name":"LockerOutOfBounds","inputs":[{"name":"index","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"MaxTokens","inputs":[]},{"type":"error","name":"MinTokens","inputs":[]},{"type":"error","name":"NoLocker","inputs":[]},{"type":"error","name":"NotVaultDelegateCall","inputs":[]},{"type":"error","name":"OperationNotSupported","inputs":[]},{"type":"error","name":"PauseBufferPeriodDurationTooLarge","inputs":[]},{"type":"error","name":"PoolAlreadyInitialized","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolAlreadyRegistered","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolInRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotInRecoveryMode","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotInitialized","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotPaused","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolNotRegistered","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolPauseWindowExpired","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"PoolPaused","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"ProtocolSwapFeePercentageTooHigh","inputs":[]},{"type":"error","name":"ProtocolYieldFeePercentageTooHigh","inputs":[]},{"type":"error","name":"QueriesDisabled","inputs":[]},{"type":"error","name":"RouterNotTrusted","inputs":[]},{"type":"error","name":"SenderIsNotPauseManager","inputs":[{"name":"pool","type":"address","internalType":"address"}]},{"type":"error","name":"SenderIsNotVault","inputs":[{"name":"sender","type":"address","internalType":"address"}]},{"type":"error","name":"SwapFeePercentageTooHigh","inputs":[]},{"type":"error","name":"SwapLimit","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"limit","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"TokenAlreadyRegistered","inputs":[{"name":"token","type":"address","internalType":"contract IERC20"}]},{"type":"error","name":"TokenNotRegistered","inputs":[]},{"type":"error","name":"TokensMismatch","inputs":[{"name":"pool","type":"address","internalType":"address"},{"name":"expectedToken","type":"address","internalType":"address"},{"name":"actualToken","type":"address","internalType":"address"}]},{"type":"error","name":"UserDataNotSupported","inputs":[]},{"type":"error","name":"VaultNotPaused","inputs":[]},{"type":"error","name":"VaultPauseWindowDurationTooLarge","inputs":[]},{"type":"error","name":"VaultPauseWindowExpired","inputs":[]},{"type":"error","name":"VaultPaused","inputs":[]},{"type":"error","name":"WrongLocker","inputs":[{"name":"locker","type":"address","internalType":"address"},{"name":"caller","type":"address","internalType":"address"}]},{"type":"error","name":"WrongVaultAdminDeployment","inputs":[]},{"type":"error","name":"WrongVaultExtensionDeployment","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AfterAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AfterSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountGivenZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"AmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"AmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeAddLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeInitializeHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeRemoveLiquidityHookFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BeforeSwapHookFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"BptAmountInAboveMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"BptAmountOutBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotReceiveEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportAddLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DoesNotSupportRemoveLiquidityCustom\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRemoveLiquidityKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenConfiguration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LockerOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultDelegateCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperationNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PauseBufferPeriodDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInRecoveryMode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolSwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolYieldFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueriesDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotTrusted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"SenderIsNotPauseManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderIsNotVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFeePercentageTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SwapLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualToken\",\"type\":\"address\"}],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserDataNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowDurationTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPauseWindowExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VaultPaused\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"WrongLocker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultAdminDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongVaultExtensionDeployment\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Errors are namespaced inside an interface to improve DX with Typechain.\",\"errors\":{\"AfterAddLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the afterAddLiquidity hook, indicating the transaction should revert.\"}],\"AfterInitializeHookFailed()\":[{\"details\":\"The pool has returned false to the afterInitialize hook, indicating the transaction should revert.\"}],\"AfterRemoveLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the afterRemoveLiquidity hook, indicating the transaction should revert.\"}],\"AfterSwapHookFailed()\":[{\"details\":\"The pool has returned false to the afterSwap hook, indicating the transaction should revert.\"}],\"AmountGivenZero()\":[{\"details\":\"The user tried to swap zero tokens.\"}],\"AmountInAboveMax(address,uint256,uint256)\":[{\"details\":\"A required amountIn exceeds the maximum limit specified for the operation.\"}],\"AmountOutBelowMin(address,uint256,uint256)\":[{\"details\":\"The actual amount out is below the minimum limit specified for the operation.\"}],\"BalanceNotSettled()\":[{\"details\":\"A transient accounting operation completed with outstanding token deltas.\"}],\"BeforeAddLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the beforeAddLiquidity hook, indicating the transaction should revert.\"}],\"BeforeInitializeHookFailed()\":[{\"details\":\"The pool has returned false to the beforeInitialize hook, indicating the transaction should revert.\"}],\"BeforeRemoveLiquidityHookFailed()\":[{\"details\":\"The pool has returned false to the beforeRemoveLiquidity hook, indicating the transaction should revert.\"}],\"BeforeSwapHookFailed()\":[{\"details\":\"The pool has returned false to the beforeSwap hook, indicating the transaction should revert.\"}],\"BptAmountInAboveMax(uint256,uint256)\":[{\"details\":\"The required BPT amount in exceeds the maximum limit specified for the operation.\"}],\"BptAmountOutBelowMin(uint256,uint256)\":[{\"details\":\"The BPT amount received from adding liquidity is below the minimum specified for the operation.\"}],\"CannotReceiveEth()\":[{\"details\":\"The contract should not receive ETH.\"}],\"CannotSwapSameToken()\":[{\"details\":\"The user attempted to swap a token for itself.\"}],\"DoesNotSupportAddLiquidityCustom()\":[{\"details\":\"Pool does not support adding liquidity with a customized input.\"}],\"DoesNotSupportRemoveLiquidityCustom()\":[{\"details\":\"Pool does not support removing liquidity with a customized input.\"}],\"InvalidAddLiquidityKind()\":[{\"details\":\"Add liquidity kind not supported.\"}],\"InvalidRemoveLiquidityKind()\":[{\"details\":\"Remove liquidity kind not supported.\"}],\"InvalidToken()\":[{\"details\":\"Invalid tokens (e.g., zero) cannot be registered.\"}],\"InvalidTokenConfiguration()\":[{\"details\":\"The data in a TokenConfig struct is inconsistent or unsupported.\"}],\"InvalidTokenType()\":[{\"details\":\"The token type given in a TokenConfig during pool registration is invalid.\"}],\"LockerOutOfBounds(uint256)\":[{\"details\":\"The caller attempted to access a Locker at an invalid index.\",\"params\":{\"index\":\"The invalid index\"}}],\"MaxTokens()\":[{\"details\":\"The token count is above the maximum allowed.\"}],\"MinTokens()\":[{\"details\":\"The token count is below the minimum allowed.\"}],\"NoLocker()\":[{\"details\":\"A user called a Vault function (swap, add/remove liquidity) outside the lock context.\"}],\"NotVaultDelegateCall()\":[{\"details\":\"The Vault extension was called by an account directly; it can only be called by the Vault via delegatecall.\"}],\"OperationNotSupported()\":[{\"details\":\"Error thrown when a function is not supported.\"}],\"PauseBufferPeriodDurationTooLarge()\":[{\"details\":\"The caller specified a buffer period longer than the maximum.\"}],\"PoolAlreadyInitialized(address)\":[{\"details\":\"A pool has already been initialized. `initialize` may only be called once.\",\"params\":{\"pool\":\"The already initialized pool\"}}],\"PoolAlreadyRegistered(address)\":[{\"details\":\"A pool has already been registered. `registerPool` may only be called once.\",\"params\":{\"pool\":\"The already registered pool\"}}],\"PoolInRecoveryMode(address)\":[{\"details\":\"Cannot enable recovery mode when already enabled.\",\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInRecoveryMode(address)\":[{\"details\":\"Cannot disable recovery mode when not enabled.\",\"params\":{\"pool\":\"The pool\"}}],\"PoolNotInitialized(address)\":[{\"details\":\"A referenced pool has not been initialized.\",\"params\":{\"pool\":\"The uninitialized pool\"}}],\"PoolNotPaused(address)\":[{\"details\":\"Governance tried to unpause the Pool when it was not paused.\",\"params\":{\"pool\":\"The unpaused pool\"}}],\"PoolNotRegistered(address)\":[{\"details\":\"A pool has not been registered.\",\"params\":{\"pool\":\"The unregistered pool\"}}],\"PoolPauseWindowExpired(address)\":[{\"details\":\"Governance tried to pause a Pool after the pause period expired.\",\"params\":{\"pool\":\"The pool\"}}],\"PoolPaused(address)\":[{\"details\":\"A user tried to perform an operation involving a paused Pool.\",\"params\":{\"pool\":\"The paused pool\"}}],\"ProtocolSwapFeePercentageTooHigh()\":[{\"details\":\"Error raised when the protocol swap fee percentage exceeds the maximum allowed value.\"}],\"ProtocolYieldFeePercentageTooHigh()\":[{\"details\":\"Error raised when the protocol yield fee percentage exceeds the maximum allowed value.\"}],\"QueriesDisabled()\":[{\"details\":\"A user tried to execute a query operation when they were disabled.\"}],\"RouterNotTrusted()\":[{\"details\":\"An unauthorized Router tried to call a permissioned function (i.e., using the Vault's token allowance).\"}],\"SenderIsNotPauseManager(address)\":[{\"details\":\"The caller is not the registered pause manager for the pool.\",\"params\":{\"pool\":\"The pool\"}}],\"SenderIsNotVault(address)\":[{\"details\":\"Error indicating the sender is not the Vault (e.g., someone is trying to call a permissioned function).\",\"params\":{\"sender\":\"The account attempting to call a permissioned function\"}}],\"SwapFeePercentageTooHigh()\":[{\"details\":\"Error raised when the swap fee percentage exceeds the maximum allowed value.\"}],\"SwapLimit(uint256,uint256)\":[{\"details\":\"An amount in or out has exceeded the limit specified in the swap request.\"}],\"TokenAlreadyRegistered(address)\":[{\"details\":\"A token was already registered (i.e., it is a duplicate in the pool).\",\"params\":{\"token\":\"The duplicate token\"}}],\"TokenNotRegistered()\":[{\"details\":\"The user attempted to swap a token not in the pool.\"}],\"TokensMismatch(address,address,address)\":[{\"details\":\"The token list passed into an operation does not match the pool tokens in the pool.\",\"params\":{\"actualToken\":\"The actual token found at that index\",\"expectedToken\":\"The correct token at a given index in the pool\",\"pool\":\"Address of the pool\"}}],\"UserDataNotSupported()\":[{\"details\":\"Optional User Data should be empty in the current add / remove liquidity kind.\"}],\"VaultNotPaused()\":[{\"details\":\"Governance tried to unpause the Vault when it was not paused.\"}],\"VaultPauseWindowDurationTooLarge()\":[{\"details\":\"The caller specified a pause window period longer than the maximum.\"}],\"VaultPauseWindowExpired()\":[{\"details\":\"Governance tried to pause the Vault after the pause period expired.\"}],\"VaultPaused()\":[{\"details\":\"A user tried to perform an operation while the Vault was paused.\"}],\"WrongLocker(address,address)\":[{\"details\":\"In transient accounting, a locker is attempting to execute an operation out of order. The caller address should equal the locker.\",\"params\":{\"caller\":\"Address of the caller (msg.sender)\",\"locker\":\"Address of the current locker being processed\"}}],\"WrongVaultAdminDeployment()\":[{\"details\":\"The vault admin was configured with an incorrect Vault address.\"}],\"WrongVaultExtensionDeployment()\":[{\"details\":\"The vault extension was configured with an incorrect Vault address.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IVaultErrors.sol\":\"IVaultErrors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IVaultErrors.sol\":{\"keccak256\":\"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c\",\"dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"AfterAddLiquidityHookFailed"},{"inputs":[],"type":"error","name":"AfterInitializeHookFailed"},{"inputs":[],"type":"error","name":"AfterRemoveLiquidityHookFailed"},{"inputs":[],"type":"error","name":"AfterSwapHookFailed"},{"inputs":[],"type":"error","name":"AmountGivenZero"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"AmountInAboveMax"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"AmountOutBelowMin"},{"inputs":[],"type":"error","name":"BalanceNotSettled"},{"inputs":[],"type":"error","name":"BeforeAddLiquidityHookFailed"},{"inputs":[],"type":"error","name":"BeforeInitializeHookFailed"},{"inputs":[],"type":"error","name":"BeforeRemoveLiquidityHookFailed"},{"inputs":[],"type":"error","name":"BeforeSwapHookFailed"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"BptAmountInAboveMax"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"BptAmountOutBelowMin"},{"inputs":[],"type":"error","name":"CannotReceiveEth"},{"inputs":[],"type":"error","name":"CannotSwapSameToken"},{"inputs":[],"type":"error","name":"DoesNotSupportAddLiquidityCustom"},{"inputs":[],"type":"error","name":"DoesNotSupportRemoveLiquidityCustom"},{"inputs":[],"type":"error","name":"InvalidAddLiquidityKind"},{"inputs":[],"type":"error","name":"InvalidRemoveLiquidityKind"},{"inputs":[],"type":"error","name":"InvalidToken"},{"inputs":[],"type":"error","name":"InvalidTokenConfiguration"},{"inputs":[],"type":"error","name":"InvalidTokenType"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"type":"error","name":"LockerOutOfBounds"},{"inputs":[],"type":"error","name":"MaxTokens"},{"inputs":[],"type":"error","name":"MinTokens"},{"inputs":[],"type":"error","name":"NoLocker"},{"inputs":[],"type":"error","name":"NotVaultDelegateCall"},{"inputs":[],"type":"error","name":"OperationNotSupported"},{"inputs":[],"type":"error","name":"PauseBufferPeriodDurationTooLarge"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolAlreadyInitialized"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolAlreadyRegistered"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolInRecoveryMode"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotInRecoveryMode"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotInitialized"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotPaused"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolNotRegistered"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolPauseWindowExpired"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"PoolPaused"},{"inputs":[],"type":"error","name":"ProtocolSwapFeePercentageTooHigh"},{"inputs":[],"type":"error","name":"ProtocolYieldFeePercentageTooHigh"},{"inputs":[],"type":"error","name":"QueriesDisabled"},{"inputs":[],"type":"error","name":"RouterNotTrusted"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"type":"error","name":"SenderIsNotPauseManager"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"type":"error","name":"SenderIsNotVault"},{"inputs":[],"type":"error","name":"SwapFeePercentageTooHigh"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"limit","type":"uint256"}],"type":"error","name":"SwapLimit"},{"inputs":[{"internalType":"contract IERC20","name":"token","type":"address"}],"type":"error","name":"TokenAlreadyRegistered"},{"inputs":[],"type":"error","name":"TokenNotRegistered"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"expectedToken","type":"address"},{"internalType":"address","name":"actualToken","type":"address"}],"type":"error","name":"TokensMismatch"},{"inputs":[],"type":"error","name":"UserDataNotSupported"},{"inputs":[],"type":"error","name":"VaultNotPaused"},{"inputs":[],"type":"error","name":"VaultPauseWindowDurationTooLarge"},{"inputs":[],"type":"error","name":"VaultPauseWindowExpired"},{"inputs":[],"type":"error","name":"VaultPaused"},{"inputs":[{"internalType":"address","name":"locker","type":"address"},{"internalType":"address","name":"caller","type":"address"}],"type":"error","name":"WrongLocker"},{"inputs":[],"type":"error","name":"WrongVaultAdminDeployment"},{"inputs":[],"type":"error","name":"WrongVaultExtensionDeployment"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/@openzeppelin/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IVaultErrors.sol":"IVaultErrors"},"evmVersion":"paris","libraries":{}},"sources":{"contracts/interfaces/IVaultErrors.sol":{"keccak256":"0x59def2dc9b00efd92a842de19f7aa1b33ceeb0d8bd38dabfb11795ddc64c9fb3","urls":["bzz-raw://2c0a337e5b60effb021e7201e4538d2a6b7f7f6bbfec2dbde76ffa519419390c","dweb:/ipfs/QmWTiD7C6WBLiBhdnY3mmRWy2sqgqpV9823x9S5prcNDah"],"license":"GPL-3.0-or-later"},"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70","urls":["bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c","dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"],"license":"MIT"}},"version":1},"id":6}